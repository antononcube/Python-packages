(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2109947,      39981]
NotebookOptionsPosition[   2061880,      39338]
NotebookOutlinePosition[   2062275,      39354]
CellTagsIndexPosition[   2062232,      39351]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Workflows with LLM functions", "Title",ExpressionUUID->"6c69736b-12bd-42e4-bf14-900289336607"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"226eb981-28d1-4758-beb4-7f0f6d31445d"],

Cell["\<\
In this computational document we discuss and demonstrate the inclusion and \
integration of Large Language Model (LLM) functions into different types of \
Raku workflows.\
\>", "Text",ExpressionUUID->"e25ad530-da24-4c5c-8c34-a60e5db283e4"],

Cell["\<\
Since LLMs hallucinate results, it becomes necessary to manipulate their \
inputs, the outputs, or both. Therefore, having a system for managing, \
coordinating, and streamlining LLM requests, along with methods for \
incorporating these requests into the \"playgrounds\" of a certain \
programming language, would be highly beneficial.\
\>", "Text",ExpressionUUID->"1122982f-46c5-4c62-8336-c31a0d4bd06c"],

Cell[TextData[{
 "This",
 " ",
 "is",
 " ",
 "what",
 " ",
 "the",
 " ",
 "package",
 " ",
 ButtonBox["\"LLMFunctionObjects\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/LLMFunctionObjects"], None}],
 " ",
 ",",
 " ",
 "[AAp1],",
 " ",
 "aims",
 " ",
 "to",
 " ",
 "do",
 " ",
 "in",
 " ",
 "Python",
 " ",
 "and",
 " ",
 "Python's",
 " ",
 "ecosystem."
}], "Text",ExpressionUUID->"0a2ac6e0-e8e1-4836-91b8-7d7c789b486e"],

Cell[CellGroupData[{

Cell["Dynamic duo", "Subsection",ExpressionUUID->"2c60636f-f380-4239-9aff-5e0b91f9f712"],

Cell["\<\
LLMs are celebrated for producing good to great results, but they have a few \
big issues. The content they generate can be inconsistent, prone to \
hallucination, and sometimes biased, making it unreliable. The form, or \
stylistic structure, may also vary widely, with a lack of determinism and \
sensitivity to hyperparameters contributing to challenges in reproducibility. \
Moreover, customization and debugging can be complex due to these \
inconsistencies.\
\>", "Text",ExpressionUUID->"28d40f67-02c2-4ef5-9f3c-776baadca516"],

Cell["\<\
The lack of reliability and reproducibility in both content and form \
underscore the need for streamlining, managing, and transforming LLM \
inquiries and results.\
\>", "Text",ExpressionUUID->"e8bd3f67-93eb-4a2d-abd7-40807c6aabc3"],

Cell[TextData[{
 "Python,",
 " ",
 "has",
 " ",
 "fairly",
 " ",
 "good",
 " ",
 "tools",
 " ",
 "for",
 " ",
 "text",
 " ",
 "manipulation,",
 " ",
 "hence",
 " ",
 "it",
 " ",
 "can",
 " ",
 "complement",
 " ",
 "LLMs",
 " ",
 "well.",
 " ",
 "While",
 " ",
 "Raku",
 " ",
 "might",
 " ",
 "not",
 " ",
 "be",
 " ",
 "everyone's",
 " ",
 "favorite",
 " ",
 "language",
 " ",
 "and",
 " ",
 "has",
 " ",
 "certain",
 " ",
 "intricacies",
 " ",
 "that",
 " ",
 "take",
 " ",
 "some",
 " ",
 "getting",
 " ",
 "used",
 " ",
 "to,",
 " ",
 "its",
 " ",
 "popularity",
 " ",
 "is",
 " ",
 "hard",
 " ",
 "to",
 " ",
 "ignore.",
 " ",
 StyleBox["*",
  FontSlant->"Italic"],
 " ",
 "Creating",
 " ",
 "well-crafted",
 " ",
 "pairings",
 " ",
 "of",
 " ",
 "Python",
 " ",
 "with",
 " ",
 "LLMs",
 " ",
 "can",
 " ",
 "speed",
 " ",
 "up",
 " ",
 "a",
 " ",
 "lot",
 " ",
 "of",
 " ",
 "educational",
 " ",
 "and",
 " ",
 "research",
 " ",
 "activities",
 " ",
 "that",
 " ",
 "require",
 " ",
 "software",
 " ",
 "support.***"
}], "Text",ExpressionUUID->"e7dad165-361e-46d0-9cca-5a4ceff2f786"],

Cell["\<\
\"LLMFunctionObjects\" establishes a (object-oriented programming) connection \
between Python's capabilities and the vast potential of LLMs. Ideally that \
promising LLM-Python pairing is further strengthened and enriched into \
something that some might call a \"dynamic duo.\"\
\>", "Text",ExpressionUUID->"b47a4b73-ab63-4d00-8e4b-dd5b91ab1d0f"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "For",
 " ",
 "an",
 " ",
 "example",
 " ",
 "of",
 " ",
 "a",
 " ",
 "mature",
 " ",
 "effort",
 " ",
 "with",
 " ",
 "the",
 " ",
 "same",
 " ",
 "mission",
 " ",
 "(and",
 " ",
 "naming,",
 " ",
 "and",
 " ",
 "design)",
 " ",
 "see",
 " ",
 "[SW1]",
 " ",
 "and",
 " ",
 "[WRIp1]."
}], "Text",ExpressionUUID->"b0b5ecf7-a225-4e31-9537-42527c5875c1"],

Cell["\<\
*Remark:** And yes, for Mathematica or Wolfram Language (WL) it can be also \
said: *Creating well-crafted pairings of WL with LLMs can broaden WL's \
adoption and utilization.\
\>", "Text",
 FontSlant->"Italic",ExpressionUUID->"1c23288c-15d6-4aa3-90c3-748791da6245"],

Cell["\<\
WL, though, is much better positioned for integrating with multi-modal LLMs \
because of WL's ability to create and manipulate symbolic representation of \
different types of objects (audio, images, and video included), and WL's very \
advanced notebook technology.\
\>", "Text",ExpressionUUID->"06b2afc1-3094-4985-98af-dc67eeef9438"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Standard enhancements", "Subsection",ExpressionUUID->"f429d17c-a9c1-4ff6-889b-c8bc00b27072"],

Cell[TextData[{
 "To",
 " ",
 "enhance",
 " ",
 "the",
 " ",
 "pairing",
 " ",
 "of",
 " ",
 "Python",
 " ",
 "with",
 " ",
 "LLMs,",
 " ",
 "it",
 " ",
 "is",
 " ",
 StyleBox["also",
  FontSlant->"Italic"],
 " ",
 "essential",
 " ",
 "to",
 " ",
 "have:"
}], "Text",ExpressionUUID->"7099fca3-a223-4b10-ba7a-577e83597646"],

Cell["LLM prompt repository with many well documented prompts", "Item",ExpressionUUID->"4348955d-70d9-4484-8cd6-db687d7b621b"],

Cell["\<\
Polyglot parsing of dates, numbers, regular expressions, data formats, \
grammar specs, etc.\
\>", "Item",ExpressionUUID->"59cbb6dd-93ef-4aad-858b-152687d7d3e6"],

Cell["\<\
For an example of the former see the Wolfram Prompt Repository, [WRIr1], or \
the Python package \"LLMPrompts\", [AAp2]. For examples of the latter see the \
sub-parsers of \"LLMFunctionObjects\", [AAp1].\
\>", "Text",ExpressionUUID->"35248c6f-eff5-43f7-aee2-75b963f37492"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactivity is needed", "Subsection",ExpressionUUID->"34b7f233-d6d2-4e50-99d5-7081b9aac0b8"],

Cell[TextData[{
 "Generally",
 " ",
 "speaking,",
 " ",
 "using",
 " ",
 "LLM",
 " ",
 "functions",
 " ",
 "in",
 " ",
 "Python",
 " ",
 "(or",
 " ",
 "Mathematica,",
 " ",
 "or",
 " ",
 "R,",
 " ",
 "or",
 " ",
 "Raku)",
 " ",
 "requires",
 " ",
 "good",
 " ",
 "tools",
 " ",
 "for",
 " ",
 ButtonBox["Read Eval Print Loop (REPL)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Read\[AHat]\.80\.93eval\[AHat]\.80\.93\
print_loop"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"b77df5d9-64dc-4a38-a4cb-a0e3b21b0bf7"],

Cell["\<\
Notebooks are best for LLM utilization because notebooks offer an interactive \
environment where LLM whisperers, LLM tamers, neural net navigators, and bot \
wranglers can write code, run it, see the results, and tweak the code -- all \
in one place.\
\>", "Text",ExpressionUUID->"29778a36-f3a3-4426-80b5-508dceaf63c4"],

Cell["Python currently has (at least) three notebook solutions:", "Text",ExpressionUUID->"17603f06-2bc8-4149-898a-2e90a083c4be"],

Cell[TextData[{
 ButtonBox["\"IPython\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://ipython.org/"], None}],
 " ",
 "with",
 " ",
 "the",
 " ",
 ButtonBox["Jupyter framework",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://jupyter.org"], None}]
}], "ItemNumbered",ExpressionUUID->"413d41c5-9f5a-42aa-acf0-e0cd7336d03f"],

Cell[TextData[{
 ButtonBox["RStudio notebooks",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://rmarkdown.rstudio.com/lesson-10.html"], None}],
 " ",
 "(with",
 " ",
 "Python",
 " ",
 "cells)"
}], "ItemNumbered",ExpressionUUID->"73e129d0-2648-429f-96b0-38b97a736959"],

Cell[TextData[{
 ButtonBox["Python external evaluation cells",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/language/12/external-system-integration/\
evaluate-python-in-a-notebook.html"], None}],
 " ",
 "in",
 " ",
 ButtonBox["Mathematica notebooks",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/mathematica"], None}]
}], "ItemNumbered",ExpressionUUID->"4d7d51d0-4582-4c80-aafe-4edddbbfa3d8"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "Also",
 " ",
 "see",
 " ",
 ButtonBox["Quarto",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://quarto.org"], None}],
 " ",
 "that",
 " ",
 "combines",
 " ",
 "different",
 " ",
 "notebook",
 " ",
 "solutions."
}], "Text",ExpressionUUID->"9a505bb3-312a-44b0-ab2d-0920dc017ed6"],

Cell["\<\
\"Just\" using scripts is an option, but since LLM queries have certain time \
lag and usage expenses, it is not a good one:\
\>", "Text",ExpressionUUID->"d058b15c-ae21-4d1a-a4f6-8793a4edaa12"],

Cell["\<\
We cannot see the intermediate results and adjust accordingly\
\>", "Item",ExpressionUUID->"351fab33-7c4b-465d-9dd0-d4dfe565f26d"],

Cell["\<\
Multiple (slow) executions would be needed to get desired results\
\>", "Item",ExpressionUUID->"fc3731d8-916d-4518-996e-9d76055d3372"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Article structure", "Subsection",ExpressionUUID->"2e2029a4-d2a3-414d-9c90-bfc3b85e50af"],

Cell["Here are sections of the article:", "Text",ExpressionUUID->"a758173d-e19f-450a-963f-70f621da2b7b"],

Cell[TextData[StyleBox["General structure of LLM-based workflows",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"5ced672c-e867-4ac9-b108-\
cec87aded96f"],

Cell["\<\
... Formulating and visualizing the overall process used in all LLM workflow \
examples.\
\>", "Text",ExpressionUUID->"8432e99b-36b6-4b21-b54a-030fa8d957da"],

Cell[TextData[StyleBox["Plot data",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"f0f53ce4-0594-4ab4-a781-0218441f8196"],

Cell["... Plotting LLM-retrieved data.", "Text",ExpressionUUID->"b3c1e769-e3aa-49dc-80f7-0e0cd2feda20"],

Cell[TextData[StyleBox["Normalizing outputs",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"daae5223-3bb3-41f9-a65e-28ea9dfdb540"],

Cell["\<\
... Examples of how LLM-function outputs can be \"normalized\" using other \
LLM functions.\
\>", "Text",ExpressionUUID->"b694f3fc-a464-439b-9d26-b590eae01eef"],

Cell[TextData[StyleBox["Conversion to Python objects",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"6d089305-4278-41d9-b71f-\
15d80d0e42bb"],

Cell["\<\
... Conversion of LLM-outputs in Python physical units objects.\
\>", "Text",ExpressionUUID->"8afe3edf-23b5-43f5-a93d-f8033565a5d3"],

Cell[TextData[StyleBox["Chemical formulas",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"74db5e09-0d2c-4112-ba54-0f71094f2d53"],

Cell["... Retrieving chemical formulas and investigating them.", "Text",ExpressionUUID->"3fcec9e1-5460-4bb2-be7d-d9632f37a526"],

Cell[TextData[StyleBox["Making (embedded) Mermaid diagrams",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"61cd353c-e476-421d-8132-\
cb30f6b42a30"],

Cell["\<\
... Straightforward application of LLM abilities and literate programming \
tools.\
\>", "Text",ExpressionUUID->"05482b84-b8fe-4c27-9d6e-bfa2871573d6"],

Cell[TextData[StyleBox["Named entity recognition",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"4fac82e9-0737-4ea1-89ab-\
c5e4c563cd2e"],

Cell["\<\
... How to obtain music album names and release dates and tabulate or plot \
them.\
\>", "Text",ExpressionUUID->"f519c658-76b2-425f-8121-afb331efc349"],

Cell[TextData[StyleBox["Statistics of output data types",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"c5f65828-c0dc-4f4f-9751-\
8d486186f98c"],

Cell["\<\
... Illustration why programmers need streamlining solutions for LLMs.\
\>", "Text",ExpressionUUID->"de0378f9-14a3-4319-af82-556f7d63e250"],

Cell[TextData[StyleBox["Other workflows",
 FontWeight->"Bold"]], "Item",ExpressionUUID->"d4c33e1d-733c-4f57-a35d-c75c8e0d3188"],

Cell["\<\
... Outline of other workflows using LLM chat objects. (Also provided by \
\"LLM::Functions\".)\
\>", "Text",ExpressionUUID->"fc1f0338-d20a-4535-bfd0-819e210f7398"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "Most",
 " ",
 "of",
 " ",
 "the",
 " ",
 "sections",
 " ",
 "have",
 " ",
 "a",
 " ",
 "sub-section",
 " ",
 "titled",
 " ",
 "\"Exercise",
 " ",
 "questions\".",
 " ",
 "The",
 " ",
 "reader",
 " ",
 "is",
 " ",
 "the",
 " ",
 "secondary",
 " ",
 "target",
 " ",
 "audience",
 " ",
 "for",
 " ",
 "those.",
 " ",
 "The",
 " ",
 "primary",
 " ",
 "target",
 " ",
 "are",
 " ",
 "LLMs",
 " ",
 "to",
 " ",
 "respond",
 " ",
 "to",
 " ",
 "them.",
 " ",
 "(Another",
 " ",
 "article",
 " ",
 "is",
 " ",
 "going",
 " ",
 "to",
 " ",
 "discuss",
 " ",
 "the",
 " ",
 "staging",
 " ",
 "and",
 " ",
 "evaluating",
 " ",
 "of",
 " ",
 "those",
 " ",
 "LLM",
 " ",
 "answers.)"
}], "Text",ExpressionUUID->"972dd3d5-4483-4a31-bf91-b85e86a49913"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Packages and LLM access", "Subsection",ExpressionUUID->"0b96acf0-b0a3-488c-8ffd-a1d9f8a629a1"],

Cell["The following Python packages used below:", "Text",ExpressionUUID->"a3f87f65-3b33-45fc-8305-6a5f774f566c"],

Cell["\<\
from LLMFunctionObjects import *
from DataTypeSystem import *
import json
import pandas
import re
import os\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905287715251889*^9, 3.905287717962661*^9}, {
  3.9052885015505037`*^9, 3.905288507985105*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"f07165bb-6a66-4209-bd0b-4d728e24da12"],

Cell[TextData[{
 "\"Out",
 " ",
 "of",
 " ",
 "the",
 " ",
 "box\"",
 " ",
 ButtonBox["\"LLMFunctions\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/LLMFunctions"], None}],
 " ",
 "uses",
 " ",
 ButtonBox["\"openai\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/openai/"], None}],
 " ",
 ",",
 " ",
 "[OAIp1],",
 " ",
 "and",
 " ",
 ButtonBox["\"google-generativeai\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/google-generativeai/"], None}],
 " ",
 ",",
 " ",
 "[GAIp1].",
 " ",
 "Other",
 " ",
 "LLM",
 " ",
 "access",
 " ",
 "packages",
 " ",
 "can",
 " ",
 "be",
 " ",
 "utilized",
 " ",
 "via",
 " ",
 "appropriate",
 " ",
 "LLM",
 " ",
 "configurations."
}], "Text",ExpressionUUID->"79ece691-ba6e-42c5-a7d6-87ef1428311d"],

Cell["\<\
The LLM functions below use the LLM authorization tokens that are kept in the \
OS environment. See [OAIp1] and [GAOp1] for details how to setup LLM access.\
\>", "Text",ExpressionUUID->"c9162750-0d36-4a65-82e8-f396dc6c7acb"],

Cell["Here we get the API keys from a shell customization file.", "Text",
 CellChangeTimes->{{3.9052885723584547`*^9, 
  3.905288598964573*^9}},ExpressionUUID->"8867ac40-01a8-454a-8b34-\
0e78982d5933"],

Cell[CellGroupData[{

Cell["\<\
samples=[]
home = os.path.expanduser(\"~\")
with open(home + '/.zshrc') as myfile:
\tfor line in myfile.readlines():
\t\tmatch = re.search(r'^export OPENAI_API_KEY=(:?.*)', line)\t\t
\t\tif match:
\t\t\topenai_api_key = match.group(1)
\t\tmatch = re.search(r'^export PALM_API_KEY=(:?.*)', line)
\t\tif match:
\t\t\tpalm_api_key = match.group(1)
\t\t\t
[len(openai_api_key), len(palm_api_key)]\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905287708295433*^9, 3.905287792880707*^9}, {
  3.905287833402204*^9, 3.9052878913868237`*^9}, {3.905287979936594*^9, 
  3.905288042656364*^9}, {3.90528807575222*^9, 3.905288094293108*^9}, {
  3.9052881914767523`*^9, 3.9052884475934353`*^9}, {3.9052884924825077`*^9, 
  3.9052885231391573`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"a8f1c435-fb95-4cc7-8a53-036675455007"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"51", ",", "39"}], "}"}]], "Output",
 CellChangeTimes->{{3.9052884391397457`*^9, 3.905288448107319*^9}, 
   3.905288523597292*^9, 3.905290356507043*^9, 3.9052907486788063`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"7385a963-51c4-4fc0-82a9-ca4990545bad"]
}, Open  ]],

Cell["Make configurations with those API keys:", "Text",
 CellChangeTimes->{{3.9052885607584467`*^9, 3.9052885612667503`*^9}, {
  3.905288602246722*^9, 
  3.9052886189112186`*^9}},ExpressionUUID->"f487c0f0-e46f-4129-a4b5-\
750376a98a28"],

Cell["\<\
confOpenAI=llm_configuration(\"openai\", api_key=openai_api_key)
confPaLM=llm_configuration(\"palm\", api_key=palm_api_key)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905288620939413*^9, 3.905288692036799*^9}, {
  3.905289566854293*^9, 3.905289573982181*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"0464bf60-3a52-46ad-b842-056764589b72"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plotting with matplotlib in Mathematica", "Subsection",
 CellChangeTimes->{{3.905289056060498*^9, 3.905289066408832*^9}, {
  3.9052900982967033`*^9, 
  3.905290100837468*^9}},ExpressionUUID->"57b81f5c-66a9-476f-9408-\
b7ef772cb877"],

Cell[TextData[{
 "In order to make Python plots in the notebook we ",
 ButtonBox["define the following function",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematica.stackexchange.com/a/211254/34008"], None},
  ButtonNote->"https://mathematica.stackexchange.com/a/211254/34008"],
 ":"
}], "Text",
 CellChangeTimes->{{3.905289046794029*^9, 3.90528909066506*^9}, {
  3.905289123163167*^9, 
  3.905289123163507*^9}},ExpressionUUID->"0053a1dc-c2fa-47ee-996d-\
821393b44c62"],

Cell[CellGroupData[{

Cell["\<\
import io
from PIL import Image
import matplotlib.pyplot as plt

def show_plt(plot):
    buf = io.BytesIO()
    plot.savefig(buf, transparent=True, format='png')
    buf.seek(0)
    im = Image.open(buf).convert(\"RGBA\")
    buf.close()
    return im\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289092091455*^9, 3.905289092486709*^9}, {
  3.905289176852981*^9, 3.905289177696871*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"ed809b5d-7e4e-45a0-8e01-ccc2ffc1517c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"plot\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   StyleBox[
                   "\"show_plt\"", "Program", LineBreakWithin -> False], 
                   ImageSize -> {{1, 500}, Medium}], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"plot\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  FrameBox[
                   PaneBox[
                    StyleBox[
                    "\"show_plt\"", "Program", LineBreakWithin -> False], 
                    ImageSize -> {{1, 500}, Large}, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True, BaselinePosition -> 
                    Baseline], Background -> RGBColor[0.94, 0.94, 0.94], 
                   FrameStyle -> None, BaselinePosition -> Baseline], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PythonFunction\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Session: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["ExternalSessionObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Active: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["Active"], False],
                     StandardForm], TrackedSymbols :> {
                    ExternalEvaluate`Private`$Links}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"5348976b-c8fd-4ee3-bb87-b38ac3897237\"", 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Epilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Process: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["ProcessObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Parent PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3699", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"antonov\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Path: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Memory:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"117.5552`", "\"MB\"", "megabytes", 
                    "\"Megabytes\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Threads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Start Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\"Mon 2 Oct 2023 22:59:07\"", 
                    StyleBox[
                    RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}], 
                    RowBox[{"DateObject", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"2023", ",", "10", ",", "2", ",", "22", ",", "59",
                     ",", "7"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]}, "DateObject", Editable -> 
                    False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"System Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.044518000000000002`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0191459999999999998`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Real Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"5.`5.", "\"s\"", "seconds", "\"Seconds\""}, 
                    "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    
                    ProcessObject[<|"ManagedProcess" -> True, "UID" -> 0, 
                    "PID" -> 3704, "PPID" -> 3699, "Program" -> "python3.10", 
                    "Path" -> 
                    "/Users/antonov/miniforge3/envs/SciPyCentric/bin/python3.\
10", "User" -> "antonov", "StartTime" -> DateObject[{2023, 10, 2, 22, 59, 7}, 
                    "Instant", "Gregorian", -4.]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Prolog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ReturnType: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionEpilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionProlog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Socket: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["SocketObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}, {
                    
                    RowBox[{
                    TagBox["\"Endpoint: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"tcp://127.0.0.1:51312\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    SocketObject["20a27eb5-9aeb-426d-94d3-00c7533af95c"], 
                    Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"StandardErrorFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"Print", "[", 
                    StyleBox[
                    "#1", "Message", FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], "]"}], "&"}], "SummaryItem"]}]}, {
                    
                    RowBox[{
                    TagBox[
                    "\"StandardOutputFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Print", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"EvaluationCount: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"][
                    "EvaluationCount"], None], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessMemory: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessMemory"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessThreads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessThreads"],
                     UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionTime: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["SessionTime"], 
                    UpdateInterval -> 1], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   ExternalSessionObject[
                   "5348976b-c8fd-4ee3-bb87-b38ac3897237"], Selectable -> 
                   False, Editable -> False, SelectWithContents -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalFunction[<|
   "System" -> "Python", "Type" -> "PythonFunction", "Arguments" -> {"plot"}, 
    "Command" -> "show_plt", "IsModule" -> False, "IsClass" -> False, 
    "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> True, 
    "Session" -> 
    ExternalSessionObject["5348976b-c8fd-4ee3-bb87-b38ac3897237"]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9052890937358503`*^9, 3.9052891785917873`*^9, 
  3.905290360017535*^9, 3.905290752506794*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"ab90dfcb-1819-4a48-b86e-50b17ebaf0a2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other versions", "Subsection",ExpressionUUID->"1f3e8173-eddc-435c-90cc-405f1306104f"],

Cell["\<\
The content of the article was previously developed for Raku and Wolfram \
Language (WL). See the notebooks:\
\>", "Text",ExpressionUUID->"4ee14601-a65a-4126-8f74-c6afc032b5df"],

Cell[TextData[ButtonBox["\"Workflows with LLM functions (in Raku)\"",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://community.wolfram.com/groups/-/m/t/2982320"], None}]], "Item",\
ExpressionUUID->"ca6771c0-9be1-4e07-b261-0a27a65de81a"],

Cell[TextData[ButtonBox["\"Workflows with LLM functions (in WL)\"",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://community.wolfram.com/groups/-/m/t/2983602"], None}]], "Item",\
ExpressionUUID->"64443e14-2992-42f4-ae3d-0401d75f086f"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"3a494bd8-7b52-4679-9e9a-1fd55244013f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["General structure of LLM-based workflows", "Section",ExpressionUUID->"bd135be9-36b4-40bc-b060-b2dc0773d6cb"],

Cell["\<\
All systematic approaches of unfolding and refining workflows based on LLM \
functions, will include several decision points and iterations to ensure \
satisfactory results.\
\>", "Text",ExpressionUUID->"b64ee95f-6fd3-4dc0-bd37-fb51459a0406"],

Cell["This flowchart outlines such a systematic approach:", "Text",ExpressionUUID->"b4ffe539-4f54-44d9-839d-7face8042629"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
553lXXff/WRt/7XtcyfvAgAAAAAA+rNG8q5jjjmxlqPEWHltz7v00utr5112
2Z9qp48+emwtG2t9mTvvfKx2meuv/2ttDMNYb1177nlAu3lX68vG7dYznSWX
XDK7+eb7a33NYmzFyNza9jGL6+6004hsyJClannc1lvvUGvHrO7n+edfVRuv
cYkllsiWXXa5bMSIvbNx4/7R4eVPPPHsWtueeOLFGdtuu+2h7LDDjpnpcvvv
f3it31X99EUXXZutvfZ6tb8T20eNOj17+eVPaueNH/9a7TZPPvl32ciR+9TG
JYzxCdvLu/bYY//sJz9ZOnvooUnZCSecNtM+XW655WeZdz311NTa/YvbjL8R
++e++1rm6H7JuwAAAAAAgCI0kncNHbpVtuKKK7V73lNPvVzLRuo5TGd51/PP
fzAjI4uM5tZbH6zlNe3lXdFn7Oqrb6nlQq3zrrjMCiusmP3+93/M7rjjkVpW
E5lNZEX1LCfGWtx88y2z8867spZjDR26dS0bu//+cR3ez333PbSWMcXYjb/9
7ejabW633bAOLx/93qItZ5558Yxt++xzcC1rivsZpyPHin1X3z8XXnhN7Trx
d6688ubsiCOOr52OzKt13hU51FFHjandvzvvfPxTedc551xWu1zsnzj94IMT
s+OPP7W2LfKqGM+wo7wr9mvkbbEP43Yuvvi6bL31NqjlghMnvjlb90veBQAA
AAAAFKWRvGvNNdfJNtxw43bPi9wjspHoa9RI3jU9m+naeIZxe23zrsi66uff
ddcTtW2RH8XpAw44Ittgg42yF1/8aMZlYj36IsW8Yx3dz9ZjNUbFnGGLLbZY
NmXK+x1eZ8MNN8m22mr72vpzz72bLbXUT2ptiUwvtt18832105Fbxe2vvPKq
M/prtc6S4nrPPvvOjLxrm212/NTfquddcX8ju6vvk3r96U931677l788PNP2
tnlXPSu76aZ7Z2x77LHna3OqRWbW1fsl7wIAAAAAAIrUSN4VfYEiM2nvvMho
IvfYa68D52rede21t884P+YRi21nnHFR7fRPf/qzWk4V12tdcZmYg6yj+xl9
l0466Zzs5z/fsJYtRR+xuM7jj7/Q4XXGjj2r1v9s0qS3sgsuuLqWC0XfrehP
Vs/e6mP+RR+suL3oP9be/Y4cq/V4hu3lXZGN/exna9bWX3jhw9nKu+rjGLa9
/XXW+Xm2/fbDu3y/5F0AAAAAAECRGsm7fv3rbWvzRLXt/xT1wAMTZppfq4i8
q5651XOk6Pu044671m6nbcVYh+3dx7hvW265XS0HituJfku/+c0JtduNucA6
2jcPP/xc7TKXXHJ9rd9W5EAxz1n9frQe8++vf310pj5S9brxxnvy+3TbjLzr
7LMvbTfvihwv8qtYnn76hbOVd2233c7Zmmuu/anbj/bH/GVdvV/yLgAAAAAA
oEiN5F3HHXdyLeeIPKXteaNHn1E777rr/lI7fcwxJxaed0W/rM0226LTLKZ1
3Xzz/Z/KomJeq87yrqjIiDbaaNPaZe+99+natk02+VX2y19uPtOYf5G1xem2
OVV9PrOYy6yzvGuNNdbKxo37R3bQQUfWTsd6V/OumKds2WWX+9TtRwYW2WZX
75e8CwAAAAAAKFIjedcjj0yujW0X/Xxaj6EX4/xFP58Y164+V1ZkOZGFxBiD
bXOset4V14vTp512wUx/J/o3xfbbbntojvKu3Xffr3b6zjsfn+l2Yh6qju7j
FVfc9KmsLW4vtkVfp1ntnxj7Ly636aZDZ2y78MJratvajvkXYy22nZtrp51G
ZEOGDKm1r7O8q96n6pln3siWW275bN99D+k074rcqj4XV1SMT9g2r4o8K7ZF
tjk790veBQAAAAAAFKWRvCsq5rWKnGO99TbIjjpqTLb//odnyyyzbC2Luvnm
+2ZcLsY3XHTRRbPddtu3ljdFPhKZWOu8K8YOjDmoVl31p9m5516RnXji2dmU
Ke/X+lHFOH0xf1br2+xq3hX5VPRfior+Z/E3hg3brTbGYUf378knX6qNgxjZ
0x/+cEct64kxHON2r776llnum/rYf9EfrL4t7k/8/bZj/tXzopiHK3LA/fY7
LM+ZTqmd32jeVcuS0mViX0f/uVnlXfG3Yvthhx1Tyysjm1xzzXVq+/93v7s8
O++8K2s53AorrJi1tLw6W/dL3gUAAAAAABSl0bwrKnKPDTbYqJY/Reaxww67
ZHfd9cSnLnfRRdfWxt1bcskls6233mFGxlPPu6JiLqsYZy/6Na299nrZY489
P+O6Ma5e6zylq3lXVPTT2n77YbXbHzJkqWzzzbf81PiJbeuqq/5c67cU7Y5x
/eK+xW1sscU2ne6bmPvr+ec/mGlb3If2xvyLnCruY/SZi5wp8r763Ghdybte
fvmT2uMR4wvG9TvKuyLD2nnnkbXrT5r0Vm1b7O/YttRSP6nto+hz1nYcya7e
L3kXAAAAAABQhK7kXUp1teRdAAAAAABAT5N3qZ4seRcAAAAAANDT5F2qJ0ve
BQAAAAAA9DR5l+rJkncBAAAAAAA9Td6lerLkXQAAAAAAQE+Td6meLHkXAAAA
AAAwO8rl8kHVanW5tPqZzi4r71I9WfIuAAAAAACgq6rValapVD5MNS2tv1gu
l09L60NTNc3XTv4l71I9WfIuAAAAAACgqyLvyjOvek1L9UG+/ZVSqXRouVxe
cdCgQV+Jy8u7VE+WvAsAAAAAAJgd9cyrg/q4Uqm8GzlYuVyeuuka+02Wd6me
KnkXAAAAAAAwO6Jf16wyr1Z9v7KNVt89u+aMF94tOhdR/bPkXQAAAAAAQFeV
y+UfVyqVjzrp41XPuz7eYp0j7j3nsEkf3nzpK5/0zZo6bXoV3Y7+UTddMjXr
as3q9k7da/x78i4AAAAAAKA91Wr185VKpVoul7dN66en9YfS8qN6ltVJzvVB
ut6r6fQSo3ZqKY8a9vS+fa0O3urPY7de79jnhq59aPbrdX/zdtHt6S81dO3D
psU+bbwOm9bZbR43fOL3in6+AAAAAAAAxWtubi5Xq9UtK5XKyanunUXfrXGd
ZF0flcvle5qamr5b9H2aHaVS6evpPoxN9Ul+vx5M96e56Hb1F2m/rpH2aW1+
t0b6CBbdXgAAAAAAoHdqbm7+n2q1unGlUjkuLe9I9U4HecPEVL9P63uWy+UV
Bw4c+C/122jbxyvPuqaly41OZ3+uwLs3uz6T2v7rdF+m5vcp9smItP2zRTes
v0n7+T/zY+uDBvoKLp+uMn/RbQYAAAAAAIpTrVb/o1KprJOWv0nLG9PyzQ6y
hZdTXZ3W90/LVRdeeOFvzup26zlFnkl8Ev26Uv1ybt2v7lQqlX6Y2n5nq/3x
x8hkim5Xf5b28bfTPp+SHzcdZV319dfS8uz0OK1VdLsBAAAAAICeNWDAgC+W
SqVly+XyHtVq9YpUL3SQbf0jLf+Uloel5drNzc3/1tW/1apvzodp+UL6u6We
uE89bP7U/v3ivuT7Zmpfzez6ojju0v5uaa+fV553bZ1nsO+02v5WqotTbdDU
1PTlou8DAAAAAAAwRz5TqVT+N9XQVKekeqharX7cTrb1dqrbUx1bLpc3SsuB
3fHH021Hv5zIum7rrC9YbxRzcqX78HCr/XRh9Dkqul3zmkGDBn0l7fu/pHq/
debVeu6ugQMH/nP07Urbfpf39apf7r10+qr0WG6W1r9W5P0AAAAAAAA6F9/n
l0qln6blwdE3K9Xr7WRb01I9lurM6BsTmc585p+aSWQnad8c2SobfD7t15WK
btc8bv70mPwhz0/rx/IHHVz2c+m8VVKdGmNwtjr+P4xxKOO4b2pq+u5cbT0A
AAAAANCu5ubm/ymXy1tUKpUzqtXqk7OYc+uadLl9I7OJvjJFt7s3S/tsiVTj
69lgWp624IILfrXodlF7bL6U90N8t3Xfrk58Nh37y6TrjkrXmdzqefFJPlfd
rzwnAAAAAABg7qhWq5+vVCo/SsuRMe9Wm34rM/q7pOU98d1+qo1T/aDodvcV
Mc9T2n9j84wr9uXEtFyq6HbxaaVS6dx4nGbnuvEcSvXbeqZZH/Mw1SXlcnnN
eJ51d3sBAAAAAGBeVR+bsFwuHx7zX6XT77aTb/0jLa9NtWda/0mMw1d0u/ui
tP/S7qs806rfz7EDBgz4YtHtomel59ai6bE+Pj3uL7Z6Xr2atp0cz6d0kc8U
3UYAAAAAAOhLyuXyd6rV6vqVSmV0qr/X+xm1ybeeSRV9W7ZpampaZD7fx8+p
z6Z9uXfatx/l+/fxVNWiG8VcN38+31c8t95u9ZyblOqItO1/i24gAAAAAAD0
Rk1NTd8tl8ubxvxQqZ5qb+6tVA/k8w5tMGjQoH8tus39SezPtG//0mpfn2As
O6JfX3pebpSOhevqOWiehUYGvVs67/tFtxEAAAAAAIoS80NVq9XV8/HTHm2n
71b053o4LY9LtcaCCy741aLb3F/FOJH5WJCx76em0ysV3SZ6n3RsfDsdJzum
5d2tnqefxBii5XJ5tfn0rwQAAAAAYB4Q8wNVq9X92vQjap1xtaQ6JdWGCy20
0LeKbm9/F/ObpX09ttVj8OfoZ1d0u+j90nHyX+nYOSDV062OnwnR52vhhRf+
ZtHtAwAAAACA7lKtVr8WYw+m5dmpXmwn33o7HydtmDmB5q5yuTyoVb+6GKdu
r/n0z2E2pGNpmfT8/X2r8Q7fi+d8qVRarOi2AQAAAADA7KhUKtVUe8+iD9f9
5XL58LRcvui2zqtiHMk8k4jH45m0rBTdJvq+mMsrHUuHpGPqpdbP91RDF1hg
gS8U3T4AAAAAAOhIjH9XqVQ2r1arF6Tly+1kXNGHaFSqtUul0teLbu+8Lj0O
I/I5lyKLuNW8aHS3QYMG/VM6vjZOx9ddrV4HXkmnDxw8ePA3im4fAAAAAACE
Uqn0w2q1enCqh9vpv/VajGVWLpd/YS6oXuWz6bE5tdXjdGZsK7pR9G/ptaIU
x1q9P2Gqd9Lp0em1YUDRbQMAAAAAYN5TKpUWqFQq+7SXcaV6PtWJ6TIrpYvO
X3RbmVlTU9OX0+Pz5/yx+rhcLu9UdJuYt6Rj7jvp9eOofM6+2nEYfUJjHrmi
2wYAAAAAQP8WGVe5XN6jUqnc104/rmdS/TZdZsmi20nHFllkkX9Pj9Nj+eP2
Rno8ly66Tcy7Fl544W+m4/HI6OfV6rXk92n5g6LbBgAAAABA/xFjFeb9uB5s
k2/FnE9/ScvdmpqaFiy6nXQuxozL+97V8kmZAr1FzOWXjslDI4Nt9RpzSvQD
K7ptAAAAAAD0XdVq9Vep7m6nH9e95XJ52+iXUXQbaVx67L6dakL+GLbE6aLb
BG0NHjz4G+n4HJuOz4/y15w3I28fMGDAF4tuGwAAAAAAfUM+1t1hqV5uk3G9
nOpYc+v0TQMHDvyX9Pg9Xs+60uP8/4puE8xKc3Pz/6Rj9ZpWr0FT0uvPFums
zxbdNgAAAAAAeqdyubxatVq9sp2+XFenWrfo9jH7ol9Megzvr49hKOuiLymV
SkPSsftIq9ekuyKXL7pdAAAAAAD0DtVq9WvlcnmPtBzfJuf6W6VS2cW8Of1D
vY9MWk6UE9BHfSbGV03H8OT8Ner1tL5B0Y0CAAAAAKA4gwYN+qdqtToi1aut
+ky8n5bnlJKi20f3SY/rL+tzIDU1Nf1X0e2BOZFeu76SjunftXrdOjMtv1R0
uwAAAAAAmLuij0SqZ1v15Xou1V6pvl102+he0T8vPa5vxOOc1jctuj3QXaJv
V6q38tewcen4bi66TQAAAAAA9LxKpdJUrVbvadUvoiUtt0xnfa7ottEz0mP8
h/yxvrnotkB3K5VKC7Saly76p65edJsAAAAAAOgZpVLp65VKZWzr/lzp9CZF
t4uelR7njfPHO/p3fa/o9kBPScf3Ca1y/HWLbg8AAAAAAN3qM+Vy+dfVanVq
vf9DqkMXWGCBLxTdMHrcZ+pjVqZjYIuiGwM9Lb227ZNnXh+nY36zotsDAAAA
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
9+CWotvSkxrNuyLHif1x+OHHzrR9yy23q22/556nGs5IenPeNWLEXrW2XXvt
bTO2vfDCh9mQIUtlSy+9TKdtiFxs6613mCv5Vts6++xL2827erKuvvqWbJll
lm0473z88Rdqj8GDDz7T6WXlXf1bpVLZIc+7xhbdFgAAAACA/qpSqfwkz7v+
VHRbelKjeVdkRbE/fvazNWdsi7xqiSWWqG0///yrZmyPPmCR+UQ/qaihQ7fO
7rzz8Q7zrvvua6ld7oADjphxmUcfnZLttNOIWs60/PIr1G7vzjsf6/G8a911
16+1be+9D5qx7Y9/vCvLj4XskUcmd3jduO365aLOOOOi2vYY3zD6wLW+bNyX
uMz11/91Rk72m9+cULvsCiusWMvWRo7c51P9w84778ps/fV/Ubu9FVdcKdt3
30OylpZXZ/Ttal2xLfZj/XTcdv12nnpqajZixN61vxP7PvZvPA6tH6NNNvlV
dtllf8rWWGOt2mWiH1fbnGr77Yd9avzHsWPPylZZZbXadTbbbIvsxhvv+dQ+
PvLIUfKueVx6jd06z7tOLbotAAAAAAD9ValUWinPCa4rui09qdG8K7KOmAMq
9sm99z49o29PnI485KCDjpxx2Ysvvi7bfPMta7nHSSedk/30pz+rZTiTJ7/3
qbzr2WffztZaa91athL9qOpZTMx/FbcR+U5kaZGZ/fjHP87uv39cj+Vd8fdj
LMK4n5GxxTiAsf2QQ47KVl99jdp1r7jipg6vf801t2Zrr71etuGGG9f2TT0b
azTvituPjOuvf300u/DCa2pZ4hFHHD/jOscdd3LtOrvsskft/Ni3v/71ttnE
iW/WMq+YnyvOj3EUI3OMbbHPoy1xW/W8K7ZFO+MxiXnJ4vFab70Navc5bqv1
Y7TRRptmN998Xy3zi8cxxkWstyeyuLhfxx13yoxtkW3F9eJ+xO3GMv5+6/se
7Y9jRt41byuXy1vkedeZRbcFAAAAAKC/qlQqa+R51xVFt6UnNZp3RT+gyFsi
pzj++FNr26JvUeRU++9/eK0fT/2yMadT6+tGXhL7MjKTtnlXZB+Ruzz55Esz
Lh/9vDbYYKOZxsiL9dVWW72WPfVU3nX33U/W2nXRRdfWln/+899q2yP/+u1v
R9cyotZ9pNqr2A9txzNsNO+K22+973bYYZfs5z/fsLYe+yeyuN1336/Dvz2r
8Qzj79fbHhlXXO6mm+6dcf5jjz2fLbroojMe2/pj9PTTr8y4TMxJFtsmTHi9
drre7y2yt/plzj33itq2mO+to3bGvozLxNiG8q55V7lc3jTPu84tui0AAAAA
AP1VtVpdP8+7Lim6LT2pkbwrconYF5dffmMtq4gsKravvPKqtT5GZ555cW3c
wZdf/mTGda666s+17GfZZZer5VT1HKl1ljJ69Bm15Yknnj3T34t+RJFLRUbT
uuKyO+88ssfyrnrOFXlR5HiHHnp09ve/P1vbFn2uYty+bbfdqcfyrg033GSm
yxx88G+z5ZZbvrZeH69wVjlSo3lXfRzDtpdZZ52fZ9tvP3ymx6j1HGtXXnlz
bVt93MN6thWPdf0y0TcvHvMY9zL6mbXXzlGjTq9d77bbHpJ3zcPK5fIv8rzr
wqLbAgAAAADQX1UqlQ3kXdMrcovYFzF30113PVFbr49l+PDDz9X6QdXPj8uf
cMJptdORF8W4epGT1eeTap2lxBh70X8p5nqqj3UYFeMWRv4Tt9e2Ik/pqbwr
xgOMObFi/eSTz63lbqeddkEtr4tt0fepfv7cyLuiPfVcKsaGjMs/8cSLc5x3
bbfdzrU+a20vE2NW/uIXm3SYd1177e21bdEPLk5HTlkfP7H17cTjFLlgnBf7
o3Xfvfq+jfOuvfY2edc8rFwu/zzPu35fdFsAAAAAAPoredf/1ZgxZ9bykvr4
gtF3JzKg9df/Re30M8+8UcsvLrnk+mzKlPezJZdcsjbWYf36kdG0l3fF+HjR
d2zIkCEzjRMYc3e1Hh+x0ZrTvCtyqi222Ka2Xu/T1noMxejHFNtmlbm1l3cd
c8yJc5x3nXPO72uXj+t1lneNG/ePWeZd++57aK0PVtvLRAYW84E1mnfV+3dF
v6/22hPjJf7kJ0tnW2653Uzb63loZKHyrnmXvAsAAAAAoOfJu/6vYvy7+jxS
UUceOaqWV0RuUd8WYxtGPhN9i+K8yGfq59XnxTrvvCvbzVKi31TkMdFXLE7H
HFXTs53HZ2rHc8+926N5V+RsrecHizENox233PJA7XR9bMOOxunrKO86/fQL
Z5r3qpbl5H3eGs27HnxwYu3y++132EyXaT3HWX08xnvueWqWeVd9bMQ77nhk
xvn33vt0bVvM0dZo3hX9s+L0xRdfN9Pfev75D2asjxy5z6eytaOOGlO7XuxP
ede8S94FAAAAANDz5F3/V+uuu34tt6ifjhwq9s3994+bsW2bbXac0TcqsrGY
CyrGPLzwwmuy1Vdfo5YzxfiG7WUp0Scsxg7cYYddaqcj94qMJCrm+Ip+RMOG
7VbLhDrLuxZddNFaDte2Ioeb1fn1POl3v7t8xu3FuHsxfmF9XrJYRl+01jlf
I3nXAw9MqP3d3Xbbt7bvYp/E7XYl74qKfllxnZhHLPZJjHEY++3RR6fM2G+L
L754NnToVrW/0TpzbJ13RUa25prrZKuu+tPa/Y0cMm5nhRVWzFpaXm0473rq
qZc/Nf9azHMWfeJiXrfobxaPYdv9seeeB9S2t57vTd4175F3AQAAAAD0vP6W
dy200ELfSvflB+l+Vcvl8or5d81bbrjarqPOPuSZNzrKHKZOnVabZyvGNGy9
PfKt1qePOOL4bJlllq2t/+1v47ONNtq0lrGst94GtXEAo99QZDcvvPBhu1nK
FVfcNFP+E3NAbb/9sFq+NGTIUtnmm29Z6xPVWd6VP2afqri9WZ0f+VAsb7/9
7zNu77HHnv9Uf6q4XzvtNKJLeVe979Uaa6xVG+sxzq//va7kXZEPxeMQ2VQ8
JpEjRvtaz491/vlXZSuttHLtevX8sW3eVb9vO+88MltqqZ/U9nE8nvX51xrN
u+rZZuuxK6OfWNxWHAvRhrhfbecci30UfQZn9Vh2Je9KbfpSOq63SXXt3Hgu
0T3kXQAAAAAAPa+35V0LLrjgVxdZZJF/T+0ZXC6Xl061ZqrN0umdU1sPSHVc
qrPS6SvT8tZUD6X1SaneSOvTOsp5Vl12w+zMg8e/3Vn2oFR7FX3g1lpr3YYv
P3nye7XM74Yb7uz0sp3kXZ9Nx/UqqY5Kx/GbqT5O69lcfVIyR+RdAAAAAAA9
ryfyrnRb30u3+7/lcvnHpVLpp+n0xqm2T9v2zr+3Py2++011U6r70+nxqV7t
KKvqYr2ebnNinoPdkuqKyMfWWWnbC846ZMKbRecmqm9WzNUV4xe2N2dYe3Xp
pTfM1O9sVtVe3pWeNwuk589O6didkuqTVB/Uj3F5V98i7wIAAAAA6Hnt5F3z
L7zwwt9sNSbgCvUxAVONTNsOSzU2rZ+fln9IdWeqx9PpF1K91w151Tvp9ian
5aOp7kjr16Q6N9XodPrg1JZdU22RTq+TTi/X3Nxcjmwg1ddT2z/b0f1sZP4u
pWZVt976YDZixF4NXXbo0K1r84w1ctlWedfn0nG9SaqH83zk3Xq+1fo5Iu/q
W+RdAAAAAACzJ8YErFar/1GpVJrqYwKm079KNSwfE/D4tH52Pibg4/WcKR8v
bU7zqg/Tbb6clk+luifVH9Ppi1KdnNZ/k9qyRz4H0Ybp9MrNzc2Lp/qftP07
6fTne2qfyLtUd1SjGVajl4u67MQpb62/6vDX835ctfEK22ZcbfKuaT31PKH7
ybsAAAAAgHnVAgss8IVBgwb9a31MwFSrtTcmYKpLW40JOC7VKzG/T1fyqXb6
jsR37q+l9QmpHkj153T6slRnpPVjUlv2Tes7pvplOr16qVQa0tzcvHCqf0un
v1T0vuuIvEv11rrsxMlvr7fKjrPMuNo8Rz+KvDiee5Frp8N7/qKfX3RM3gUA
AAAA9FWDBg36SuQ/kQOVSqUlI69K9Yvo15T3bzqsWq2elJYXpro+rd+d6slU
L3ZD/6r6mIBT6mMCprq2gzEB103Lg/LrXJePCdgvybtUb63o3zV07UNjbNAP
I6/uLPdq7/x8nq+78nnxjovneIxVGnl5U1PTgKKff/MyeRcAAAAAUJRqtfq1
wYMH/3epVFos5q9Kp9evVCpbpeXIVIekGpVO/y7VVdH/KdWD0R8qnf5HN+VV
8d3oy6mebjUm4MX1MQFT7VkfEzC1caX6mIBNTU3f7ep9bWf+rn5J3qV6a9Xn
74rXnPx5/nF63ZnWUe6V98G8PNV9kZHH+IYNvKZ8lOrZdNm/xviiaf3o6vTx
TdeN14+0/r30NPlM0c/T/kjeBQAAAAB0h+jbEPNYVavV5eJ7x8iJ0vpe8X1v
Wj8r1dV5H6gn8nmnuiOvei/vq/Vknlf9KdWlqU6Pv9t6TMBUP0vblqqPCZja
++W5uX/kXUoVW/W8q36s5q9TMZ/eR+2MN1pbtj620+nPp9eN/4q5+tL6xnkf
0jF5Hv+3Lryuxdx7z6TlX1JdkNaPjNeptL52WlZnJ09H3gUAAAAATDdw4MB/
qVar/xGZVaqflMvlNVNtlrbtnGr/tO3YVGfm/R1uTvX3tP25VO/OQd+qt9Ny
UqoH8vmxLsv/xnGpDkw1PNXQ6BuR52iLpvWBafmdovdXV8m7lCq22uZdIb2W
/GeqyJw+bt1/K/Ku2X0OlEqlH6ZaNl4/0+3sk27vpOr0sU7/3sW+qdGX9dZU
50V/07TcIS1XT1Xpi6+BPU3eBQAAAAD9Q7Va/VK5XP5+PpfVkOjPFP2a0rad
op9TOv+YdPqMyJSq08cGfKDavWMDvpBu67FUt6f1K/I+VkdEH4i03DJtXyet
L9PU1LRIPqbXPEXepVSx1V7eVZeen2ukmpT3vZqjvKszCyywwBdiXNQYwzX9
nc3zfqinpPpD+vsPp+VrDb7mvhtjscbvD9L62akOSetbxzyG+evs13rqPvRG
8i4AAAAA6D0GDx78jXxumWp8F5qPt7VVqt3S+uHVavXEtH5hqutT3RXj+KXl
S92UV72TbmtKZFbV6eMORn+E8/Lxug6tTp9Ta8toU6oV8z4G/7ngggt+tej9
1hfIu5QqtmaVd+U+F31L03M05vX6ZK49adoxYMCAL6Y2DIrX2lS/zvu7xu8V
bkj1eKq3GuxD+1Zcvjp9bsK4/oFxe3G7af1/4+8UeT+7k7wLAAAAALrXQgst
9K0Yc69UKi1WrVZXTusblsvlbdP6Xmn9t2l5Wnwfl/8m/295H6tGf8/fWcVc
VjE/1l15X4EYp2ts5FWRmUV2lratn9q2UrQvxt0yLtbcMS/lXafuNf69my55
5WOlelOdedDE9zvJu/qU6L8V/bjSa8uq+Wv7wflciTel9aeqjY81+2re3/fK
VCek/xN2TbVe/B/Rl+YSk3cBAAAAwKfFXFbRd6m5ublcnT5vVK2fVT42X8yj
ckpaXpp/rxhzTz2Tlm90Q171RrqtiWn5YD5HVsxndUY6fUw+5tWOqTZJp1cv
lUpLxu//q/Pg2IB90bySdx03fOL3xgxv2UvNee244YkPbL7WwdnW6x09uei2
9JcatVPLoKKfI3NT/P4i/V9RivEa02vP9qmOyPvt3pb/1uKDBv5fei/Pz/4U
v9eI/4tibrIYnzbd9ALpz8xf9P0M8i4AAAAA+rNqtfrtmCelUqn8qFQq/TTm
s0rbdk7LA9JyVP693x9S3Zl/nzd1TjOrvK/WhOi7ledhkYudmurItL5nWm4T
2Uc+TtWi0RcsvpMsel/Rs+aVvItuM396ffhH/pryYVNT05eLbhD90mcWWWSR
/5f/X7RO/v/jUakuSvXXdPrZVB938n/eJ2n5XHX6OLgXVKfP27htzCMW80nO
rTET5V0AAAAA9AUxplK1Wl2oVCoNid+pp9o8xlzK55U6KS0vTnVjnjF1V1+r
ej2fbvPvkV3F3FmRk+W/b4/v89ZLtXTMg2JcQGZF3kVXxOtLOmY+yo+Zj9P6
3kW3iXlX9HdOx+FS0a8rHYv7pPXT4//cVE83+DuQf+R9oWMs36Oir1nkYfH/
+sCBA/+5m9oo7wIAAACgMHl/q2HlcvmgtD4m/234H9P6/XkfqW7JreK7tsjB
8twqxnG6Nv9bJ9X7XaU2/DrVmql+nM+/9fWi9w/9h7yLLpg/HScvpmOm/voV
9c7gwYO/UXTDoD2DBg3613SsLhGvc/lckWPy/2cfSfVmI78rif5h0ee6On0e
sqHp/+Bl0zH/3422Qd4FAAAAwJyqVqtfS/WD5ubmxWPMwPz337ukOizVyfnv
uW/Nv/d6IdWHs5FZxTiDT+XjDsZ3aOek9ePScr/Iy6K/V6p1Y4zA1IbFmpqa
Fkzbv5fqS0XvHwjyLhqVjpGNYwzDNpn9u5HLF902mB0LL7zwN2M+zOgTnY7j
kel4Hpvq+rT+ZFq+38nvVabledjd8fqZ6pj8//11YhzG6P8df0PeBQAAAEBd
zOERYwtF/6Z8rqtNUu0YmVJaHpvqrLR+ZfSPSvVY9D+Ygz5Xb+b9t86vTp9H
64D0d3eK73lTrRyZVWRo+ljRX8i7aEQ6Pj6fjpUp9b5dbb73f908XvRH6bge
kI7vn+S/lzkw/03LrakmdqEf9wv5cmLcRvQRS6eXi/cSRd8/AAAAALpuoYUW
+lapVPphPq7Qqnk/gR1jvqm8P9TZaXlVqtujv1VaTk7Ld+Ygt4qKMQcnpNu6
N9UfUp0bfyvm+MjnuPp5jEuULjM4+lwVvY+gCPIuGpGOjy2r0+fravtdfizf
i98fFN1GmNvyPOxHqTbMx0scnf/+5t60fKXVcyRrLyuuzjxm4kX5OMbbp+Uq
8Tufou8fAAAAQH9WLpe/39TUtEhaLl2tVtdOyy3yMYAOq06fc+ritPxTq3mu
Xp/DzKo2ZmDMPZ/qrlQ3pLowbTsxLQ9NyxHRhnz8oGVkV9A18i4a8Nn0+jqx
o+/r83m8IvP6dtENhd4mvWfaOX+exPuimAPsd3l/9Eb7iI3Lx1g8Ji13KJVK
K6VaoOj7BQAAANBbxBiB5XJ5ULVaXapUKq2Vj68TudWhMbdVWr80LW9O9VBa
f3ZO+1ql23ktLcen5X15HnZRe5lV9LdK681p238suOCCXy16P0F/J++iMzGW
Wzo+Puwk7/ogXs+Lbiv0Np3N3xXvd/IxEzeN/ufp9Gmp/pj/Zqiz91ePputc
nq57eFpunZYrDB48+L/n9n0EAAAA6A4xZ0p8V5LPt75Cql/E73/Ttv1TnZDq
/LxP1H35dydvzmFfqxfTbT0e4w6muro6fRzCY/NxCXdIy43StpVTexZPpwfG
XPBF7yOgY/IuOpNe1yfPYiy21mO1veF3CjCzzvKuWalOnzfvf+N3Sflvkk6N
+cOq08dAnNVz8qP8N0Y3xnXS+p7xWp/asqj3ZQAAAMDcEnNBlKZbKbKjVDvl
85uPjbECU92U6u/5/FbvzUFuNTXVk+l27kzLa6vT52A/Lv9tccwdsWH62yum
9UqMm+M7TOif5F10Jh0jHzWYd70X/18V3V7oTeYk75qVdJtfivdo8Tun/DdO
Z+e/RZrcwHvAGGv6b/n7ykOjj32MU93c3Pxv3dlGAAAAoP8YPHjwN5qamhas
VqtLxVh9MdZMqr3zXOncvN/V/TGHQ6q3Zze7StedEhlYWv9zdfo4hDEe4SFp
uUuMQ1UqlX6aTi8R/a2iTUXvF6D3kHfRmXy8woYqHUfvFN1e6E16Ku/qTPqb
C8X7v/R3d0zrx6S6MtXDDbzffDfVo3H5dNnfpvZvm5bLL7LIIv8+N9sPAAAA
9KwYAya+P4jfwObfX2wXv6mtVCqjYz6q6HsV3yWkemEO+l29kN9GZFeXpDox
1cGpds77e9X6XKX6jxjLsOh9AvRt8i66Kh0rw/Jj5oSi2wK9XVF516yk94/f
LZVKS8ZvolIdlNp3fqp7Ur3SyXvUd/IxBn6fzxk2NN3OkLi9ou8TAAAAMH2e
8JjPIP8N7NC0vkf8Djb6X1Wnzxf+YLXzeRI6qpgra3yqu2Ouq1RnpDosnR6Z
6lepVo9+V6l+kOprRe8LYN4j76Kr5F3QuN6Yd83KwIED/yW9J14sxkmMuVmr
08e7vistX+3kPe8bkZmly/4uLfdK112vubl54aLvDwAAAPRF6bP1t2PswPT5
+sfps/bPIk+K8fxiXoK0flI+R8GNeX41aTbHD4z8alyqO/JxYU7Lf98af+eX
0fcqfbYvxxxcRe8PgEbIu+gqeRc0rq/lXbMSv81K9+NH6T5tGmMPxNgGaflA
Wr7VyfvneO98XYyPmJZbRt8yv/MCAABgXjNgwIAv5n2florvC1LtFP2jUp2Z
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
Iu8CgiPvQqnZYostfu7W8e/H3RYAAABEK0jedd99T/jZTffuPWr15dp//wP9
y3SdMh9d9vzzq/w86KKLLvWuvPJGr3fvo/3rFyx4od68a9q0f/nXz5r1QM31
48df7mc9F1ww2bv55rv9+9L5U04Z0WTeNWLE2d78+c97t90218/a9HcvvLDa
v8099zzq9ex58AYZlDKuW26Z482b94w3btxEb6uttvLOPPO8wO2pL+9q6LGU
AU6adLWfw5177gT/7+6882H/+nXrvvHHjNxrr+7+81FOOHz4aP82119/W17y
Lvudupv9Zn1c9xnB2wsAgIIj70JY5F1AcORdKDX2fv2Be89+HndbAAAAEK0g
eZeyF+U0ylzUL0l9kBYvftPPYW688Q5/ee+9j9Xc/q23vq05vXLlp36/KfUF
q5t3PfroS35/KeVImetefnmd/1i33npfrTZMm/ZP/3Gyx1OsL+96/fVPai57
8cU1/n2NHXtRzWWah6xuBlV3bMXhw8f4f/fqq+8Hak9D4xnW91gjR46tOa/5
zzp16uzP86Xzytz0WHrM7PsZPPg07+9/79nsvMt+o/7K6nDb3n/N6gs7/S15
FwCgXJB3ISzyLiA48i6UmlatWn3PreO/jLstAAAAiFaQvGvYsDO9fffd31ux
4iOvffv2fl+sa6+9xc9vNO6fxi6cMuWamts/9thir1+/gf54fSplOLqP7Nzn
9NPP8vsx6fSaNV/WXJfJz/Q42aX70OVPPrkkcN6lUk6UnTkFybtuv/3+mgwv
SHvC5F11H0vtO+mkk/3Tp546qt7HUn8z5WJh8y67r872u/R2K+VbX9pSv1M9
93uVvAsAUBbIuxAWeRcQHHkXSo29Xzd179lv4m4LAAAAcmPbdJ9YXWy1q53d
uKnbB8m7NIfUoEGn+qePP36An8toXMPMeH6aJytzvcY+VBakrOff/37Ee+ih
Z72uXXfx/yY791GGowxNS417mLlu8uR/1GRNCxe+tkHVnVerqbxL4ylm940K
kkHNnfukf1/KvYK0J5e8q2fPQ7z+/Qf5p489tr+fD9b3OM89tzJo3rWx/SY9
yP7/z7pt/C+yc67sKvibEQCACJB3ISzyLiA48i6UoI34zQsAAFAedAyTbdd9
rT49Vm/Y6eM1fnVDt28q79KcUhrDcMKEK/zzM2bM9jp33sku61gz59bo0ed7
3bvv4/KlY/z5u7JzqW7d9t4g79JlS5e+68+TpfM6nR4n8F8bjI8YpBrKu/Q4
xx9/UqgM6qab7vTv65FHFgVqT77yrsGDh3lbb721t3r156Geeybv6nfA5Jft
f/6ey7e+qS/jyhT9uwAA5YK8C2GRdwHBkXehBJF3AQAAlAmXc3mZst8nn9vy
M9vWu81OH2g32ST79k3lXZoDK9PXSec1pqH6b2Xm8dJl1113q8uaPvb22+8A
f76pzN+/8cYX3s47d63pC1Y399H8V8rPhg8f7Z9/9tnXvS233NIfDzG7HZoH
LGzeNXfuf/zLJk68KnAGpbnH1F9txx07+Y8ZpD163nUfpzl5l+ZH0/1cfvn1
oZ57Ju86cp9zvIb6cjVQn1q9ZbdfbssXrB63ut/O32F1o52+UvuB7PTZVsPc
vqGj9D6y892sdqqqqtraaovq6uqWmidss802+6+Y3voAgIQi70JY5F1AcORd
KEHkXQAAAGUi03envv48Vl/Z6berq6vPsNpWt28q78qM7ffMMytqLuvb9yRv
wIBTas7Pn/+8f5sHHnjaO+uscV7Hjtv72Y36fx1xxFF+Ptaz58F+llRf7qN+
UcqU1J9K58eMucC/P42dqPu55JIr/TERH330pSbzriFDTvemT5/lXXjhFL8d
+jvlUY1lULvuurt32WXX+e1Q1qX7ufTSaTW3CdIe9SPTHFvqD9bcvEvzmB18
8OH+GI96HfU89Ni7775nTbbYWN7Vd/9LXnf/46+byrxCZGLNKrv/j63etNPL
rJ6z049azVHuanWDnZ5qdZGdHm11qp3ub9Xb7bPc035X72C1pZ3/q53/3RZb
bPHzuD9bAIDiRN6FsMi7gODIu1CCyLsAAADKSENZRla/r2/cZR9cOODxDxrL
u9R3q0OHDv64hpnLbrzxDu/mm+/O6t/0iX//V1wx3e//pSxM/b+UI2kcxDvu
eNDPhzS3V325j+77gAMO8g499Ag/E1Mpf9pjj738rEx5z6hR53hLlrzTZN41
cOBQb6eduvjjLWocQ8191VSfq0MO6eXP8dW+fXs/t7rssmtr/U2Q9ixY8IJ/
P4cd1rvZeZdKr9/IkWP956D2qL+c5hBraN6y7LxL83cpF1KW5P7fXzaWd7n3
yS/tN+zv1UdLfbXsfGf13VIfLqsj7fyJ6tvl+nhdrD5f6vtlNctqrusT9oKd
fk19xVyfsUJmaV+5MRtX2emXrZ620w9Z3a3f4Hb+GltOthpnNcrOD7bncZzV
YXZ+Xzu/S3V19XZW1Xa+lZ3/TatWrX7cIsBcdwCA4kTehbDIu4DgyLtQgsi7
AAAASs/Gbdq0+R/tt7ffILu7vjHKJSaG6IPjnXvCPK+xvKtUqqH5u5qq+jKo
UqxM3pV5c7i+Uf9241t+WzcDzZwv0Htzo4qKih9Z/a89xp/ssSrVn9Cqq53v
YecPsTrW2jjIzo+w0+dZTbL6h/ZV2vIuq3lW/7Hzi61W2ul3rb4ocJamcT/f
tlphj7XI6gk7/YDVbDs9w+oqO32J1Tl2+nSrAVZH2/M4yKq7VRc7376ysrKN
1R+sfm31wwK9xgAAh7wLYZF3AcGRd6EEkXcBAAAUETcXUgf1R7Hql0qP+aa5
lO5UfxarNU3lWAGu17h3ay8etHAteVd55V3Klez9c4XGE7TlN9nzuWXeG1rG
/DZvrk3s+f20qqrqt5WVlZvbc7Gn0m57q93cb/FeVsfb+VPs/Jl2+gKrS+38
dVa32Ol7bLnA6hmrJXb+DasPs/o8FmJsx28bGN/xvlQD4zta20/IHt/RnnOn
uuM7tmrV6ntx/zMAoBiQdyEs8i4gOPIulCDyLgAAgAKzba2fWLW26uz6gwyy
3wznW12v/d6uP8m7Ifelv5NKjyU3x+pa109mYGPjGabS481pTLgzrFmbNDV/
V6kUedc73tH7XqBx/j631+Fr9z+ulXFl3gMF7ttVslq2bPn9lBvf0aqiurp6
q1R6fMe9rHpmxne0Os3Oj3HjO15hNT1rfMfHrJ7X+I5W6+z0J4XK0Vzpf/2B
PdZqq1fs9EKrh13fvn9pvWDnp7h1zRlWJ9v5vvZcDrfaz87vauc7VlVV/c3q
L3bZ/2ld1YLxHQGUEPIuhEXeBQRH3oUSRN4FAADQPLXGFLTq48Y5m6jfA+pH
YttYr6bCzWmknGKV1ZNWd6jfh/qpaA4iu66H1Tbq31FRUfHdhhpVX85lf68+
Jl9on3xlZeVmmduWS96V9FLedeQ+5wTtb+Qv3bxVKDx/fEetK9q2bftHje+o
/ptWO6fWj+94jLJqOz/C6ly3DvmH9t1a3WmnH3TjO75k9bqy7kKP7+jWF8rg
V6bS40o+VU+Wdmkq3YfuLHs+Q+2y/tn90pQXal44zQ/n+q3+yi77gV6TuP8p
AMoHeRfCIu8CgiPvQgki7wIAAMiiccKyxhTcx7aTjk+tH1Nwttvv+4brWxF0
/7H6eSzV/mK3D1vzAKmfyBHqY6F94Jrvp0Ue9gPbfX1Z57GVt62x57R33duS
d5VHKe8adMi1D9l79nONzRdwTEvV225sPWUXI1zfwy0333zz/871fYhoaHxH
ZdjZ4zu6/N0f31Fjomp8R/XvsvMX2vKyrPEd760zvqPGSv2wkDlanfXSW/a4
y9utny/tfvWVs+UNqfQ4lOPseQzXfkkdT2DL/TV2peaDs9NttZ7W2I5x/w8A
xIu8C2GRdwHBkXehBJF3AQCARGjbtu3PNP+N1U7qU2HbP4M1zpfbt3q/1Ut2
/r2Q+2wzYwre5/Yh+2MKKjfQnDvaBx11Pxp7/E/cuHXK477WvEDaJ17fbcm7
yqMy83fZ//s39t5b4PrmNJZ3fWvLD5rIxNa5PorTlDloTD/lKeqrFOX7GfHQ
+I6tW7f+hf3Pf6f1pnJQqx2ys7RUeq60k61GKZuymmyXXWM1M5Web/AB11f1
RTu9QvlqKlx/17B90jSG5DKX381LpfvGzUilx5280GV+Wu8fbc/hQDu9Z7v0
/G8prauVG+p7Iu7XHkA45F0Ii7wLCI68CyWIvAsAAJSyTbSPX/vhq6ur99Ac
O27f/CQ35tYjqfSYgp+F2G+aPabgrOwxBdVHKhVgTME4WXu/0nOwWqz9uI3d
lryrPCqTd7l/68b2Xj3M/v+f1NPXL5MLfKUbqk+hvae3c/0Mz06l+x4utNMf
N5ErvGnL+Rpzz2qY9jVqDqhUeqw6oEnZYzyqr5Zbr3a26qH3r/ql2elTrc5K
pfvDXqN1ui3vtXpMfcJs+XozjlEIk5/VjOeo8STduJJ36XPi3vuT7PS5qXTf
yEFuXMpD3HPY2fURrtRz1HMlKwYKg7wLYZF3AcGRd6EEkXcBAICi1KZNm/+n
faDZYwra6au0v1HH79v5tSH3X2aPKTgztX5MQc03s6tty1e5MQUTg7yrPKpO
3uVzn5+FVp/W7esV5L1RVVX1W/XnUV8Y9d2xv7vV6oUAn7O1dvuHMlmYnd9f
efRmm232XwV5EwMt/H2XP3DzKf5Z7zf33u1mpw+25bG2HKLszE6PT6XHplVm
dbfeqy7jfSWVHqe20X6PeapPXGa8zOo5952kHO9W10/4Mjt9gfqjqf+cne7r
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
3tE8zBOtZml8DvdbpqnfPWvstgusrtVczho3X3291Bcm7ucGNIf2O7vPwpN1
3utfax4Gu/4E3SbudgIobxoP1fUPONzN9XV3Q/OCuf2YL9vyOh2borlg6AcG
oJQlPe8qgI10bIT99ttM/bU0d7K9xrva67u/1VF2fpB+y2ncxnbp+ZB17MU9
2blZPvue2f187PqzveiOK7vbjRV5mTu+MpOZaW7Mvay2t79r645F+0mLesZT
IO8CgiPvQgki7wIA+HQ8oG3LbKnfjJq72f2G0NgVi1ONzCOSVbrNYvcbZHIq
PYZ9dztdyViDKBf6nFgdr36LdX7Hf+ne+0frNnG3EwBSbl4wtx/wcjv/eKqB
uTDdGFk65v8I7SeMu+0AEBR5V9HaKNP3zOVPHa32tDrYvpuO0+9NN8b3ZI3v
4Y6j1Jxjz2TNdVZ3XPDmjs/4vi2Xu/t+0PU30/UL3ZxrAzWnmdU+dllnq3bq
J+f6mDH+OBKNvAsliLwLABJC48RrnAsd96Zj2mx5sZs76zkdgxfg98IH7rZ3
WE2y00N0nJ/6fDHeIMqZm2PhwFR6DJav6vTjuk9zF7jjRwGg2G1k2wKbu2Nb
tJ/xLh03X893/qduzpZJbh9gpf3tJnE3HgDqIu8qb/ad9UPNCZbpa2a1u5vb
8ti6mZm9B2an0uMmKs/SePof5KmfmeaZXqFxTVxedpsbE3K8nR5pdaLrY605
2LbXb271j1Pb4379gFyRd6EEkXcBQBlp3br1LzQ2kcZptxrutsPn2Xr+jQDb
8Z9YvaA8y5aXaKwKzZ+lMdTbtm37s7ifGxAxHZPayY3T8kH2MaIal1NjFWqM
z7gbCQD5oO95jVfljnOf4/btNdgPTPv1bNk67nYDAHkXmuD3M7NqWZ3Wyd4r
V7rvNPUnG6XcSr+b7bJbrR5Qvy/1MbN6181DlktWpjEg1qXS46DoOJK77PQN
7vjR0W58yN52uof6ZNuyLVkZigl5F0oQeRcAlBhlWrat0d7taxptp29y8wfV
u2+qzn6q19x+rCs01rlyMTu9Df2zgLSqqqq/6DjRVHpu7ezPzis6ftOu+33c
bQSACGysPl0ac0rzbtr6b2kD2xXv2fJetz3STdsocTccQLKQdyGsVLj5u7Tf
VOMD/z6Tl2ncQ9f3eaBdd5aOFXXzYuq40fnuGNLV7njSnLIyq7Vu7rIF7v6n
uX5lIzResS0PtuVuOubVlq3cGIwbF/o1RHKQd6EEkXcBQBHSfFcaJ9DlUSPd
mOaPZvczaaA+s9st0jiF7dJzCGsbeBe7rz/H/ZyAYtWqVavvac4azYFd5/Ok
eQOmaOyUuNsIAHGzdeGv3LycZ9u68f5GjrN51Wq6y8oq4243gPJG3oWwQuZd
OamoqPiuji1Vn2j9prDf5XvYe/ZQjRXhfucru7rG/X5/yE4/b8tVqQbm2wxS
bjyKd92xKo+7sYs13uME15+tv/YzuH7dW2qushRjs6MB5F0oQeRdABAjNxZ5
FzeX/EWu79XKpjIttx18i/qhaO4gjROu+4r7+QClRHPYuOMx38v6ffiFPltu
vupN424jABQz1wesjy0vt/pPA9stH9p1d+tYdKvOOqYn7nYDKB/kXQgryrwr
F8rKrI2/sd/5W9iyozvm5Ag3BuIYN2/ZjXbdPW68l2X6XZPDnGVf2d++6fqT
KXvT+I5XWJ1r509Wnza1obq6elv3O+qXLehLVvbIu1CCyLsAIAIaL1xz69o2
wikag8DqsaaO2bLbLtGYBcrB7HxfW+5ky9/F/VyAEqcx/PdOpcfmz/7MvWw1
ROP7x91AAChVrn+6xno63c1R8n492zefa84UzRVG/gUgV+RdCKtU8q5cKItS
JqU+ZfYZ2UtzIWj8ReVkGr/CzYmgY22ftlphpz9qbn+yVLq/9+vumFzlZHda
TdfjWJ1jdar2Z6hPmevf1t7O/6lVq1Y/jvt1QtPIu1CCyLsAII80FoDGz9bx
T7ZuvUbjB6QaH7dbmddjbrzv03W8lI7fivt5AOXGPmc/0LghypHr9OWaof2t
cbcPAMqVrWPbamxDt++roXnAHnL74HapqKj4UdxtBlA6yLsQVhLyruZSfzL3
vb2jcg77fB3rjmG5yB23e6cbA35p9hgZOZbGt3na7u/fbr+IHus0jWPj+rS1
136WuF+bpCLvQgki7wKAkGyd+RP14Xdz1I5xY20vaqKvlrYF57vxfgZoDEPG
HwQKr7KycjP7zJ1fZ8zCdbY8S3PRxN0+AEiatm3b/sz1eT/DjXP4Tp3tpq+t
ntJ+SKv9bT3+67jbDKB4kXchLPKu/NL3un1X/6Ha2Pf7Dsqo1J9MxxpaDddv
sVR6XMSbU+mxFzX+8YpU8+Yo+8T+/jWrBVazdL9uXtET7bEO1HGMaoctf8fx
M/lB3oUSRN4FAI1o06bN/7Pv9W7aN66xBW35RhPbX28r13LbXcq1drb6v7if
B5A0yrLsMzjJPotfZn0+n7c6qlWrVt+Lu30AgPVsnV2hPmDal9LA8eIaI+ls
jcsUd1sBFBfyLoRF3lU8lEkpK6uqqtpa4y66Y4o1B8QF6k+msZFdPtbUHOeN
HXv8pi1fchmZ5ou41upiZXH6bahjcGzZTn3b4n49ihF5F0oQeRcAOFtsscXP
dSySrRNHu7706xrZZlpkdYvr39Vb/b3U7yvu5wAkneaBsc/iyFR6HHl9Vr91
c8jsEnfbAADBuPlGRtm6++H6ji3SeEe27BF3OwHEj7wLYZF3lS7tc6mqqvqL
LTvatsJ+tuzrfvtpTrJ/aX5QO/1CgOOUG6s1qfS8ZpqH7Eod+5xKzz+mfmtb
Ji0XI+9CCSLvApBIFRUV39U40OqDZXWjrQdfbSDX+tj119KYOr0qKyvb2J9v
Enf7AWxImZZ9ZldnfX7/rfEs4m4XAKD5dOy3rdP31HweVs/qOIas9fxHtrzB
VvV7a9su7rYCiB55F8Ii70oOHQupeSRSbk4yHStjyz62HGJ1Tio9J9m9bhyQ
t0P2G1tl9YSdvlXjilgN033bNske6i9WLuP8kHehBJF3AUgE+25uZXWI1Xi3
TVLfNstbdt1cjS9t3+mHaWyduNsNoGnuN8xtWZ/lp+x3Rqe42wUAyL/WrVv/
wrbVelpd7Y5LqjlGyV22V9xtBBAd8i6ERd6Fxtj74ndW2ygbc/26zrT1zFVu
ztHnUhvOO9rkeIo6XsdO32N1jXI2d9x1T2VwlZWVm6eKeKwg8i6UIPIuAGVn
8803/+/q6uqurl/77AbmgXjOLr9eY0O72yaqTzpQJja2z/BAd3y/PtcfaF5k
u3yjuBsGACg89elyY1HfkPVdkBnz8HJ37MPGcbcTQOGQdyEs8i7kQ9u2bf9o
76GOLrcaZMvzNN6y1RzXX+ytMLmY1adWS+3vH7Ka4Y7VPlnHbdvlna1at2rV
6sdRP0/yLpQg8i4AJc8d53uA+pC7HOvb1IbH08yyOt2+q3fWuDhxtxlAbjTf
nn4LZH3Wb7bP9v/G3S4AQHzse2Efq5vqbAdqnNsLq6qqto67fQDyj7wLYZF3
IUoai0Tzfqn/ub3njtJ+KTf+4T9T6bkzllp9EqK/mPqzv6K5yjQ3h9Vku/xU
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
Rd4FBEfeVRj2eva01/VT99q+2KpVqx/H3aYyQt4FJJR97n/pxo79sqqq6rdx
twcoJuRdVJKLvAsA8iczbk11dfVWcbcFKEfkXQiLvAsIjryrcKqqqraw13ap
e30fZI6ZvCHvAhLKPvdD3Dr1prjbAhQb8i4qyUXeBQD5Y9vaF7tt7tPjbgtQ
jsi7EBZ5FxAceVdhaSwAe21Xu3XSDXG3p0yQdwEJZZ/7+93nn32aQB3kXVSS
i7wLAPKnurp6j8xxu3G3BShH5F0Ii7wLCI68q/DsNd4yk89wfFRekHcBCWWf
+8/c5/8ncbcFKDbkXVSSi7wLAPKnoqLiR26b+5O42wKUI/IuhEXeBQRH3hUN
e32PcK/zR9XV1T+Nuz0ljrwLSKDMsQOaTyDutgDFiLyLSnKRdwFAftl299vu
d/cv424LUG7IuxAWeRcQHHlXdOx1ft691qPibkuJI+8CEijruIGr424LUIzI
u6hSqbVrv8rr7VTkXQCQX1n7LyrjbgtQbsi7EBZ5FxAceVd07LU+0K2blsbd
lhJH3gUkkK1Dz3TfV6fE3RagGAXJu265ZY6X+Q6tWxdcMDkvWUbmMRYufC3v
OcmiRW94L7ywOi/3dcYZ53pbbbVVs69XjR073rv66ps2uHzw4GHe7NkPNdmG
deu+8V/3rl139Tp16uzdeefDBc+aMvXmm197Dz64sN6MqXv3Hv5zK8TjLl78
pjd06MhAt+3Xb6C3cuWngW5L3gUA+WXf5Q+4bYTOcbcFKDfkXQiLvAsIjrwr
Oq1atfqevdZf6fWurq5uGXd7Shh5F5BA9pmfps+9fW8dFndbgGIUJu8aPny0
N2HCFbVq7tz/5CXPKFTe9dxzK70tt9zSv/983F8+8q5jjunnHXnkcRvkSJ07
7+RdfPHUJtswbdo/va233tq7/PLr/axrxYqPCpIx1VennjrK23ff/Te4XO0/
+ODDvYsuujTvj/nWW996vXodGfh/qPfl8OFjAt2WvAsA8kv7iNy2935xtwUo
N+RdCIu8CwiOvCta9lrf717vA+JuSwkj7wISyD7z97j1525xtwUoRmHyrvr6
9eSrCpV36f50v8WUd3XtuoufV7322gc1l+m1VTtPOGFwk23o33+Qn5kV6n/R
WA0adGq9eVcha9asB7wdd+wUeJzCF19c4/8PgryXyLsAIL9sm/sql3f1ibst
QLkh70JY5F1AcORd0bLX+ly3fhoZd1tKGHkXkED2mX/M/ebuEHdbgGKUj7zr
0kunuaxqea3Le/c+xjvwwEP90zfccLudPsTbZptt/DH4NHbf0qXvbvAYmYxC
2YbOT578j1r3efzxJ3mHHNLLP/3GG194558/ydtzz25+frTbbnv44/ypr5Gu
1xiGdcdfVP+kzH3peuVL223X0dtppy5+hvTII4sKmnctW/ZeTVtmzJhdc7me
hy7bffc9G3183Xf287nqqhn+5Xre7du3r3VbPRfd5u67F/jnlZOde+4E/7Zd
uuzs7bDDjt6QIadv0D/s+utv8/bf/0D//nbeuavfr2/Jknf8167u66nXMPt1
zh7f8uWX3/L/z3qc7bbbzn99n3xySc31Qduj//mAAafUukzvi1133d2/38MP
7+PNmfN4reuVyZ133iXkXQAQsXbt2k1y+4r6xd0WoNyQdyEs8i4gOPKuaOnY
KLd+mh53W0oYeReQQPY99aL7vvpr3G0BilGYvOv22+/3XnppbU1lrldupRwr
eyw79bHR31x33a3+eY0vpyxj6tQbvHHjJvo5Rd++J+WUdynXOuigw7zRo8/3
rrzyRu+0087w/+ayy66rycNmzrzbv0xj3Cmve+aZFTVZjOa/OuKIo/x8R3mc
8rkOHTp4//nP0oLlXffd94TfHs11ld2XS/mSLtN1ysQa+vs77njQ69FjP69n
z4P9fk/PP78qVN6ltun/sGDBC96NN97h/9/OOefimr8ZP/4y/28GDhzqX68s
U2MvLl/+of/a6bTyRb2WKr3Gq1Z95rdF95XJu3SZ2qkca9q0f3k33XSnt99+
B/i5ou4raHuUfel5jR9/ec1lyrbURv2d7ldLPX72c1f7u3Xbm7wLACJm29zj
3Lb3yXG3BSg35F0Ii7wLCI68K1r2Wnd066en425LCSPvAhLIvqeWu/5dv4+7
LUAxCpN31a3s8eWUL+y1V/ea85MmXe3311HuofOagyn7PpWNKetYvfrzZudd
9d2v8qvDDutdc76h8QxHjTrHO+CAg2o9B51W/yrlZ4XKu5T3KdNRxqbMT6/P
4sVv+m1U3qPlvfc+1mhGo/5MdcczDJp3KYPKfs369Rvo/f3vPf3Taof6yZ1y
yogGH7ux8Qz1+Jm8SxmXHlv5Xub6RYve8OdSy8xR1lR7VPfc82jNa5O5TBmq
LnvooWcbbKcyVd1GuSt5FwBEx7a9x7h9RafH3Rag3JB3ISzyLiA48q5o2Wv9
J7d+eiPutpQw8i4ggex7arU+91VVVb+Nuy1AMQqTd02Zco03e/ZDNZWdU2T6
3Myb94x/XjnGWWeNq7le/YDUV0hZhnIw9a3KziOam3e98srbfnalvjwaJ1GV
nbs1lHftscdefi6ljCa7dNsTTxxSsLxr2LAz/bwo029J/ZKuvfYW/zXRc1b/
J73Ohcq7evY8pNZt9D/q3Hkn//T06bOazJGC5l2ZcQzr3mafff5u/8MBgdqT
nW2pb2HmMvXNy/yf77zz4XrbcsklV9Z6P5J3AUA0bN17lvvdPSLutgDlhrwL
YZF3AcGRd0WroqLif93r/W7cbSlh5F1AAtl680197isrK38dd1uAYpSP+btU
yr40Hp+yp0zO8tRTy2quO+qovn7+of5N8+c/78/blJn/qbl5l7Iu5Wbdu+/j
zZz5b39MvKOPPr7WHFgN5V0at1B5i66vW8pTCpV3aT4zZUbp5zLAnxNL4xpm
+lT16XNszfVR5F1jx46vyaX0Wuv22WNVNjfv6tv3RP/9UPc2vXod6c/jFqQ9
KmV/alPdXEv/p+OOO8G/Tq+H+qZlX68xLXXd7NnzyLsAIEK27X2G23cxKu62
AOWGvAthkXcBwZF3RauiouJHbv30adxtKWHkXUAC2Wf+bX3uW7du/Yu42wIU
o3zlXZlsQn1zRo4c648rmLl87tz/+H+vubQyl2nepcbyLs3N1VTepTmdlC1l
j1l3+ulnBcq7lJMpJ2ns+eQ771q37ht/DEPNJabzM2bM9l+v7bbrWDP/lMZS
VH4XNu+68MIpOedd06b907+9/q6xvEt9tJrKuzRfm/pg1b2NMjDNARY078r0
77rttrn1PqbGS9x++x38PDX7cr3GQd6z5F0AkF/q1+V+d58Vd1uAckPehbDI
u4DgyLuiR1aTM/IuIIEyeZfVL+NuC1CM8pl3LV36rj83leZoUn+rmkzh1vtq
ZVkq9fPSZc89t9I/r344dcefU16SPSai+olpPMRM3nXmmed5XbvuUqsNylB2
222PmvPKwnS/V1wxvdbt1J8qne28WOvylSs/LVjetXDh8lpj82lMQ71emXm8
svOd11//OFTedeWVN/p/9+qr72/wfwuad2XaN2LE2bVukz3HmcZj1P9F2V1j
eVdmbET15ctc/8QTr/iXjR9/WeC8K/O+UD6afTuNj5k5PWTI6Rtka+efP8n/
u2effZ28CwAi9Le//W2421c0Ju62AOWGvAthkXcBwZF3RY+sJmfkXUACkXcB
jQuTdw0fPtrvN5NddfsCDRw41J+Das2aL2su01hzGj9Q4/bdddd8v8+W+uTo
PjP9mtTPSzmR8qy5c5/0L8vMAaXbPPzwc96AAaf4+VAm71KfH92H+jYp01H7
dL3uZ9my92oyMs3zpAxMWZL6oK1e/bmfs2Xm+5o48Sr/upNOOtnPYJrKu5Tn
1X0dVHrMxq6//vrb/PY+88yKmvvr2/ck/3llzisf0m0eeODpUHnX00+/6j/u
yScP9zO8G2+8w9t5566h8i6V+mXpb9QmvSb6X2mus0w/PN1v5r2g09njBWbn
XcrI1E9Nr7vmJ9Nz1/106bKzt2TJO4Hb8/LL62rmjstcpnEr1YdP88Fdc81M
/39Y9/XQOJEN5XLkXQBQOORdQOGQdyEs8i4gOPKu6JHV5Iy8C0gg8i6gcWHy
rvrqqqtm1LrtnDmPe+edd8kG96E+Tcoott12W388u0cffckfm1DzVWVuo/H9
NN6dMg+dVy6ijEzZmHKTSZOu9ueFyuRdqosuutTPNXbcsZM3dOhI/341v1Sm
D1EmH9Fl6kfVo8d+3qJFb7j+TK/5bdDlGlNQYzDWHfewvryroddC99fY9Zrb
TLlfdgajzOjmm9eP8/j665/U2x+tqbwr8/p167a3/xrr+kw2FSbvUtv0Oiub
Una4557d/P5emfmxdL361el/or5148ZNrDfvUul1PvHEIV7Hjtv7r/Gxx/av
1ccvSHtUykCVr2XOq5+Y7kv/c91W91N3zjG9RspLG/tfkncBQP6RdwGFQ96F
sMi7gODIu6JHVpMz8i4ggci7gMYFybsoKs667LLrvL333jfw7TU2pDK/f//7
kSZvS94FAPlF3gUUDnkXwiLvAoIj74oeWU3OyLuABCLvAhpH3kUVe2muLvUN
fPzxlwPdXnPHZfcbbKzIuwAgv8i7gMIh70JY5F1AcORd0SOryRl5F5BA5F1A
48i7qFKoBx9c6A0efFqg2/bufYw/P1uQ25J3AUB+kXcBhUPehbDIu4DgyLui
R1aTM/IuIIHIu4DGkXdRpVJBM6ygt1ORdwFAfpF3AYVD3oWwyLuA4Mi7okdW
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
jTB516xZD3g77tjJz72US1166bSa615//RM/TznwwEO9m2++yzvvvEv8Mfp0
3YUXTvG/xydMuMK77rpbvV69jqzJiZT9bLPNNn62pL9TBrTXXt39/k/KyTLZ
0JAhp3s33XSnv1Q7CpV3qR/X1ltv7XXv3sPbaacu3ptvfu1frsxI/bF037fe
et8Gf6fnpNtfe+0t3mWXXef17XtSg20YP/4yvw3qN1Xf9XpsvY5B8qg33vjC
mznz7prXV89LY05m513KoebPf9677ba5fh6p+cIyc3Hlcv9hnjN5FwAUN/Iu
oHDIuxAWeRewXibv6tKli/02nenvP5g/f369edfjjz/u75c46KCDvJtuusl+
E0/1dthhB69Pnz7kXXlEVpMz8i4ggci7gGiEybuUZ6jvlU6feeZ53t//3rPm
Os3xpM+s+n7V/buTTx7ujwWonKzudeoHpvvKviwzft7tt9/v52M6rfmugrQx
17zrsccW+9fPmDHbX95//1M1GZTyO+Vwyojq/p36Nx1zTL9AbdS8X7rvFSs+
qvd65UjKE4PkUdmvV93xBjN5l7LIzGUvvrjG/30wduxFOd9/mOdM3gUAxY28
Cygc8i6ERd4FrJeddymzGjx4sP0u72G/p1dskHcNGjTI69ixo7d06dKa/l7T
p0/3bzNnzhzyrjwhq8kZeReQQORdQDSC5l0aX1A50l13zffPZ8b3e/LJJf75
t9761jvssN7+GAPqo6V+QZm/VW6i8Q+PPPK4mturNKah7kP5izKX7MqM96fH
1RiI6vOl8RILnXdlci71P9MYi2PGXOA9++zrNXNqDRhwinfccSds8HfKwnQb
ZXdLlrzTaBtHjhxb8xj1XX/ggYf4fckKkXeplFNqXMhc7z/McybvAoDiRt4F
FA55F8Ii7wLWq5t3KcvaZZdd7HfomRvkXV27dvX69etXa86uxYvTx7ROmTKF
vCtPyGpyRt4FJBB5FxCNoHmX+m3tsMOO/hiD6qel5fbb7+Cde+6Emtuov5Lm
nVJ+pf5Jmb5RmcwrMy/W8OGj/fvQGHs6P3HiVX6mUrcy/Z90WhmTbqucpu68
YfnMu8aOHe/tvHNX/7TG6Ntjj728K66YXtPf6uKLp9Zcn13K+5QvaXw/ZX5X
X31Tg23QuIBqw6OPvlTv9V267JyXPKqhvKt376Nr+ublcv9hnjN5FwAUN/Iu
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
/kLrMsoOzQtg9OhdkI/eRVt6F8TTu8rTapLpXVAhvQvy0bqMrofmBTBa9C7I
R++iLb0L4uld5Wk1yfQuqJDeBXnkal0XX3xd793v/mDv2c9+bu9JT3pSb+ut
n9bbZ5939n7+8+XZ28kFF1zZ30449tjvdt5x5nt8+tNH93+3K6+8fb2fY4st
nto78MCD1nqfF7zgxb0993xb0d9N8wIYHXoX5KN30ZbeBfH0rvK0mmR6F1RI
74L5l6t1nX76Bf2msskmm/T22GPf3kc+clj/Y+heRx319ezdRO9a+xjV3hWG
5gUwGvQuyEfvoi29C+LpXeVpNcn0LqiQ3gXzK1fruuKKW3vPeMYze09/+jN6
P/rR7ErfO//8K3rLl9+TvZnk6l033nh/8f6z6s+f9N4VhuYF0D29C/LRu2hL
74J4eld5Wk0yvQsqpHfB/Ml5va7PfObL/ffof//3E6Pu/9WvntDbbrsX9o/9
2nbb5/QOPvizvRtuuG/F90Mf+/CHD+k3tHCfF7/4pb3jj/+vlZ5jdvam3t57
v6O32Wab98+bGI4li+lda/vZy5b9pv8cn/zklwbPvVlv++1f84DnuO66u/v9
6J3vPGCl29/4xt36z7Gi4fzyxt5GG23U+/KXj1/x9V57vb3/2PDcO+/85t65
5y5dcf/3vOdD/WZ4wgmn9Z7//O36czn55HMe0LvCY8Ljw7kjw9fXXntX71//
9dDec57zvN4Tn/jE3rOe9ez+8XXXX3/vSr3rda97U+/Vr96pt+mmmzbP/0+9
L37xP9bZu66++ne997//I72nPe3pvc03f0rvpS99ZfT/s+YFMF70LshH76It
vQvi6V3laTXJ9C6okN4F8yNn6wrjDW/Ytd+dYo7j+spXvtl/Pw896etfP6X3
wQ9+vP916E7D+7ztbe/ud5uDDvpk72tfO7m3yy579u/zX//1kxV9JzSw0Hw+
9rHDe0cf/Y1+h1lX71rXzx72rtCGQj8644yf9c466+LVPte++76r36aGrSxc
uyy0rdDKhvf53Oe+2u9ql112S78bhc4WulHoTMcc863eC1/4kn6ru/zy367o
XU9+8pN7L3rRP/dOOukH/ca36vFdV155W+8f//EFvVe8Yvt+dwuPC13rZS97
Ve+AA/6199nPfqW3337vGXS7I1fqXeFnH374F3tf+MK/9R8f7vOpTx21xt4V
frfXvOYNvec+9/n9ORx77Hf6jS88Ltc5KjUvgO7oXZCP3kVbehfE07vK02qS
6V1QIb0L0uVuXWGEjvPSl77iAbf//OfLV4zQwkK72WabZz3gmKl3vON9/WOH
Qs8577zL+u/3oWMNvx8e97zn/WNvp51e3/86dJxwn9CEhvcZPm5NvSvmZw97
1+tfv8s6f+cTTji9f9/TTju///XHP/7p/tfhuKnhfXbY4bX9Fhg+D40rfP97
3/vhiu9fdNG1/UYWHjvsXeE+obPN/Vlze1c4ji10q1/84voH/H5zvw4/+1Wv
2nGl3jX3fIahkYXmFX73q666Y7W9K7TG0Ot++csbVnruvfbar9/kcr2eNC+A
buhdkI/eRVt6F8TTu8rTapLpXVAhvQvSlGhdYYTjjcLxRavePnzvDiP0qPPO
u7z/eeg3c+8Xukq4/eyzf76iC/3gB79Y6T7h3H2hzYTPwzn5Vu0t67p+V8zP
nns+w3X9zsNzGoZjxEJrCucSDMc+bbzxxr1TTvnRA85lODyP4arP80//9KLe
m960+4reFY5ZW/U+w951yCGf639csuSIB9znkkt+1f83Cl1wyy236o9wXNaa
elcYw+PdwnxX17vCcXbh+5tssslKI/yO4flzvqY0L4Dy9C7IR++iLb0L4uld
5Wk1yfQuqJDeBeuvVOsKIxx3tdVWWz/gGKNwDFRoMMPedeaZFw6a1HdWul+4
RlW4PVy3KpxvL3y+6jFFH/3oksExTrf1r08VznHYpnfF/Oxh7zriiGOjfu+3
vnX//vFc4ZitcP7FcMzVrrvu1T9f4uc/f8yKcxmG+77xjW/pX5Nr1ecIx5sN
j40bXr9rTb0rPF/ofM985rb98yPObV3hWmdhLuH3D79ruFZXuD7Z2npXOD4u
PO83v3nqantXOM4tPO/vW+XK46c/vSr760rzAihL74J89C7a0rsgnt5VnlaT
TO+CCuldsH5Ktq4wDjroU/336O9858wHfC+0o2HvCsc8hc/DNabm3ic0qHD7
qaee1/u3f/v95+eeu3Sl+4Rjp0LvCefhC33ola/coVXvivnZbXtXaGTh/i9/
+at7b3nL3v3bvvvds/rHQP3zP798xbkMfz//96/2mKjQwMI1smJ6V7jWVrhO
WDgG7CMfOWylf/9wzFX43vC2cJ7GdfWu4e8+PH/iqr0rHJMWOt4119xZ5HWk
eQF0S++CfPQu2tK7IJ7eVZ5Wk0zvggrpXdBe6dYVRrg+V2gwoa/87GdXr/S9
z3zmyyt6V/j62c9+7gOujxWOiQqPD9eRCscNhfMAHnbYF1Z8/9pr7+ofZ7Tj
jq9b0b5ChwnnKIztXTE/u23vCvN6ylO26D/mxBPP7t82vNZYuG14LsMwwuer
Xpvrhz+8pH/bQQd9Mqp3het3ha/D9b5CUxseY/Xe9/5L8++zzUqPCce/hePg
1ta7wu8eGlz4PcLXoSOG48KG3z/qqK+v6GxzHze83pfmBTBZ9C7IR++iLb0L
4uld5Wk1yfQuqJDeBe100bqGIxwrFDpVaEfhPH/h/IPh+KBwTFZoUxdeeE3/
fsNrRoXjj8K1s/bf/wOD5vOpFc+1337v6fecgw/+bL9fhfMlhucO5w0M3w+d
J3w/tKHQxcJz7rzzm9fZu9b1s9v2rjD22eed/b4191yO4ZyMc89lGMby5ff0
zzcYGtSXvvS1fksK/e1pT3t6b+nSX7fqXeF4q/DYN795j/7XX//6Kf3vh3/z
cIzd8Fi4cMxX+J2GvWvrrZ/WvzZZ+P3CNcPCY8J5F4c/J/y7hNs+8IGP9q9P
FkY4di08z/ve9+F+s3v/+z/S75pzz6eoeQFMBr0L8tG7aEvvgnh6V3laTTK9
Cyqkd0G8LlvXcIRzAobrVD31qVv2e0voQKG9hOOY5t4v9JZwHr9wn9Btliw5
YqVeFHpO6Cqh/YT7hHMDfutb31/pOU455dz+8Uihe4Wf88EPfnydvWtdP3t9
ele49lVoSHNvC88Tjp1a9b4XXXRt/7yHm2/+lH4XDMeaDY97a9O7wjjuuO+t
dA7Jj33s8P6xWuHfft9939U7++yf989PODx2LBz/9clPHtm//lf4N9tuuxf2
m9vcnxO6W5hfaGNXXHFr/7bw8V3vOrDfysLjXvjCl/QbY+h3pV9fmhdAXnoX
5KN30ZbeBfH0rvK0mmR6F1RI74I4o9C6DKPE0LwA8tG7IB+9i7b0Loind5Wn
1STTu6BCehesm9Zl1DY0L4A89C7IR++iLb0L4uld5Wk1yfQuqJDeBWundRm1
Ds0LYP7pXZCP3kVbehfE07vK02qS6V1QIb0L1kzrMmofmhfA/NK7IB+9i7b0
Loind5Wn1STTu6BCehes3hd2uOwRh+659LenH39T583BMLoc3zvmV73D9l56
TdfLJMAk0LsgH72LtvQuiKd3lafVJNO7oEJ6F6zZJ94yu+mhey69+0en/rbz
5mAYXYyzT7y5d+ies787bPdLZrpeHgEmgd4F+ehdtKV3QTy9qzytJpneBRXS
u2DtQvNastfSu84749bO24NhlBxaF8D807sgH72LtvQuiKd3lafVJNO7oEJ6
F6yb5jVa4z3v+VDv6U9/xgNuP+OMn/WuuebOqOf4xjf+s7fddi/sbbrppr3n
P3+73rHHfrfz32uUhtYFkIfeBfnoXbSld0E8vas8rSaZ3gUV0rsgjuY1OmN1
vevLXz6+vw2zbNlvop7je9/7Ye+ww77Q+/a3z+jtsce+vY033rj3k59c2vnv
NgpD6wLIR++CfPQu2tK7IJ7eVZ5Wk0zvggrpXRBP81r3uPHG+7P/jNX1riOO
OLZV75o7Lr74uv5j//3fT+z836/roXUB5KV3QT56F23pXRBP7ypPq0mmd0GF
9C5oR/P67zHsTieccFr/nIBhXXLyyef0v3fhhdf0dt11r95mm23e23rrp/V2
3vnNvbPOumjFY8OxVc985rbN9zfrvfrVO6143Ec+clhvk002WennhMeF5/7O
d85c6ecOvz88tmvuCLeF75133uW9nXZ6ff/nhJ+3//4f6N1ww30rPf9XvvLN
/mPOO++yzv9NuxxaF0B+ehfko3fRlt4F8fSu8rSaZHoXVEjvgvZC8zpsr9k7
a29eoTs9+clP7r3oRf/cO+mkH/SOP/6/+sd3/fKXN/ae8Yxn9nbY4bW9o476
eu/oo7/R23HHnfv3/dGPZvttK6x39t77Hb1jjvlW/2N4bHjO9eldS5f+unfg
gQf17/Otb32/d+qp5/VvC9/bfvvX9Hvbl770td4nP3lk741v3G2l5w6Na4st
nto8/mOd/3t2ObQugDL0LshH76ItvQvi6V3laTXJ9C6okN4F6+ew3ZZtvGTv
2d/V3LxCdwrrjzPO+NlKt7/73R/sveQlL+stX37PitvC59tu+5zeAQf8a+/I
I4/rP+700y94wHOuT+8KY03nMwzHdIVjy1Y3/+uuu7u33XYv7F+/a9Vjvmoa
WhdAOXoX5KN30ZbeBfH0rvK0mmR6F1RI74L1F5rXYXvN3lFr8wrdKZwncNXb
n/3s5/Y23njjfreaO8K65i1v2bt//NeWW27Ve+5zn98/HmvuY+e7d334w4f0
b3/ve/9lxTFfwxF+dpj/pZfe3Pm/ZVdD6wIoS++CfPQu2tK7IJ7eVZ5Wk0zv
ggrpXZCm5ua1uu4URjhv4S677Nk/V+CqI7SucJ/w+RvesGt/uyNcv+sXv7i+
f/t8965wfsVPf/ro/jkNQ9v6/OePWfG9cK7Fl73sVZ3/O3Y1tC6A8vQuyEfv
oi29C+LpXeVpNcn0LqiQ3gXpam1ea+pd4dpdoWHFPMf3vvfD3lOeskXvta99
Y//rj350SVLvmp29abU/58orb+vttdfb+/cJ1/cKt4X7nnDC6Z3/O3YxtC6A
buhdkI/eRVt6F8TTu8rTapLpXVAhvQvmR43Na029661v3b+/PXHWWRevdPtV
V92x4vNrr71rxed77/2O/vkNw+ef/exX+o+de47Br33t5JV614EHfqx/rNbc
64N99asn9O9zzjm/XOlnXnPNnSs+v+CCK/v3CT8jfB1+Rvh8eMxZLUPrAuiO
3gX56F20pXdBPL2rPK0mmd4FFdK7YP7U1rzW1Lt++tOr+v0qjEMO+VzvyCOP
6+222z79cxyG75955oW9bbd9Tu/ww7/YPy4r3G/nnd/c/95PfnJpb6ONNurt
s887+73sK1/5Zv9nzO1dxxzzrf7X4fnCzxr+zCc+8Ym9HXd8Xf8xX/ziv/dv
f+Mbd+v3tHDbHnvs23/caaed3//eAQf8a//rt73t3Z3/W2pdAHXQuyAfvYu2
9C6Ip3eVp9Uk07ugQnoXzK+amteaelcY4fpcb3rTbv3jsDbbbPPeDju8tn+c
VvjeD394Se/1r9+l99SnbtnbYoun9rvVz3++fMVjw7Faz3veP/Y23XTTfgcL
rWpu77rhhvt6Bx54UP+8id/85qkrHnf00d9obtum/5w77fT6/m2f+MRn+s8V
rikWPn7pS19bcf//+I+Teptv/pR+j+v637Jg67pD6wLojt4F+ehdtKV3QTy9
qzytJpneBRXSu2D+hea1ZO/Z22toXsZ4DK0LYDToXZCP3kVbehfE07vK02qS
6V1QIb0L8ghdQfMyRmFoXQCjQ++CfPQu2tK7IJ7eVZ5Wk0zvggrpXZCP5mV0
PbQugNGid0E+ehdt6V0QT+8qT6tJpndBhfQuyCt0hsP2nr39grNu67x9GHUN
rQtg9OhdkI/eRVt6F8TTu8rTapLpXVAhvQvy07yM0kPrAhhNehfko3fRlt4F
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
8TXNPtjTu54UwNroXZCP3kVbehfE07vK02qS6V1QIb0L6tUs9ycOtlf/peTP
zdG8tK56TU9Pb9i8hs+fc6zXZx3rBYwqvQvy0btoS++CeHpXeVpNMr0LKqR3
QZ0WL178t4Nt1bu6WP7ns3lpXTQeOjjW667hsV4zMzNbdj0pgFXpXZCP3kVb
ehfE07vK02qS6V1QIb0L6tRso35psOwf3tUc5qN5aV3MtXjx4sc3r+kL5xzr
dfj09PQfdz0vgCG9C/LRu2hL74J4eld5Wk0yvQsqpHdBfZrl/f8M3/NnZmYW
dDmXlOaldbE6zev6D5t9sPc0H+8ZvM6vbF7nm3U9L4BA74J89C7a0rsgnt5V
nlaTTO+CCuldUJ+wPzdY7o/uei7B+jSvs0+65U6ti7Vp9scWN6/xXwz2ye5v
xiEbbLDBI7ueF1A3vQvy0btoS++CeHpXeVpNMr0LKqR3QV0WLVr0mGZ5vyMs
9+Hcb13PZ6hN8wqt65A9Zn+jdbEuU1NTD2v2yw5sXu/3DvbNLnOsF9AlvQvy
0btoS++CeHpXeVpNMr0LKqR3QV2abdN3DLZRT+16LquKaV5aF+ujeb3/32Ys
Hbz272vGQQsWLHhE1/MC6qN3QT56F23pXRBP7ypPq0mmd0GF9C6oRzjWpdk2
vX6wjfrcruezOmtrXloXKULfal77Hwm9a7AMXLJ48eK/73peQF30LshH76It
vQvi6V3laTXJ9C6okN4F9Wi2T18zWN5/2Xz5oK7nsyara15aF/Olef0/KZzX
cLAs3BOOeWxufkjX8wLqoHdBPnoXbeldEE/vKk+rSaZ3QYX0LqhGeJ//xWB5
f23Xk1mXuc1L62K+NcvAHzX7aZ8cbvs2n/9w0aJFf931vIDJp3dBPnoXbeld
EE/vKk+rSaZ3QYX0LqhDs4w/Z7BtekM4r2HX84nRb157L/31oXsu/fUhu1z2
uK7nw+RplodnzTnH563hGMiu5wRMNr0L8tG7aEvvgnh6V3laTTK9Cyqkd0Ed
mm3SU8KyHv7O1vVc2jh0z2V/G7pX1/Ngcj3ucY/702b5OH7OsV7fCbd1PS9g
MuldkI/eRVt6F8TTu8rTapLpXVAhvQsm3/T09IaD5fyORYsWPabr+cAoavbf
dgrHeA324a4Px351PSdg8uhdkI/eRVt6F8TTu8rTapLpXVAhvQsmX7M9+oXB
dukhXc8FRlm4hle4ltecY70+Fa711fW8gMmhd0E+ehdt6V0QT+8qT6tJpndB
hfQumGzT09N/3myP3tWM+2ZmZhZ0PR8YAw9plpd3NO+Ldw/eH5c1y87GXU8K
mAx6F+Sjd9GW3gXx9K7ytJpkehdUSO+CydZsi75nsIwf1/VcYJwsXrz475vl
55LB8nPv4Np3D+56XsB407sgH72LtvQuiKd3lafVJNO7oEJ6F0yuqamphzXb
ojcNtkm37no+MG4WLFjwiHAe0OE2cjO+34zHdj0vYHzpXZCP3kVbehfE07vK
02qS6V1QIb0LJlezHbrDYHv04q7nAuOsWY62acaNg+UpNOTndD0nYDzpXZCP
3kVbehfE07vK02qS6V1QIb0LJlezXJ8Xlu9mu/QNXc8Fxt0TnvCE/7dZnv5z
zrFeBy9cuPDhXc8LGC96F+Sjd9GW3gXx9K7ytJpkehdUSO+CydRsiz55sGz/
thl/1PV8YEKE7eW3NeOewfJ14fT09IZdTwoYH3oX5KN30ZbeBfH0rvK0mmR6
F1RI74LJ1CzTXx5si36s67nApGmWq2bx+r9XDt4/b2/2/Xbqek7AeNC7IB+9
i7b0Loind5Wn1STTu6BCehdMnsF51+5ptkPvX7Ro0V93PR+YRM0y9uhmHDfn
/Ibh80d3PS9gtOldkI/eRVt6F8TTu8rTapLpXVAhvQsmT7M87z9Yrk/oei4w
6cKxXeEYr8Eyd2U49qvrOQGjS++CfPQu2tK7IJ7eVZ5Wk0zvggrpXTBxHtws
z8sH26HP6noyUINwDa9wLa/B+2k4tnL3rucEjCa9C/LRu2hL74J4eld5Wk0y
vQsqpHfBZGm2PZ83WKaXNV8+qOv5QC0WLlz48Ga5O3i4Pd0si9+Ynp7+467n
BYwWvQvy0btoS++CeHpXeVpNMr0LKqR3wWRpluVvDZbpvbqeC9So2Q98frMP
eNtgX/CSmZmZv+l6TsDo0LsgH72LtvQuiKd3lafVJNO7oEJ6F0yOJzzhCf+7
2fa8v1me77ZMQ3dC4wqta7A/eFtoYF3PCRgNehfko3fRlt4F8fSu8rSaZHoX
VEjvgsnRLMfvs/0JoyGcyzCc03DO+Q0/1tz80K7nBXRL74J89C7a0rsgnt5V
nlaTTO+CCuldMDHC+/i1YXlutkO37XoywO81+4O7N8vlPYP32nOmpqb+V9dz
Arqjd0E+ehdt6V0QT+8qT6tJpndBhfQumAzNMrzNYFm+tvnywV3PB/hvixcv
fmKzbF432D+8YWZmZtOu5wR0Q++CfPQu2tK7IJ7eVZ5Wk0zvggrpXTAZmm3O
rw6W5QO6ngvwQM3+4Z81y+mZg+X03ubzHbueE1Ce3gX56F20pXdBPL2rPK0m
md4FFdK7YPw1y++jm3F3s915f7MN+pddzwdYo4c0y+nnh9vcg7+tOB4TKqJ3
QT56F23pXRBP7ypPq0mmd0GF9C4Yf8125xsG252ndD0XYN2a5fVNw2t6Ncvt
yVNTU4/qek5AGXoX5KN30ZbeBfH0rvK0mmR6F1RI74Lx1yy/ZwyW4+27ngsQ
p9lffGqzzN4yWHZ/PjMzs6DrOQH56V2Qj95FW3oXxNO7ytNqkuldUCG9C8Zb
s835F4Nl+G7HiMB4afYVFzZj6WC/8aaZmZlNu54TkJfeBfnoXbSld0E8vas8
rSaZ3gUV0ruge71e7+E33HDDo9ZnPP3pTz9g8803722xxRbfCF83z/Wgrn8f
IF64/l44p+Gca3qt13Gay5cvf8L1118/nWvM9+8NtdK7IB+9i7b0Loind5Wn
1STTu6BCehd07/rrrz90+fLlvfkYN91006O7/n2A1h4c/s4y3BZv9iHf3vYJ
rrvuurvmaz2yupHjl4Ya6V2Qj95FW3oXxNO7ytNqkuldUCG9C7qndwFB8178
pjnN65A2j9W7YDzoXZCP3kVbehfE07vK02qS6V1QIb0Luqd3AUPN/uMrmnHf
nL/XPTTmcXoXjAe9C/LRu2hL74J4eld5Wk0yvQsqpHdB90Lvete73tX74he/
+IC/MZ955pn99+bjjz9e74JKNMv8dnOO8zo+5jFve9vb7tpyyy17y5YtW2md
cM011/S222673g477KB3wQjQuyAfvYu29C6Ip3eVp9Uk07ugQnoXdG/Yuzbb
bLPeeeedp3cBfzAzM7Npsy9562Cf8jtTU1MPW9v9L7744rs23XTT3oc+9KGV
1glHHHFEfx1y+umn610wAvQuyEfvoi29C+LpXeVpNcn0LqiQ3gXdG/ausCy+
8pWv7B+PoXcBMzMzGzfL/y0xzSucz/CjH/1oLzSvCy+8sL8+uPzyy3vPeMYz
envttZfzGcKI0LsgH72LtvQuiKd3lafVJNO7oEJ6F3Rv7vFdW221Ve8Tn/jE
WnvXaaed1nv1q1/de/KTn9y//7777ttbunSp3gUTaKbR7FPeNGxef7CG63mF
3jXsW/vtt19/fXDQQQf1Ntlkk94FF1zQ/zp83GWXXVasa173utetdNxXWM+8
4AUv6DezcA7Ez3zmM3oXzDO9C/LRu2hL74J4eld5Wk0yvQsqpHdB94a962lP
e1rv2GOP7T3pSU/qnXHGGavtXeecc07/b9Eve9nLesccc0zv05/+dG+LLbbo
7bTTTnoXTKjFixc/fk7z+sYfrKZ5hd4V1gHhOoAbb7xx76STTuptvvnmvQMP
PLC/brj44ov7LWz77bfvfelLX+odeeSR/Wt6hW4e1iuXXXZZf93y0pe+tPeV
r3yl98EPfnClcyN28GvDRNK7IB+9i7b0Loind5Wn1STTu6BCehd0b27vCn9X
DuceC8dWXHHFFQ/oXXvuuWf/b9izs7Mr/g795S9/uX+fk08+We+CCRWaV7Oc
37im5jXsXddee23vhS98Yb9jbb311r1ly5b11xP7779/78UvfnHv6quvXrHu
CJ9vu+22vfe+9739aweG5z744IOdzxAy0rsgH72LtvQuiKd3lafVJNO7oEJ6
F3Rv1d4VWtY222zT/xv0qr0rHJ/x5je/eaW/Q//iF7/o32fJkiV6F0yw6enp
DZtlffngffvoud8b9q4wjjvuuP464ZBDDlmxnghdKxz3Fc5vOHeE++266669
5vH96weGY7zCcaNXXnml3gUZ6F2Qj95FW3oXxNO7ytNqkuldUCG9C7q3au8K
49vf/nZvo4026jesub0r/C367W9/+0p/h77mmmv693n/+9+vd8GEa/Yv/65Z
3m8Z7Gu+e3j73N4VrskVvh+O/RzeFo73Cq383HPPfcAI5zoM9wnHgoXjwMI5
VUMfC8eM6l0wv/QuyEfvoi29C+LpXeVpNcn0LqiQ3gXdW13vGp5/bHj8xbB3
Pf/5z+8fizH3fhdddFH/PgcddJDeBRVo9jWf2izz9w7ev18ebltX7wrHhr7q
Va9a7bkKVx3nn39+/5yI4dqA4bpeehfMH70L8tG7aEvvgnh6V3laTTK9Cyqk
d0H31tS7Lr/88t7znve8lXrXvvvu29tyyy373xveL5x7LNznpJNO0rugEs1+
5o6D9++7Q/9aV+/aZ599+rd9//vff8B6Zvh5uGbg8PMvfvGL/fv/4Ac/0Ltg
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
8F0A2YHvglLBdwEkB9+VP7ia1OC7ADwE3wWuwXUR5QicF6wNXBfRNHBe4Ap8
F0B24LugVPBdAMnBd+UPriY1+C4AD8F3gUsi13XPNctxXUTqwHlBc+C6iJYC
5wUuwHcBZAe+C0oF3wWQHHxX/uBqUoPvAvAQfBe4opHrqoB+T6I6AucFcXBd
RGuB84K8wXcBZAe+C0oF3wWQHHxX/uBqUoPvAvAQfBe4ANdFZBk4LxC4LiJp
4LwgT/BdANmB74JSwXcBJAfflT+4mtTguwA8BN8FeYPrIvIInJff4LqIUgPn
BXmB7wLIDnwXlAq+CyA5+K78wdWkBt8F4CH4LsgTXBeRZ+C8/ATXRbQ1cF6Q
B/gugOzAd0Gp4LsAkoPvyh9cTWrwXQAegu+CvMB1ES4C5+UXuC4ibeC8IGvw
XQDZge+CUsF3ASQH35U/uJrU4LsAPATfBXmA6yJcBs7LD+S6Jp1c/xKui0gb
cl5Tz130Kc4LsgDfBZAd+C4oFXwXQHLwXfmDq0kNvgvAQ/BdkDW4LqISQs5r
0pAFH+K8qhPbzpxc/9Ljd370pev3GlEdsXzZ96Hzqh/v+v0N1QW+CyA78F1Q
KvgugOTgu/IHV5MafBeAh+C7IEt8cV0zZ94f7L//QcEWW2wRbLPNtsF++x0Y
/PGPDzjPi2gcLz35Oc6rClE7M3HowteqzXXNmTMvOOqoY4Mtt9wq6Nq1a9C3
7yHB9Ol3O88rittu+7O9bnjxxbcb9o0YMTrYYYfuznMrV+C8IAvwXQDZge+C
UsF3ASQH35U/uJrU4LsAPATfBVnhi+u66KLx9rOzd+99gwsvHBeMGnVp0K/f
0cHUqbc6z41YM3Be1UW1uq7HH3/Z+vOdd941GD36Mtu27LPPfrat0bbr/BQ+
+C4FzgvKDb4LIDvwXVAq+C6A5OC78gdXkxp8F4CH4LsgC3xxXbNmPWc/NwcO
HBosX/6t83yIZIHzqg6q1XWtXLk62GOP3sGuu/YMFi36tNH+k046xbY5Tz31
WmaP//773yc6zhffpcB5QTnBdwFkB74LSgXfBZAcfFf+4GpSg+8C8BB8F5Qb
X1yXYsCAgcGmm24azJu3vMVjli372o4BU9/1JptsEvTosUtw8cUTghUrvms4
5rjjTrJjNrS/W7cdgq233iYYMuS0YPHiz5o957vvfmWPGTVqTKP9r7yy1H6O
R3OezZ//fjB48Kn2WM2HprnRnntuQcPxBx/cz+6Ln2Py5Gn2HHoM169vloHz
KjbV6roUf/7zM7YGr756+hq3qa3RbWeddb51Xvp92rTbGh0zZswVwWabbRbU
139st+XlNRfi5ptvbseLDR8+wrYN0fF77bWP9WiXXXZVsP323Wxbobbn0Udf
tO2DthWHHXZUMHv26w3388l3KXBeUC7wXQDZge+CUsF3ASQH35U/uJrU4LsA
PATfBeXEJ9clXxU5pNaO09peI0deZPuv1desmps8+fqGY+S7Nt54Y+u41Ict
XyWPdv75Y1s8r/q7u3ffqZE3mzBhip0DbcmSz4N33lllx4jIn2luxVtuudfO
uaj+7GjMiM++S4HzKibV7LoUY8ZMXsMjxaNXrz3sGoH6vU+fA4JDDjm80e09
e+4eDB16uv1d7kxtyamnnh3MmHGfbYN2262XbRvURugY+S458QEDBgVPPPFK
8OCDT9v9ajMOPfQI265MmjQ12GWX3Wx7Et3PN9+lwHlBOcB3AWQHvgtKBd8F
kBx8V/7galKD7wLwEHwXlAufXJfizTc/sJ+ZZ545qtVjm84Ppj7kgw46rGFb
vkv9z/Hjjj32xGDvvfu0eM5obMd99z3ZsK9Pn77BiScOs7/Lcen2hx56tuH2
uXOXBRtttFEwduyVdtt336XAeRWLandditNPP9fWYEvjO+W3NE5Lv1933Ux7
rGpb21r3S9uPPfaS3d5zz72Ds8++oNH95ad0zJ13Pmy35bvkwZcu/bLRcU3b
rWj+1gcemGO3ffRdCpwXpAXfBZAd+C4oFXwXQHLwXfmDq0kNvgvAQ/BdUA58
c10KzQem2tG4rdaOlRvTeCyNu9h22+1saIxFdLt8l1xV/D7nnHNhsN1226/1
vNE8ZPr91Vffsfncddcjdjuax7DpfdT/rXEc+h3f9UPgvIqBD65LIYeuGozm
I2wa++3X186Pqt/lxDTOdNy4axruG3lyOTCdR+O7NL9hPOLzJaod0dyszT2W
nJjaCbVZcmy6380332Nv89V3KXBekAZ8F0B24LugVPBdAMnBd+UPriY1+C4A
D8F3QVp8dF22v3P5t7YfOXJHLYVcl+Yd7NVrz2DmzD/ZcVlHHjmgYXyGojnf
pbW5mvNV8dCciFqTR/MTTpx4nT3+vfe+sbf173+Cnfes6X00NkT95fod3/W3
wHlVNr64LoXW0VINzpkzr9nbNaegajfaPu20c6zHVu3LS2nMl/Y/+eSr9jxy
YXJSTSMaPxb35s3lce65F9u1vCK/ddNNd9nbffZdCpwXtBV8F0B24LugVPBd
AMnBd+UPriY1+C4AD8F3QRoi13Xf1BWrXPc9ugjNSaixFXJaLR0zZswVdm2u
119/r2Gf+qfL4bsWLPgw2GSTTYKpU/9o1/PReaPbNCea+r6b3kcO7PDDj7G/
y33hu/4WOK/KxCfXpYjmDbz44glr3KZ5CnWb2odoX+S1LrlkommPtrTr92n/
iy8uavE88WjOd6n+tRbg6aePbNg3b95yfFeTwHlBW8B3AWQHvgtKBd8FkBx8
V/7galKD7wLwEHwXtBXfXZdC83qpfgYPHh6sWPFdw/533lkV3HvvE/Z3rZ3T
vfuOje4nv9Wjxy6Nttviu6L7ap7Epmt1qU9a+9QXHu179tk37b4xYybb7RNO
GLLGGmHqr/bVdylwXpWFb65LsXLl6mD33fey85nGPbnGb/Xrd7T153/5y1uN
7rPvvvvbtfnOOOO8hn1af0teXeNL42tzaWxqNA5U0Zzv0lyKagfk0qN9Tz/9
ht13ww132O177nms0VphilGjLrX/A6DHcP065hU4LygVfBdAduC7oFTwXQDJ
wXflD64mNfguAA/Bd0FbuOKoZX/vu+tSqD9Zzkg1JG904YXj7Nxf6mPeZptt
bR/zHXfMahh7cf/9T9nxEpoHUX3W0fo8aXzXrbc+aM+vPm31kzf0wS7/1s6h
KK82bdptto96l112s3OhaVyYjpk69VZ7X82LqLnT5MGitX189V0KnFdl4KPr
iuKRR/5ia1H1qjbl/PPH2rGZqs3x469d4/gpU2bY2+Sk4vu1/pb29+69rz1G
a3aprbnyyhsbjmlpPkO1aZonUWsCTp9+t10zTO2W8tHtr732rt3WcRqTpn23
3HKvfTy1aa+8stT565hX4LygFPBdANmB74JSwXcBJAfflT+4mtTguwA8BN8F
pSLXNfnk+hd9d10N/ZzLvw0mTZoa7LFHb+uxNIfgwIFD7Viq6JhLL51k98uB
DRt2pnVL6mOOxlml8V0a/6EaPu+8S9a4be7cZdbHbbnlVnbMxdFHH9do7jHl
rsfR/GN6LM2HeNFF4733XQo5r4k4L2f47Lqi0NhMrfWnOQpVvwceeKj1280d
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
tTV8d16+uq54LFnyuR1TGtXzrFnP299nzry/4Zhozr+mvis+72kUTX1XFBoL
GY0X07pe2tec72qtVtWm/TAea1qLz6mldkMOTWuOxfdFc8FG7VJLvkuh8bla
E/Huux9dY7ybLyHndeMFS/6K86p+8F0A2YHvglLBdwEkB9+VP7ia1OC7ADwE
3+UXRXddiuZ8l8YDbbPNtnasgrZbclLR3HwaxxDte/bZN+0+jQ/TttYCk5Pq
2/cQ65TUvxtfW6elc2vusu7dd2y0T66qR49dGrbz8l1JconWCXvmmflrvMZx
3/Xii4vscWeccV6jY6I+9ySPpfEdcpHxfnqNp4v+Xk3vq7nWmq6zVsTw1Xn5
7rri7cXLLy+x72XNOXj77Q+t0XZonJf2aT2uaJ/mFzz++MFrnLep74o/jtoQ
3abxqNpuzne1Vqsaf6a1x3r33rdRrWq/2kX93lK7ccopZ9n/JXjnnVUN+/Sc
dazaNG2vzXdF7bpqX+NtXf8NXcXKFTgvH8B3AWQHvgtKBd8FkBx8V/7galKD
7wLwEHyXP1SD64r3ix544KHB1Km32jnw1EeqcQtPPPGKPaYlJ6U+XI1DUP/u
tGm3BTfccEewyy67Bd267dCwzo7GNvTpc4Adg6E5v9RHLScWnaOlc99xxyy7
/5JLJgb33/+UndtL84wpr2jur7x8V5Jc1L+usVSHHXZkMH363XZMVXSuuO9S
aFyczjdo0Mk2V/W763XTmJQkjxWNYdFzifr1Na5E+84775JGcxbeeuuDdr/m
XYv62Iscvjkv312XQnOiqj5VVyeeOMy+nx977KXgjTdW2Pk65bLuu+9JW0db
bbX1GuvUyR2phnS72rjIYcV9l2pG47LOP3+sfRy1WWpfIt/UnO9KUqtq93SM
2pxrrrk5mDJlhnX/0RyHLbUbL7202D7eoYceEcyYcb/NVc+1X7+jrS/TMWvz
XYo99uhtH1v/Y+D6b+gycF7VD74LIDvwXVAq+C6A5OC78gdXkxp8F4CH4Lv8
oFpclyLyXcccc7x1Lupj1dx36j+OjmnJSSnmzl1m593acsut7Jijo48+rtFx
mnNMriX6TIwiGt+0tnNr/kONcdBYs2HDzgzmzJln+3ijsWN5+a4kuShuvPFO
O95DealfOtrf1HfJO40ff619vdU/rjke9Xqo/z7JY0Vj5vS6ar4y7ZNf1N9B
j611iKLH0jxmkQdz/V4rV/jivHBdP4TqUA5evkc/5daj2+6882HrqbbYYgs7
h6pqZcCAgY3qT7WhGlT7pJrTfbQ/7ru0TuHw4SNsTek4OamozVA057uS1KpC
7k3+TLWu8w8YMKjRmNiW2g21ncpDj6v1uOTT4rXdmu/S89FjNremoG+B86pu
8F0A2YHvglLBdwEkB9+VP7ia1OC7ADwE31X9VJPrUrS0flc5Y8WK7xp+X7bs
a7u2jMZANF03hyh/RPNLtrReWFGj2p0XrotIGxr3JvfnOo9KCZxX9YLvAsgO
fBeUCr4LIDn4rvzB1aQG3wXgIfiu6qbaXJcia9+l9Wm0ho3GI2kuL42H0Pbe
e/dx/tyrOTSu64ILLg+2375bozEj1RTV6rxwXUSamDHjPjted6ONNmpY64v4
IXBe1Qm+CyA78F1QKvgugOTgu/IHV5MafBeAh+C7qpdqdF2KrH3X7NmvB4MH
D7fzdWluLc09NmLEaDv3oOvnXs3xwANz7NxpGku3ZMkXzvPJKqrNeeG6iLQh
v635U9UGuM6lEgPnVX3guwCyA98FpYLvAkgOvit/cDWpwXcBeAi+q3qZMGTh
7Pumrljluq+OIIjG8eozXwQThy74YOzAt37tup1Iy8QhC59/8Kb3aWcIIuO4
6cIlH40ftGC465qH9OC7ALLD1NY+YX3d4joXKAb4LoDk4LvyB1eTGnwXgIfg
u6qXywfV73rFKfWfLq5nzSmCqJRYuSIIbrpo6acThyyc6rqNKAcTBtXvddVp
9Z8ufZt2hiCyilef+eK7CUMWflAt40J9B98FkB3R+C58FyQF3wWQHHxX/uBq
UoPvAvAQfFd1g/MiiMqJanNdETgvgsgucF3VB74LIDvwXVAq+C6A5OC78gdX
kxp8F4CH4LuqH5wXQbiPanVdEdXuvJYvr87nVS1RrX8fXFd1gu8CyA5TV33C
+rrZdS5QDPBdAMnBd+UPriY1+C4AD8F3+QHOq3yx9dbbBKNGjXGeR1tj8eLP
gjlz5jXa9/TTb9jP/3vuedx5ftUY1e66IqrVef35z88E48dfm/o8xx13UtCn
T99Mc22uvoseV155o22fliz5osVjnntuQXDeeZc4z7WcgeuqXvBdANmB74JS
wXcBJAfflT+4mtTguwA8BN/lDziv8kTRfdfOO+8ajBgxutE+fFd24Yvriqg2
57VgwYdB9+47BfPmLU99rjx8V3P1XfRI4rsU/fodHcyYcb/zfMsRuK7qBt8F
kB2mvvYL62u661ygGOC7AJKD78ofXE1q8F0AHoLv8gucV/pw5bvef//74JVX
lqY+zw47dMd35RS+ua6IanJeI0deFPTvP3Ctx6g2k5wrD9/VXH0XMerrPw7e
fvsT+3tS33XLLfcGu+yyW+HnNsR1VT/4LoDsMPW1f3hte5PrXKAY4LsAkoPv
yh9cTWrwXQAegu/yD5xX63HDDXcE++yzX7DZZpvZ/uPTTx9px3noNvmu0047
Jxg69PSga9ctbf/qddfNbLjvsmVfBxddND7YddeewSabbBL06LFLcPHFE4IV
K75rOEbnmDnzT8GJJw4z5+hqx4+MHXtloxyefPLV4MADD7W39+y5u+0r19gN
nV+3v/POquDccy8OunXbIdhyy62C/fY7MPjjHx9Y6/PS/aPPeoW2tT/yXRMm
TAkOPfSIYIsttrDP/9FHX2x0/9deezc4/vjB9nlvv3234Kijjg1mz57r/O9V
ieGr64qoBuclb7LNNtsG1157S8O+2277s62Vu+56JDj44H7BpptuGlxyyUR7
2/z57weDB59q61t1q/rQPHvRfVXDvXrtEQwcONQe0737jsGoUZcG7777VcMx
OqfuF89j8uRp9jGj41SnO+20s30MHa/5FrW/pfpuKVqrZ+U7evRltv1SO6Oc
hww5zc6ZGH+NLrxwnG3D9Fqo3dBrE93+4INP21yeeOKVRo+t3C+44PKG7enT
7w52330v2/bsv/9BQd++hwQnnXSKvS3yXTpmjz1623yPPvq44I03VjQ6pxyZ
jrv//qecv3faGrguP8B3AWQHvgtKBd8FkBx8V/7galKD7wLwEHyXn+C8Wo4x
Yybbz0K5KPWvTpo0NTj88GOCRYs+tberz3ejjTYKhg8fEcyYcV8wYMBAe/wj
j/zF3i6vpf5ajQu5+urp9jjdPnny9Q2PoXOob1hrAs2e/brtU9Yx9977hL39
9dffs326ck/qOz799HMbfJRuX7lytc1pt9162b7gmTPvt05Ox8jVtfTc1Je9
7bbbBSecMMS6rKhvO/JdeswxY64IbrrpLtv3rGOjvm315atPWznpMW688c7g
sMOOCjbffPPg+ecXOv+7VVL47roiiu68/vSn2bYuZs16vmFf5Lt23LGHbR9m
zXrOehf5Z7kYeaGpU2+1Y416997XeqSo7ZA/Ut1rnSnV2ODBw+25jj32xIbz
t+a75Lb0u7yTHkM/I7/UUn03F0nqWfluvPHG9jGeeuo1+3yV//nnj204zymn
nGW9vtpNvTa6T7w9TOK7lL+OUTun3w855PBG94l8l9o7/W+B2tKtttrazl/Y
9Hnp9T/11LOdv3faErguf8B3AWSHqa0DwmvbG13nAsUA3wWQHHxX/uBqUoPv
AvAQfJe/4LzWDPVbq+/25JPPaPEYuSr18Ubb6ufWGJCzz76gYV/T+c3Up3zQ
QYc1OseZZ45q2JYjUz/1OedcaLfHjbvGfh6/+eYHDeeTf1I/sLbVr6x+5/nz
VzZ6HPWf7713n7U+x7XNZ6j+7Gifxpdp3+23P2S3zzrr/GDfffdvNFeYftcY
Erk913+7SglcV2OK7Lw0bkk1IP8c7Yt8V+Seo5Dj0v6HHnq2Yd/cucusG4/G
bjY3n6HmRtX9Hn74Bbvdmu+6/vrb7e+PP/5yszknnc8wST0rXzm8eHsmNxe1
MS+++LbN5dJLJzXcrmM1HjVyUUl815FHDgj22mufhtvUruk+0bi5yHfp9YyO
0euvfRrTFT+vxoXJi7l+75QauC6/wHcBZAe+C0oF3wWQHHxX/uBqUoPvAvAQ
fJff4Lwah8ZcrK0vWdHc+l2aS1B9w9G2PJX6k9XvK4+liPfBNncO9SFrnjP9
Lhem8Qvx2/v3P6GhT1i+TXlqvsV4aCyGHmttzzHp+l1Ll35p96mvWduat1Hn
b/qYOkbjSVz/7SohItc16eSFV7qu7UqiqM5Lc5bq/R2tI6WIfFfTsVPRPIZN
z7HnnnsHAwYMsr8357vkcHQ+javUdmu+S+OyovYkGg8aj6S+K0k9N5evnPx2
221vf48cn9qP+DFq+zTHqn5P4rvk1OJj3KLbo+fR3Ppdeu7NPfYRR/S3/wuQ
dE21Sghcl3/guwCyw9RV37C+bnCdCxQDfBdAcvBd+YOrSQ2+C8BD8F2A8/pb
RGMG5s1b3uIxzbkqjSnQvIb6Xa5L84T16rWnXaNL84Bp/EJ8LZ3mzqF+5ciZ
ab4u5RGt/fPee9/Yc2peMW1r7Rpta3xF03jllaVrfY5JfZf61n+Yh3Ga3dY8
Z8qvucdUH7zrv53rwHWtnSI6r2OOOd7WgMZwRvsi36X3ffxY+WitzdX0HBqT
ud9+Pzij5vyRxlTpfJrjUNtJ1u/SY0e56fj4OlZJfVeSem5pPFrk9TTXq3Jo
Os5U47J+8FOfJ/Jd/fsPtO1ZtDah2j3dR2PZtN2c79IaXc15R52r6d+skuPl
ObguH8F3AWQHvgtKBd8FkBx8V/7galKD7wLwEHwXiAbntfAb5/1/LmPq1D82
24caj9Z8l8ZpaNxEfA600047pyTfpTm6tD6Q7qO+Y/WZax2gl15abG/XWBLN
uxj1f5cS6g/X+Iv4viS+S/3R6lt3/TeqxMB1JaNozkt+WTXw1lt/bdjXku/S
2lPNja2UA9Nae/q9OX8Uzd0XzY+oWm/Nd0WhuRM1DlRjmqJ9zdV3c5Gknlvz
XTNm3N/Iy//ttRhpx1hpntZovbG1+S6t9aX2THO+am7EXXftaddAjOZaLMV3
6bXWY7t+7yQJua6JQxZ8iOvyD3wXQHaYujowrK/rXecCxQDfBZAcfFf+4GpS
g+8C8BB8F0TgvDRuYpH9HDzjjPMa7Y+vcdOa79I6Xt2779jodvUb9+ixy1rP
EfddCq2bpXm+jj9+cHDZZVc1GsNxww132DyvuOKGRufQHIStPUfNg6Zzxvcl
8V1a0+yH/uXXS37Mag5cV2kUyXmNGnXpGuM9W/Jd0VyoWvcu2vfss2+GcxVO
ttvN+aOrrrqpkbfRXIJN1+DTeK2474rGQSnk5OKerbn6bi6S1HNrvktjSbU+
WXwtM+Uml3bYYUfa7Wis1h13zGo4RuPH5Lci37Vy5Wp7XrWjej7XXTezkdsr
xXfJmel/BVy/d1oLXJff4LsAsgPfBaWC7wJIDr4rf3A1qcF3AXgIvgviyHlN
Hlb/uc/OS+M0VBODBp1s59NSX67WunnttXft7a35LvXr6v4al6U+2Wisg8Z8
adxWS+eI+y7Ngaj1b6ZPv9vOiXjrrQ/aMRAaL6HbNb/hAQccbM+p9XTU137u
uRfb8WCtzeOltb+Uj56X1t9Rf3QS36W+7WgtsnHjrrGvjdYbizs63wLX1TaK
4rxmzrx/DYfVku+SE9ccpvLa06bdZp202o1u3XYIFiz40B6jWpHn0dyFqll5
LG2rrYnOE62JpTlN58yZZ11ZtK6WalJtg+pccwnKC6ke4+PBmqvv5p5bknpu
zXcphg8fYfO7/PKrbVvVr9/R1oFp7Fn0uijfPn0OCB599EXbJup3HRP5LrUx
2qfXW+eQ65crjB6jFN+lx0ri+1wGrgvwXQDZYerroLC+prnOBYoBvgsgOfiu
/MHVpAbfBeAh+C5oiu/OS2MNxo+/1vZVq99Yc2tpvFc0vqo136XQnFzqR95m
m22DYcPOtP3We+21T8M4j9Z8l/rH99lnP9snHH02K9QnHPmsxYs/C848c5Sd
51D9zb1772v7uONj0ZoLnVv945pPTM/xzjsfTuS7FOrj1/PUfbt23TI49NAj
bP+/67+Zk/eJdV1LPsZ1tY0iOC/5adXgjBn3NexryXcp5s5dZsdnyVWrRrTO
Xvw41ffFF08IDjvsKHu7xkGNHn1Zo/Faql+1DZqXUO2E5kK96KLxDb5LHkjn
Vdui23XO+Piz5uq7pefXWj0n8V3KSa5d+aq9VBt1771PNLqPnJT8/BZbbGHH
rt111yON5jOcNet5+1rE27r4ONukvkuvo/5e8nyu3zstBa4LBL4LIDvwXVAq
+C6A5OC78gdXkxp8F4CH4LugOXx3XpUQ0Viu6Peonz0aN0G4i8h1TRiycLLr
Wi0yRXBe/fsPXGN+U6L8EW/v5K1GjrzIjl9tzd/HQ22jXGM0jrbSAtcFEfgu
gOww9XVweG071XUuUAzwXQDJwXflD64mNfguAA/Bd0FL4LzchcZdaB60U089
O7j66unBxInXBfvvf5AdExEfy0HkH7iu8lLpzuv55xcGO+20c6MxWER54+ab
77GvscaOTZkyw46P1XbTdcxaC3nJsWOvdP58mgtcF8TBdwFkh6mtQ8Jr2+tc
5wLFAN8FkBx8V/7galKD7wLwEHwXrA2cl5uYP/99O0dYz5672znC5L40T9rs
2a87z83nwHVlQ6U7L82np/W0XOdRraF2bfDg4UH37jva9k5rcGltM7WDSc+h
9RU1j6PmV3T9fJoGrguagu8CyA5TV4eG9TXFdS5QDPBdAMnBd+UPriY1+C4A
D8F3QWvgvAgC15U1kfNaXF+ZzuuVV5Y6z4FoOeTGorUNKylwXdAc+C6A7DD1
1S+sr2tc5wLFAN8FkBx8V/7galKD7wLwEHwXJAHnRfgcuK58kPO64pS3Pq9U
50UQpQSuC1oC3wWQHaa+Dg+vba92nQsUA3wXQHLwXfmDq0kNvgvAQ/BdkBSc
F+Fj4LryBedFVEPgumBt4LsAssPU1hHhte1VrnOBYoDvAkgOvit/cDWpwXcB
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
/9FnPvJdZ511VjB16tQflL2nnnoqLLt33nknvguayZnvCtH8iebzvhjp6zXG
1Ms/r8R7yXfNmDEjGDBgQNHv2VZbbRWcf/75+K4awZSn12yZ8vpbANkF3wUQ
H3xX+uBqEoPvAsgh+C7oKPJdb775ZrD55psHF110UYv2gWuuuSb8PZG36kj7
9HPPPfex788HAOmh/l3Dhw8PunfvHsyePbu5Lli6dGmw2267BSeccEKH788f
NmxYk+/PB+VFY6KZ6+x77PnLNyYu9NXXy/muLbbYInj55ZfxXdAmefRdlp+Y
z32R+dzf2e/uG/X19euW+02c79J76C++q7Yxx/kzrmUhCfgugPjgu9IHV5MY
fBdADsF3QUdx4xledtllofN64403wraBRYsWBTvuuGPJ+2rjxGuvvfa2788H
AOkh3zV37txg6623Ds4555zmumDChAnBRhttFDz//PMdrk/Gjh17u+/PB5XB
XGsfbM5f3nNt5w0NDeunnYPzXcrhkEMOCfs347ugNXLsu0LMZ9/WxEr7vf1M
8/OVc/tR36UxCGbNmoXvqlEaGxv/yZUj37lAdsF3AcQH35U+uJrE4LsAcgi+
CzqK813Ob5122mlh24DGI9t0002DV199NXysMcgOOuigYLPNNgt23XXXYMiQ
IYH6hbm2hDFjxgQ777xz6MwOPfTQ4L777tP4iG/5/nwAkB5u/q7x48cHGtdQ
/WQ0Tuq2224bDB06tLm+uOqqq4I99tgjrE80Zqrqm8WLFze7dtUvat9UnHji
iWE9NHPmzFy2KecFc/7yBxOP2HOZz030SvP9o/27VF6vuOKKVn3X448/Hhx2
2GFhGdb6KrPz5s3Dd+WIvPsuoesOEzNd+4P+79q162/Kse2o79J557HHHht6
q1K+S+ek/fv3D5frXFTrP/vss/iuDGC+Sw32uzTLdy6QXfBdAPHBd6UPriYx
+C6AHILvgo7ifJdC85aoD4bclsYju+CCC8Llcldqu9Y8XzfeeGNw5ZVXBrvv
vnvYTq22aT2v8qe+YDfccEP497bbblP7wgu+Px8ApIfzXRq/UD6rX79+wYUX
XthifEP1JdXjSy65JJzT69JLLw0fDxo0KHx+xIgRYX0iB6Y6SU5hzpw5qk8O
9/35oOLoOmagufb+stxt523hfNf2228fjp2m37wnn3yyqO967rnnwvb0Aw88
MLj55pvD30S1sR911FH4rhyB7/pvzD440XpqfVeWm+iedJtR33XXXXeFLvov
f/lLUd+lc1Gdk2633XbBlClTwnPRffbZJ3zc1NSE76pyzHeph/0u3eM7F8gu
+C6A+OC70gdXkxh8F0AOwXdBR4n6ruXLlwf77rtveL+62gjUL0PL1YZw9tln
txgb5oUXXgh/a2699dawTVr/P/roo4Xjx+C7AHKE810K106pfqKXX355uEzj
Uckj/PWvf21RV1x99dXhuuofM3DgwLBdc9myZS3WWbVq1WG+Px+kg73XvynS
dr5tpd8z6rtU3nTfhn771O+w0HepD4kcrdrRXflU+7rWefDBB/FdOQHf1RKN
Q2r2x2y7T741cb5Z/JOObi/qu3TOqTll5Zn1f6HvkuPSevfff3/zd1L9gjfc
cMNg5MiR+K4qx3yXTrb1/QTfuUB2wXcBxAfflT64msTguwByCL4LOkrUdynU
L0tlSeMTuvYCPVYbtdqto6Hluq9dY8ho3DH1+dI9uPgugHwS9V2K/fbbL5zL
S/fe6/F1113X7MCiofpFyzX21MyZM8M2SvWVcWNR4bvyhykP/2Cuwa90befm
uvyCHyVoO2+LQt8ll7XTTjsFw4YN+4Hv0ti/GmczWtbVf1HraCxPfFc+wHf9
kHXWWecXZn+Mc+0R5v8XGxsb1+nItgp9l75nJ5xwQtCzZ8/wfoio73LjGBbO
2yVn3atXL3xXlWOO8aW2zJzqOxfILvgugPjgu9IHV5MYfBdADsF3QUcp9F1P
PPFE+Buie9XdHCV6rLlM1N5QGK4PmP4//vjjw3U1f9cbb7yB7wLIGYW+S22T
GtcwOs+f6oh77723aH3i+nTJee29997huqeffnq4HN+VT0wZ2Mtci79vr8mf
Mdfnv63E+xT6LsU999wTulc5rKjvUh8TlctoWX/77bfDdc477zx8V07Ad5XG
7JfdI9/bj03s395tFPNdur9K8+VpHNyo79L555577vkD36XxcA844AB8V5Vj
jvEMHWfznTrQdy6QXfBdAPHBd6UPriYx+C6AHILvgo7Slu968cUXw8eaa6ew
HaFYaCyZLbfcMjj66KPxXQA5oy3f5cacku9qqy7R+KoTJkwI19d4iPiu/FJf
X99J/UTc+Ibm/z+W+z2K+S7F0KFDm/szO9/Vo0eP4OSTT26xnsbqdPPO4bvy
Ab6rdcy++YOJv7m2CRPjzeK1476+mO9yY+VqrtmNN9642XedccYZ4TgDhb8j
cmDqK4zvqm7Md+h5HefGxsbNfecC2QXfBRAffFf64GoSg+8CyCH4Lugobfku
tRHsuuuu4fhNbkwyhfpbLF26tPnxkiVLmv/XvCdqd8B3AeSLtnzX3//+97C/
TO/evVu0SUbrlmhdotCYcnIL+K58U1dX9zNzTT7NXpt/aeLYcm6/lO9S2VSb
edR3DRkyJPyNi5Zbje2rdR544AF8V07Ad8XixxqjzsTXdl89tt566/1LnBeW
8l3uPFPLne9yY+VqTAK3zjPPPBMuu+yyy/BdVY4pF6t0rBoaGv6371wgu+C7
AOKD70ofXE1i8F0AOQTfBR2lLd+luPXWW8Nl++yzTzB58uSwXU/jw0ycOLF5
zEM5sbFjxwZXXXVV2A547LHH4rsAckZbvksxfPjwsD7RnCrTpk0L+27tsMMO
wZNPPhk+r3pEY6JeffXV4ZhVWnf06NH4LgiR55Lvstfo0+TByrHdUr5L8dhj
j4X9SZzveumll8I+X4cffnhw0003heN0brbZZsGRRx4Ztqvju/IBvis+6rcT
uVZZUl9f36Wt17TmuzS/3s4779zsu3QPlvpd7rLLLsE111wT/rbovHS77bYL
59bDd1UvmqvRlouvfOcC2QbfBRAffFf64GoSg+8CyCH4LugocXyXQu18clyb
bLJJ2H6g/haufVr30B533HHB1ltvHc6ncOKJJwavv/46vgsgZ8TxXWp31HxI
aotUfaK/GjNObZJ6/pZbbgl69uwZzpGkfqXDhg1j/i5ogcYzNCy11+ka5/AP
SbfZmu9SaExf57sU6sd10EEHhd5L8wlpPi83nyW+Kx/gu9pHly5d/s3sr7fs
9cqnjY2Nf2pt/dZ8l0Lz6znfpXj11VfDc9Pu3buHvx86L3Wvw3dVL6YcbGG/
R8/7zgWyDb4LID74rvTB1SQG3wWQQ/Bd0FEKfVc5A98FkC8KfVc5A98FUTQm
mrlGf8Ke+6xoaGhYP8n25LvKVVbxXfkA39V+6urq/ofZZ3fb/fad+Tu01Lry
XWU8H6VtpEox5eB4Wx6u8p0LZBt8F0B88F3pg6tJDL4LIIfgu6Cj4LsAoFzg
uyBl1lYbqT3/WWOu3Xfo6IbwXdBe8F0dZi3tM9dmYeJ2jWlXuBK+Kx+YsjDW
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
xAfflT64msTguwByCL4Lyo09//nYnAu9rzZphVn2jfmrcrbGLXPLfecLANWL
c1uR+FB1iYnvCuqSDzmH9U8WXNf37aLvhNc86hPR1rpq61U7ssbH0rhbCvVl
cM8Xa5cdPvySYNttt2t1u9F27tdfXxbmc+edj4aP3TiGha/Ze+8/h+3L+j+r
vkuRd+eVd9+VNdelkPvRmKZyJupnqX5MWq56QR5G/T+/dzyrm19Tbt+lcRTd
Orff/nC4TGOcOn8vF+Wed05d71nye7j8y2DChKmhm/9+zMCdw9e8+eaKWO+r
fqjyS4X1aJz5u9p672L1qpy/1lEfLj0u9F3qW6vnNdZkNJSjy9l3OWorcF5+
wHcBxAfflT64msTguwByCL4Lyo05B5pl4jv3m1IqXJu173wBoHqJuPI2w6y3
2ne+eWZM33nbjBvQ9EW1uy6F2pHVBurcUalQO7LaYXv02DscI0xtyMce2zvY
ddfdm9cp1Q+hmK+KhsZEVJ8MjU84fvw14fqag0fP9ep1Sjh3TeFr1L9Ec97o
/yz7LoWc1zXnLvokj84rz74ri65L4ebX0/h6+uvm/dNYfKofTjjh5ObvpotK
+q6ZM58Il2nuLPXvUv1xyikDm5+/6qqb7HstKvp51L9KfdT0Om3/ySdfD+f/
0mveeOPtWO/r9onWi267Ld8V572L1avaH+4Y6HGh73L77YEHng33cWG4/Vnt
gfNKH3wXQHzwXemDq0kMvgsgh+C7oNyYc599THn6uq02avP8V+Z86V7f+QJA
9WLqismmrvisLXdu65zjfeebV+S6xg+YV/X9uqKhMQk1Z0x0rK7CUD8CjbHl
+hwozjhjeFl817x574X9RTTWVs+eh4Tbdc9pbhv1Iyt8jRzY0UefEP4v95Vl
36WQ88ij88qr78qq63Kx1177hp5c31e3zI1pqO+yxuSLrp+W74q+Rn1DNXeg
6rbzzru05GfRGIxaX+MeumWaJ7A9vktzDep/Ob/ottvyXXHeu1i9qr5zWkef
VY8LfZcbB1a+y3dZSRo4r3TBdwHEB9+VPriaxOC7AHIIvgsqgTn/eU19t9ro
26X/u/vOFQCqF3NN9a9y4zH6eK3p3Lnzz33nm0ey6LoUN90007YPnxb2j3DL
NUbX3Xf/Lfx/2LCLgx133KnF69QOu8suu7V43BHf5V6r8dCUR3SurhtuuDNc
pn4Pbtnzz8+1Y3lNDB+rL0fhHGFq/82S71Lk0Xnl0Xdl3XUpXB+k0aMnt1gu
D63l6v8ZXV7orWbOfDx8/PjjrzSvoz5h6jPa2uvi+C49J/8tH37mmec2j41a
KjTHVaF7c++jfltx31efXXWY65uqaMt3xXnvYvXqX/5yQ7jO00/PCh9fcMHI
0Ou5/fTqq0vCOQ41f2L0dUuXfua97HQknPOafObC8b6/v7UOvgsgPviu9MHV
JAbfBZBD8F1QCRobG7cx50DflmqbNudJX5p4zHeeAFD9mLrkYlNffNGKP1d9
0t93nnkkq65LoTG15IxUhuSN1EdB/SHUd2vrrbcJ20jdXDWXXTY+uPfep8J2
ZPXvUJ+v+fM/KNkuG9d33XLLA+H2NWbi6tX/7QHUfqsx0uTVpk27NbjuutuD
3XbbI9h++x3CfmFax/Vl0LiI6mMiD6a5arLmuxR5c15581214LoUjz32cvj9
evHFphbLR4wYG3px1SnR5YXeSn2XVHeovnn44RfCZerX6cboc86oI76rd+8+
Yd8ujbuquOuux1r0Sy2M2bNXheOpnnzygOCee54M33PLLbcKt+lcWZz3nT79
nvCx6kDNaXbNNTOCP/1pn1Z9V5z3Vr2qPnPaL/L/cvl63Lfv4ObtuD5hWtd5
MtXhWqaxalVvyk3q2KiO9F1+OhKh87p06ec4r8qC7wKID74rfXA1icF3AeQQ
fBdUCnMu9HyxPl5u3q6GhoZuvnMEgOpn/fXX/2dTZ3zdSl/Rd+jblT5Zdl0u
1J48YcLU5nHKNIZgnz6Dwr5Ubh2NUablcmBDhpwVtptqDDLXzyqJ71J7tGvr
Lnxu1qzloY/r3n3LsA/D8cef1KI/hHLX+2g8L72X2s3V7p5F36XIk/PKk++q
FdelUD/Qgw8+/AfLn3tuTnD66cN+sLzQWynUr1R9ovTd1WP5a33P9R1evPjj
oq+L450mTbourCuiv4/yQ3q/Up/njjseCf3+5ptvHvYLU90mb3bUUcfHfl+F
PJd8vLajsR5PPfXsVn1XnPdWvXrppeOCI488Lqz/dE+A+tctX/5l8zZ0j4D2
o56T39MyOUfdA6B8VKfrPc4++8Lm+wSyGDivyoPvAogPvit9cDWJwXcB5BB8
F1QKcy7UQ+OQFevbZZbf4js/AMgOpu6YUDiPl3VdmrfrSN/55Y1acF3VEG6M
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
2g++CyA++K70wdUkBt8FkEPwXQRBFAa+C8rBOecEPxk3oOnF+65d/bHvMt1a
yFlMH7Xsw7H95+X2um1sn7k71qrrUvz97wvCaxz5KD1Wny+1744Zc1X4WO21
6vcwZ87qFq8bMOC00G/pf/kubePJJ19vsU6x8QxnznwiXHb55Ve2KGfu/6VL
Pwv7UIwYMbZ5WbHxDMeNm9Lsuwo/09Spt4Tt3s89Nyf2Z6i1yKrzyqrvwnWl
F8XGM3z55YVhfSBv5ZapXtEcf0cddXyr22ur/lF9KFcffc2ZZ54X1ikLFnzY
7LtUt7nn5djls3r2PDh8XMx3TZgwNfT/Cxd+f72mv9rmlCnTve/jWg7nvCYP
XXCZ73ojC+C7AOKD70ofXE1i8F0AOQTfRRBEYeC7oByMGzjvnJsuXbYm2s5W
rbFyxbfBVWct/HBMn6YDfO+3tJHrGtd/3le16rpcHH740eF4XfpfY/ypzXXu
3HfDx278MLXLRkP9GzQWotaR71IfscLtlpq/a7fd9giOPPK45sdqLz7xxH7h
OGRuLLLTTx/W/Hx7fJfGStxyy61atFfH+Qy1GFl0Xln0XaP7zuuL60ovivku
OW6VG9Ul0eVnn31hOH5pa9trq/4p5rvuuOOR8P3Un7WY71Kce+6IYMMNNwxW
rPiqqO+aM+ed0Mu7Zddff0f4WOv63se1HnJeN1229LO/nLHgfN/1R7WD7wKI
D74rfXA1icF3AeQQfBdBEIWB74KkjOq76A/jB83/9O2l2Wkbnf/Wl8GEQfPe
G33yvJ/73n9pkRfXpdD8V3I/an/t3btPizG2NL6W2oDVf6IwXnttabiOm7+r
cLulfJfG6zrggIPC/x966Pmwffm4404M7rvv6eCJJ14177dT6Kjc+u3xXdqO
5tBRP7X2fIZajaw5r6z5ru/7dS1as3xZdurzrEcx36W+Uio3hX04Nc/W93XQ
J0W3Faf+Kea7NG6htivvVcp3aVxFLVe/rWK+S9GrV5/g4IMPD/8/4YSTw/C9
f/MSq1eG/bw+wXm1Dr4LID74rvTB1SQG3wWQQ/BdBEEUBr4LkjJuQNPNj936
3ue+y3J74/aJKz4e22/eMN/7Lw3y5LoUckPq56R5adS/QG257rkBA04Pl0X9
UWG013f16LFX6KD0v/p5adyvqLfSGGQd8V3XXntbuOyRR15qsW6cz1DLkSXn
lSXfxRiGfkJ1wd57/7nFsunT7w2/+y+8MK/Fcs3TJ5+lefyKbStO/VPMd+ke
Ab3f00/PKum7NA+i6/dayne5fmJ/+9trYZ7aru/9m6fAebUNvgsgPviu9MHV
JAbfBZBD8F1ENUaxuUrymIOvwHdBEsb1Xvj7CYPnf6o2Ft9lub2xZMHXwfgB
8z6evl+wtu/9WEny5rpcuLG31PYbXX7ddbeH10CTJl3XYrnmuXH/t8d3ubbh
iROnhY/33Xf/cB4t9/zy5V+G2xo8eGjzMs2B48ZbbK6LC3zXW2+tDNulzzrr
gh/kEecz1HpkxXllxXfhuvyFxhqUn9ccWW6Z+mmq/lK94JapLlG/ziOPPLbk
tuLUP4W+S+MQa06wrbfeJqxDivmuRYvWhM+7ekv9y7SOmxfRheqv7bbbPnRs
cmOF9wYQlQ/nvCadumC473qlGsF3AcQH35U+uJrE4LsAckiefJeuwzSWR6Wu
JUrd15hm6JpS95QX3qP55JOvt/ue71L3ckbj1lsfDNfReEnl+gwPPvhcMHbs
1WXZVrH7VeOG2jbL+bmyFPguSMKYvk0nP3DDOx/GLW+u7iwWGhMuSVl2fWHa
M1fIzZcvW3nFKU27+N6PlSKvrkvx0kvzw/IgRxVdrrlnDjrosHC8w+HDLwlu
uOHO4LzzLg123XX3YNmyz8N12vJdmhvnxhvvCkaNmhRsu+12wR579GgeX0zb
1Pw6clJ33vlocMQRx4T9HDTeoZvfTv0ktJ3zz78szCesiwt8V69ep4Tt3ePH
XxOea7jQb3ycz5CHyILzyoLvwnX5DdUlKiPqu6X/Z858PFx+2mnnhPPyjR49
OZgx477QSalO0JiFpbYVp/7R+fLOO+8aTJx4bVinaLt6f42hqOfdNcEhhxwR
ziOm9eSvVN+o35Z7Ly2Tp9M60Rw0x5heX9iHlUgv5Lyuu3DJxzivH4LvAogP
vit9cDWJwXcB5JA8+a5p024N67hKzWNRDb5LY5movWvkyAnNy9Tm1d72XoUP
3zVv3nvhfaq6h70c20viux599O/hPbF57OeF74IkTBjU9PybL8XvU+LqzmOO
6RVcccVfWoTa+ZKU5Y74LvO78vX4gU1Tfe/HSjCmb9N2eXVdLtQXQXPNFC5f
vPjjsN+U+iGoPVn1v3yT+w1ozXepDXfgwDPCdl797uhx9HdM2+7bd3DYt0Ft
yirbd931WDiHjmun1u/fKacMDF+v9cO6OOK7br/94ZJe+OKLR8f6DHmJande
1e67cF3+Q/26hg27ONhyy63CekLjsGq57l2Tx1Zd5JzV3Xf/rdVtxal/VO9o
jq0///mAsO6Qt3L9UxXumkBzb+222x7hOj17HhLcc8+TLd7rqafeCLdz6KFH
tlju/J3e1/e+zXOsWoHzKga+CyA++K70wdUkBt8FkEPy5LvkgTbbbLPwOq8S
1xDV4LuKhfLJiu/SWFOa17pcnz2J71Loel/t5ZU+Ru7+2mrZLr4LOsrIfkv/
eeyAeV++szp+eXN1ZyXq5o74Lo1pOK5/7Y1pOO6U+d3HD2z6PM+ui8hPhM7r
3EUfjh84f4jv714h1ey7cF35jLbOl+NcE7QWkyffGI596PquEv7COa+Jg+af
5bu+qRbwXQDxwXelD64mMfgugBySF9+luZ11H6TGGerRY++i13BDhpwVPufu
ida80O1Zp9B3aXwPPS6879K1v86atbxorroXW/df6j5MjeWl8f20/NJLx4Xv
G11Xc0hrW/fe+1TwxhtvN9/rrXX1vOvbFQ0t03OPPfZyOL6j3keh+ayffvrN
H3zmQYPODOc6kSvUOCbq9+TWKeW7Hn74hfD+Tr1GYylp/JU5c95p9Rjp/nNd
C1999c3NyzQGk+bT1j3zipNO6t+837RvCsen1L2oyseN3ajrd93Lr3U333zz
8NgVjrHSWuh+fn0O99iNWyUvp35o2qbGfInuN93Tr3Ki++tV5lROZsy4t8V2
99lnv/D+f7Xvaz3tf91/q7Ki9bVdzVN+1VU3Nb9Gx/fkkweYdbuHr9Fn1/GP
5qr7fTXmjca0VJ4qOy+/vCjM0d3XO3To+S3mgyhaBvFd0EHG9Jm389TzFr/f
nraXOL5L3z19F2+55YHmOUAOP/zoH9Q9qre0XHXP7rvvGRx//Ekd8v3jBzV9
PuakRf/he3+Wi7F95m4yfmDTp+3pd0cQWY9qdV7V6rtwXfmNSvkuXWtoTEad
D19++ZXePyfxfch5XXvB4o9wXt+D7wKID74rfXA1icF3AeSQvPgujf2hfkOv
v74srOc03kbhNZzGs5enuf/+Z0KvoGXyOXHXKda/S56oX78hLXJR+2upOWnk
J7QNjYt08813h3811r6ea8t3yQ1pXV1TOt+l8ZF0/eq8m647tUzPafv6PPJr
Gp9f45Nsv/0OzfN8uM+8//4Hho5I84XI8Wj7bqz+Yr5Ln0HraK7t6dPvCe/p
1Dwm2hetzSFy331Ph9t6+OEXm5dddtn45nZweUK1Y7t267i+S59Jn2/KlOlh
e7menzTpuljlxvWNe/PNFeFj57vkjDRfisaXkp/SvAjyUVpHZUyfVWNK6rNr
DvHCMiffpdx69+4b7ssHHng2nL9bnkvjw2i/aXwqN36NXKH2vY6X5l+4/vo7
Qj+pNv0XX2wK15Hv0mONRaPtqSyof5f2mfyYxvPUfAtx+s/hu6CjjOnTdMDN
ly/rkO+68MLLQ1/sYvnyL5vXcd+9Aw88tLkOVp2lfrtuHdVDGvtJ9Y3WlzvX
978jvmvymQs+Gtd3bqPv/VkO5LomDGpaM/uV/MzhRBAuqnFsw2r0XbiufEel
fJfO43VOrPPhSo1lQHQscF7/Db4LID74rvTB1SQG3wWQQ/LguzR2htr73Tww
8hPqn9PaNZz6v+j6rGfPg2OvU8x3ybPIUbm5QvRXLkjupViuru/XE0+8+oPn
2vJdbpnWcb5LUWo8w8LrTrUhaz21I5f6zHPmrA7bk9VfSI+L+S71S9KcA9Ft
63mtd8cdj5Q8TnI7UbekUN8y9WcqNvdIXN8VvX7X/GZyXvJTS5e23c/BObib
bpoZPnZt7nJTbh3lq2N6wQUji+5bvY881ogRY5uXyXepTEZz0Lxy2vbYsVf/
IA/N8y3vGN0P+l9951xZlu/S6+Xhoq9Vn67C/dRW4Lugo4zuM/f4Oyev/Lg9
5c3VnYUhb+vWcd+9uXPfbV4mb61lCxZ8GD6WP1Yf0aam99us/9qKay9Y/P7o
fvO29r0/k3LFKU1/nDC46cM5r+K6iPzG985r0UfV0s+r2nyXXOCU4YvWLF+G
6yKIPMVK67wmDZ5/tu96yCf4LoD44LvSB1eTGHwXQA7Jg+/S+FfyEYsWrQkf
yzvonn/nDkrdsyiPsOGGG4a+LM46xXyX+uVsvPHGzcvUL0ePS7W9an2N26f+
CYXjIJbbdynkn+SN9J5yJ1G3U+oza3xBfQbtv0LfpbEG9Vj7W3lEQ8t1f2ep
4yS3pXWcG1Toc2n/Hn30CeGYlNH1O+K7FG7ObNePTP2yXBQ6MPWH07pjxlwV
Pi7muxTqUxXts6d9d+KJ/cI+Wa5PnPq7ueflu3r3btnPSo5M83trnDbtp2jf
FvVj2WijjYru01NOGRiuI9+l1xbuV+cR5SBd3762At8FHWV033m97p22+pv2
tLe4ulN1gOobF9E6q9h3T/0rtUx1g/qO6nsWvZdB0ZH5uxQ3XbZszeh+83fw
vT+TMrb/vLHXnLvoC/psEHmPe69dHYwb2LR0yhELf+H7e+l8l4nhvnMR4wc2
Lbp7yirvx4ggiPTjgRve0RjOK/J83m/q5JNt+/3lvnMBqHac7zIx3XcueQFX
kxh8F0AOyYPvkhM54YSTQz+jePzxV8K67p57ngyfL+V1Ro2a2Oxf4qxTzHcp
NH6cmwNKeShay1fuSOtoW3Ios2d/3wZRbt+lMQK1XGM9yus4d+Xm9yr1mbVt
Ldd8U4W+S32LnB/SssLQa0p9bveZC8c81GeTH9JzmgPAecqO+i71GdE6d931
WPg42p9kxoz7Cvbvm+Fy13erlO/SmIVyXvr/oYeeD9vdlZv6h6mv3o477hR6
Qre+m7+rcB9o/6gvl14v//jIIy+FyzVOoeYuK7ZP3bxobv6uwm3KoylvN09Y
dH60UoHvgo4yps/cff86ZtmH7WlriTt/V+F3T3WTlqmucv0jtV70dR31XVPO
WfjR6P4LGnzvz6QEPwrWmji46eap5y3+bOVyxpIi8hn3TFv9zYTBTcsv77Pg
d76/k8LUSUOryXdNGjDnf00Y1LR05pRV37z7jv/jRRBEOnH/De98O35Q0+oJ
/eb8b9/1kE9c/y58F0DbRHzXDN+55AVcTWLwXQA5pNZ9l/obqX9QsbGyNDeW
1inldc44Y3hzf5k465TyXepDpeWap0keQ/NmxbkGkTfR2IHHHNMrfKwx8JP4
rugYX/JBGmNP/sgt03w5cXyXXqPPLI9S6LtefnlR+Dj6/nFDxyM6Nlk0NHak
G7ts9OjJ4TLNS9UR3zVjxr0txv3TPFcunFt04fp3ufcs5bv23PNPzf21NK/W
Xnvt22LsQT0fx3e50Bxg8mfKX++lPmKl5nxzUcp3uViy5JNgwIDTw/z1uVrb
Fr4LOsq4U+Z3n3b+4g/a890vh+9S+db/bs47Fx31XRMGz/+sWtrGkyLnNWFg
0zXTzl/ysebraG/dTBBZDvU3HT+o6e1RfRf9wfd30WHqpLNUL3Xr1m2Y71wc
OC8iC1FsfPOOrEMEwX3Xv/MNrut7Nthgg77Wd43ynQtAtYPvSh9cTWLwXQA5
pNZ9l/pfyTGpT5fckAvnbNR2WszraOxDzQNz7LG9w8dx1nHtrW7su+h1l/rW
yHm492wt5+g4dnJAGmtQ/2uMu0If5HxTa75L4xNqneeem9O8zLUvT5361+Zl
7jNed93tJT+z+l7JvTi3M3Pm4+E62r96LAemfklaJzo2oPaBxnxs7XOrD5W2
Je9WbF8odtppl+bx+/TX9aly4eawas13nXzygHCfFm67WGguM21PbeZ6XKzN
XeMiRo+75ocbMOC0Fp9BHmrw4KHNy0r5Lpe3wrXTa6w2vVb/q79ZdP3oPi7l
u6LbfPXVJW2OK6nAd0FHueKU+f/5lzMWrGlPm0s5fJce9+ixV1jPRuuaDvmu
d4JgTN9538kT+d6f5WTcwKaJ11+0+KPVq2rDeWk+xmLuXn1hDzjgYO/5VSL0
e6DzDt2fUYntu9+Iwr7OWY1q69fl2GCDDc62bavn+M4lSrPzunrVV7XqvIqV
cd2P1LPnIS3W0zmz7qvSebu776y15b5D9/dpXG7feUTD/f66cQjiRGv3gz34
4HNF57gtjKlTbwmvj3x//moOuS7zXV+J6/oeUxf3s3XySN+5AFQ75ruyH+MZ
pguuJjH4LoAcUsu+y7mXYtejDz/8QvNcVc7rHHLIEeE10sSJ14ZtppovSX2y
tH6cdRRaJpeidaLvpzHq9PrW+vQonnrqjTDnCROmhv2ytC3Xh+nvf18Q9lXT
HDfyHpqHSn6jLd+lcb4035bG3NNrnOOSK9p77z+H7WZavvvue4afR+MbRj+z
1tM1q/pX6X9t33kXXVvrNVqufaplrj+bvM+UKdNDt6K2x8JxxgqjsN+VQvtB
/ZqU88iRE8Ln3bWu9rEe61g888xbodt0c1pFfZdco/p9aX/27t03fD7OmH4K
9XWLukLX5i4PqefU56579y3D8QrlO7XO8OGXhMvkDbVvjzjimNC5HnDAQWGZ
1DrFrufVRq9jf+GFl4fHQ+srfzlGHUOVBYW8mo5Hnz6DwnZd9/pSvkvjaSpf
bbNfvyEt/GSpwHdBR5m+X7D2uP5Nn769NP58Uc53qa6W84rGbbc91OK715rv
mj79nvCx6ht9x/Wd/9Of9mm375r9yufBpFPnz/G9LyvBhEHzR1530ZL3asF5
qY1adWnh8lr2XepLrd/qwvk9yxW15Luq1XUJeS7btnq271wKkfMaP7Bpca06
r2JlXOdtRx11fPNjdz6m80+Nfa5xqVtb7jt0jqjrg2pzPOX0XZp/VvfSRe+J
KxUaG1z3x2m/+N4H1Ri4rh/SrVu3/rY95DLfuQBUO/iu9MHVJAbfBZBDatl3
vfTS/JJ9WdTfSE5CLsl5Hc0ftdtue4TORPd5uvm9FHHWUchXaa6uQw89ssVy
uYY/RuaMKhXPPz83OP74k8L7t+U61G4XvbaTn5NT01iEyt1ttzXfpbj++jtC
J6Ntumt67Z8DDzw0XF9uSp5Kzkjr6Jpen1nj8skz6fpe7yl3U+hKlJP6VUT7
UaktTu2N8jzyTeqLJSfV2mdXe7Su19Vm7ZbdfvvD4X7WfbS6zj333BHN45To
r95Tjkc5a2zJESPGtvBd+szyYc7T6fO4/mtxQvtR7+seuzZ3eaPv58PqHvZ1
c+M5KnSd3bfv4DDnnXfeNWyz13FXLhqjUusUu57XHHCnnXZO+H56rcpRtO+C
3kPvpef0vjoW0baNUr5L768yoznA9HfatFvb/Nz4LkjCxMFNNz37wEdfx/2e
Od9VLOR1o9+91nyXQp5LdbTqK9UdciLt9V33Xbf607H9ms70vR8rxfiBTSNq
wXmpDvXtu9w9DNUUSXKqFd9Vza5LaBxDW8ed5TuXYtSy84pTxt05f6HPKrW8
I1HOukPnh8qrln2Xzv91/1bc7eiawI1bX+6oxno/buC6ioPvAogPvit9cDWJ
wXcB5JBa9l1xo9Q8Ve1dp7WQc5PDamtMv7yHrmWHDj3fex4uNGZNdD6gUvN3
1VrguyAJV/Sb96frL17yru9y3NGYOGT+p+P6zv0v3/uxkmTdeTmPGQ03lpd8
V8+eBwejRk0K7zPQvQnqY104hq36/7l7AXQvhO4NiI7/Whhu/GD121X/Dt3P
oT6+ek79cNU3evvtdwjvpZFr/etf72/xes3LKH+r+zO0nu7XUL9rN+enttna
nJSuv7HigQeeDZ93rljrqW1X90PodytuTprX8/vXdQ/3k+sDnGXfVe2uS5h9
PNwey6G+cylFrTivtsq47ufSYzdHquqBaL2y7bbbtbo8znctSd2h807d/3TL
LQ80j4uu77i7z0r1XmFdGJ0vtjC0Pb1e9z6pD5TuBTvooMPCOkWvi9ZPGjPW
vU7OSnPA6nnloLpK46tGt61rJW1bdar6oer+vULfpbEg9Hm0jva97vOKPl/M
d+n+Nl1DRcdm0HzBun/P3VumawfN9Rvd59rPugettfLR1udy95Jp/Hbd26fP
o/f2Xa47Eg/d/O7XuK7imOM6wH5/LvWdC0C1s8EGG+xv+6jf7DuXvICrSQy+
CyCH4Lsq67vUP0dzhema6/LLr/R+rVPt8eKLTeF1a5y5tSods2evCttGNE+b
W4bvAmgbjWk4fmDT8qZZpd1BtcaLj3381YSBTU/73odpkGXn9cori4Ojjz4h
bFPV76zC/W7Id6meVrur+h+ff/5lP5gfTi5Mbcvqwzt9+r1hP2Y9js6zWBiu
zVptxOpbrXZb/U6ojVW57LFHj/A3QmPz6ndf67r+xHPnvhv23VWb6ujRk8O8
TjyxX7hOXN/15psrgvHjrynqu7Rd9W/WeMAabzhOTtpf++3XM2zj1edXP3C1
tWfZd2XBdQmzj8/Vfu7WrVtV9yPNuvOKU8Y1T6vGj3a+Sy5D5+taR983N45D
qeVxvmtJ6g533qnxGPQ65as+zHJU7jO68cBVx6kuVP1Yap+47ckVqZ+a3Jrq
Pi2TM1L94T6nm7tWTk73BMiDaSzxm2++OxwXInqOLP+25ZZbNX8WuSmtH/Vd
mn9L10Onnz4sHMtB9wJqfW1b76F1ivmu++57OtyO5st1y1S/6/3l7TSOQ2Hf
L40Br9eori21L+J8LvkuuTmNE6F6V84yi/27cF2tY8rKQNt+P8J3LgDVDr4r
fXA1icF3AeQQfFdlfZfu39S1lK7psnh95CN0naxrV995qD9A4fHGdwHEY0yf
eftNPW/xB77LcntC3mfikPmfXHFKUxff+y8tsuy8WhvPUP0gon0T1M9A7Zj6
f86c1WGbq5sbzoXmiVT9rrFli72fa7MeN27KD5Zre9pudPmAAaeFbaT6/4IL
Rv5gfkrnquL6Lj3WfKHFfJc+X3tz0u9sdFsKNy5aFn1XVlyX2GCDDc6zbUVn
+M6lLbLsvOKWcX3vnO9SaH2tE52ft9TyON+1JHWHO++UM3fPaz5dLVuw4MMW
nynOeIZue+r35papX5ccT/Q6RR5Keeh/N1+uG5NbMWvW8nAMcncvn+bHVR+s
6HZVt0V9l+YMHjbs4hb5uNw1proeF/NdGmdB68j5u2W6N66wvoyGPKBeI7dW
ap04n0u+q7DuzlrgutrG1MWDbJ18ie9cAKod8z05wH5fbvKdS17A1SQG3wWQ
Q/BdRDVG4bV/XnPwFfguKAfjBzW98fjt73svz3Hj9itXfDVx0PzcjUWfVefV
nvm7NDaX+kDpfzfvpcbxiobanbW8cIwuF67N+umnZ7VY7sZWLNzeRhttFGyz
zbbhOupjUphTOX2X1mtvTno/16buIqvzd2XJdYkNNtjgfNtWdLrvXOIw+uR5
vx0/aP6Cu+W8quB4x424ZTyJ74rzXUtSdxS7z0pz20brqo74ruj21K9Lfc+i
62mO2GOO6RX+78b7K9yW/JU8l/pJqf7UHFvR56Pzd8kj6X+tV/h5tdzNtVzM
dw0adOYP7kVwDkz+bN6894p+Vr3Xscf2Lrkv2vpc+l++S/0DfZfljgauKx74
LoD44LvSB1eTGHwXQA7BdxEEURj4LigH4/o1dR43sOmzl//W+vwZ1RCP3/7+
dxMGNa2YNGT+r33vNx9k0Xm1x3ddfPHo5jZL9bFwzkjtxIWhuWKKvZ9rs3bz
5rhQ3yqNVVhsW6+9tjRcZ5dddgvzir6unL7LbSNpTln0XaHrGtS0NCuuS2TN
d4mwn1fGnFfcMp7Ed8X5riWpO4r5KY09oGUae0KPK+G7NLegxlrU/716nRLO
XVW4LY0pqLkSlau2qW1Hn4/6LvWP0v9jxlxV9PO6ebaK+a4TTjg5fK0b81Ch
vmh6P/VLU90endvLheZsU36l9kVbn0v/u/m7fJfljsRD03FdcTF18WBbJ1/s
OxeAagfflT64msTguwD+f/bOA1yK6vz/FI2aGJPoP/0mIcnND3Ivd8u1K/be
u9jFLjZEiihFRcUOIgiIBbvG3mtsUaOxY0W9IIj0YK+g7v99hzM3w7rAvXd2
553Z+Xye531my+zud3fnnDnnfOe8J4XgdxEEURz4XVAuLjr23XXG9Gv6+u1X
47uWl/pxY/s3fTbi+Pc6Wf9eliTN89IxUb0Ov/jxZfldfg6rYI6zlsSSxqx1
jsBaa63V7EmVin33PdBbfyf4WLFXpWOs5fK7WqJJx3P326/HYo8lze/yvS71
YqzLT2vI5/PDXNv7JGstrcH3vJKS27Clx3gYv6slZS1M3REHv2vQoDOa55sF
Q70i3ef99z/33lPnXAWfD/pduv6Z3tY1E5emr5Tf1bfvwMXyNwZDP1t/R31e
1y4LPqe/rT9HrVQs63vp7aT6XQ/fOA+vqxVInXyiq5PPttYCEHekvOzl/K4b
rLWkBbya0OB3AaQQ/C6CIIoDvwvKydi+TbuM6de08OWn4jfP6+l7PyqoHzfy
uKbVrX+nOOB7XnNmx9/z0nVZdKxy7tzvFnt8WX6Xjnfr+ixHH917sX2mT/9y
qZ+3pDHra6+9w3tc19RZ0vv5a8A888xbzY8Ve1XHHdf3B7nX/Ne11u9qiaZB
g073xoN1HNp/LEl+V1K9LkV+47Nc23uAtZbWMqbntF8kxfNq6TEexu9qSVkL
U3e0xO/Sda30/qWXXr/M36Qtftf119/1gzWsnnvuHe+xESPGeffVI9J1E2fN
WtC8T9Dv0vlY22yznTefLfj9dD5t8DXqURbnIPTXP3zrrdnNjwU9Qv8/9XMi
+u+rj6lXtqTfoiXfK4l+F15X69FrD/R/12sRrLUAxB38rujBqwkNfhdACsHv
IgiiOPC7oNxcdOy7+TF9mz59/Pb531sf3xpz535fuGv87IXjBkz+YHSfKX+y
/n3ihHpeV5857cO4e17+Olw6pq2377nnCe/xZfldGmeccb73Wl2jRcecL7ro
ssIWW2y5mB9VHEsas9ax2n32OcBbc2fo0HO9MVR9fx3b9fNv6do16667rufP
6WfpPjqHIehV+fPOxo27xtOh463+2jat9btaoklzkOn761iu5njU31DH/ZPg
dyXZ61I0Z5YbK+pvraUtJMXzaukxHsbvaklZC1N3tMTvUi9p++139PI3qsc0
ZsyVS5wz1ha/S72jHXfcxXv/q6++zaszt912+8Jmm23evHbWTTfd572v1r2a
W1DrpJ122rXZ79J97rzzUe/+brvtWZgw4SbPn9L9g3kQBw4c6u1z5pkXNPtg
N998/w98qZ49e3lelv6nvXuf6D3/xBOvND//+uszlukBtuR7Jc3vwutqG5pb
1tXJZ1prAYg7+F3Rg1cTGvwugBSC30UQRHHgd0ElGHH81N+O6df05oTTpn70
0pOfFeYZjJNqrr5nH/z4u/EnT/50bL/Jj3CclyYJnpfO6zrttHMKG2ywoedV
+bm0WuJ36fiw+ko6trn22mt748unnHJW8xhnqVjSmLWGrj0zZMgwby0ZHV/X
8VwdXw+uBfbYYy95eQ31edWr89OCXpXuO2zYCG9sdcMNN/LGfc87b3Sb/K6W
anrkkee9+RT6vM7NOOusC2Pvd9131dwFSfa6FPmNL3BzCU6w1tJWkuJ5teQY
D+N3taSshak7WuJ3aTz99OteLkCt53beeTfPYy/1e7TF79LQ99M5qN26beB9
hq49Vvx91OfSOnW99daT33y/woABpyzmd2nce++TXv2s9a5+Z33P4HUGWgfr
Y1oH+mt6aT2nc3LVU/P3GznyUu//1OsIdKt+Van/Kji3r1Qs63slye/C62o7
UhcPcuMhp1trAYg7Ul72duXlemstaQGvJjT4XQApBL+LIIjiwO+CSnLR8e/0
GN2nafplg977/Ik75hcmv/VNxY/ptyd+VXj4hnkLxg2Y/OWYvk2vjTq+aWfr
3yHuJMHzSnIszasiSod6XXJcTkuy16U0NjZe6Nrevay1hCEpnheR/ND5XOrL
tXT/4cPHetcXWOuOKvC6wiF18WBXJw+11gIQd/C7ogevJjT4XQApJOl+131X
zSm89MRnBEGUMUb3bvoWvwsqzejjJm87pk/TDRef8O5nlw+e8unt42Z9pv6X
zv1688UvQ8ULj31aeOTm/xZuGz3zk/EnTfl8bP+mORf3effii4+b3M36eycJ
PK/KBX5X66JavC6lsbFxlMsFdIy1lrDgeRFRxAsvNBW22mqbwsyZy74+Ruf+
7rLL7oVHH33RXHcUgdcVHqmLT3F18qnWWgDijpSVfdz44XXWWtICXk1o8LsA
UkiS/a6LT2g64pIBk+8h4h9nHv3Pqacdec9/R/V77XFrLcSyQ/rNt1107Lsr
WJdxSA+je72z9qhe7x4icdb4kyY/dMlJU14JFXIcjzq+aejI49/d/6ITpmSt
v18SkXbBj3O53MYDD771iQmnN32D51XewO9qeVST16XI/z7Gtb17WmspB3he
RBShuRg1D+2y9tO8h35+22oPvK7ykM/nT3N18hBrLQBxB78revBqQoPfBZBC
kux3QXKQ4+s/7jhb21oLAAD8kGw2+3/5fP4ANxb/ssS3ft/gqO4jC1cPm/op
nhcRdVSb16U0NjZe4uYSHG6tpVzgeRFRxKuvTi/LPtUQntfVv2kmXld4NI+h
a+8MttYCEHfwu6IHryY0+F0AKQS/C6IAvwsAID7U1tauksvlttCxncbGxvsk
PvT7AcGQx6dqf1a2R48+YdLIa4ZN+wTPi4gqqtHrUqRMXablK5/PH2KtpZzg
eRFENOF7XRf2mvJr63JfDUgb5wzX5hlorQUg7kg52deVl2uttaQFvJrQ4HcB
pBD8LogC/C4AAFtyudyaul6QxBulvC3Xd31BYrjEnnV1db8pfo8xfSdfgOdF
RBHV6nUpUr4muPLWw1pLucHzIojKBl5X+ZG6+ExXJ59srQUg7uB3RQ9eTWjw
uwBSCH4XRAF+FwBAdGQymZp8Pr+71LnnSzwl8WUJb+sjN7droK7TVVNTs1JL
3tv3vGbPxPMiKhOe19Vv8pRq9LoUKXNXu/ld+1trqQR4XgRRmXjohnnf4HWV
H6mPz3JtowHWWgDijrRh9nP9iGustaQFvJrQ4HcBpBD8LogC/C4AgMohfc4N
pH7tK3G73J67hPlbL8pzo2R7lGwzYT5PPa+rzpj6aTV7Xsccc0Khe/d9zXUs
K+6889HCzjvvVlhvvfUKO+64c+Hmmx8w1xQmfK9LPZNylY+4oTlCXZncx1pL
pcDz+l9MnPi+Vwe3pmyeeurZhc0338Jcu1XMmfNt4fHHX67450yf/mXh+OP7
FzbddLPCBhts6N2ePPkj8+9fKtTrurjvuzPwusqPtInOdeP3/ay1AMQdvVbH
lZerrbWkBbya0OB3AaQQ/C6IAvwuAIDyIP3LWr22UmK05h+UenVhiblbH0jc
4jywbp06dVqx3Dqq3fNKit/1z38+V7j44gmF++57qtC794mFNddcs/DSS1PM
dbUl1Osa3fetGeuvvckb+Xz+tGw2my/3cRsHpGz+w5XTPa21VBI8r0WB39X6
GDDglMKuu+4RyWcNGza8cNddjxWuvfaOwkYbbVzo0+dk8+9fHHhdlcXNhddy
2sdaC0Dcwe+KHrya0OB3AaQQ/C6IAvwuAIDWU1dXt7L0KzeXGCT15z2Bc3Yw
vnI5C8/XHIaayzAqfdXseVn6Xa++Or0wb17rf9M335zlHRO33PKg+e/X2vDn
dW247lYjirzbqRIXyrG9kRxyHaM6tiuJzsN0320Xay2VBs8reX5XW+qecscJ
Jwwom9/Vmu9z0kmnevNlrb9/MPC6Ko+uW+rq5N7WWgDijrTHDnBttKustaQF
vJrQ4HcBpBD8LogC/C4AgGWibfGGxsbGwyQul3hD4rsS/tZkzYcmzx0jfc41
5PbylqKT7HmpP9Sv3yAvl9U666xT2GefAwq33vqQ95z6XXvttW9hxIhLClts
saW3zymnnFWYOfOb5tdfd92d3j5rr712YeONN/HmBTQ1fdj8/Pjx1xX23fdA
7z132GGnwvrrr1848MBDCi+//F7zPrNmLSicffbIwpZbbu3l0zrqqOPl87Yq
XHnlzc37PPLI8977rLvuuoVtttnOG5N9++15P/g+N9xwt3eMBN8/CRHMYdjQ
0PALvXZYju9bJT4vOvbnyWNXyPM7VmLOYlQ471rHVre31hIF+r+O7d/0Tpw8
r2efnVTo1m2Dwr33PlnYfffuXhnWMqplevToKwpbb72t97zWA8EyPXv2wsK5
547yyqi+Zo899vLmBgXfW/fv23eglPduXr2h8y6L/a7XX59ROPbYPs37HH74
0YV///uN5udb4nfpd9D3PfHEIYUdd9zFq8N2223Pwk033d+8j9ZX5503urDd
djsU1lprLe97nX/+xV6+QH8f9ZXUXxo58lJPi9ZT06Z95uUTVF16X+Oggw4X
jW+G/g01tH7TfbVOU39JP3vGjK+953RuV/F5T3+vlrxWcxHq/uPGXe3+g0V1
rj6n82C32mob77EDDji48PDD/1lMk/63+jvGaX4XXlc0yDEz0h1rx1lrAYg7
Uk4OdOXlSmstaQGvJjT4XQApBL8LogC/CwBgcerr61dtbGzcQeJMiUekfvy0
hLf1qT7n9tkhn8//0lp3KZLoealfpGPWm222eWHs2Ks8r2jgwKGFSy651nte
x2j1P9Cx0htvvKdw5pkXePd1bNV/j0GDzvDGVNXX0jFwHUft2bNX8/P6uL5m
77339zyrBx98prDtttt7vpq/z+mnn+eNE+v4rI6Hq6YNN9yo2VfTMVl9/uST
TyvcdNN9hcsuu6Gw/fY7euO8H3zwVfP7qMelr9PcXNa/bWtiaet1qaflysjl
xevSqRfmPDFdN/1nFsd9WxG9D7nvsJW1lqi46Nh3V2n2vGJw3PlekfrH6tdo
XlD1ivwy/8QTr3jlUf0o9cT916kXo77RiBHjCrfd9nBzPfHYYy95z2u5VQ9M
64Lhw8c6T3y/xfwuv+7p0eNQL4ee7qNekvo3L7zQ5O3TGr9L38evX9RD08dU
m+6jvpbWP1rPaN2hXvkiP+ia5vdRv0vrDvXan3zy1cJDDz3rPf6Pf9zrvbf6
RFpHat2l9aVf77T1N9RrCNQHU99NvTn9nfR+//6DvedfeWVa4ZBDjvQ8OvXc
NPz6cFmv9f0u/T7q8z311GueR6f1qD6u9bV+L90W+5SDB59Z2GSTTRfz1iwD
rys63NqmWicfY60FIO5IOenhyssEay1pAa8mNPhdACkEvwuiAL8LAFLOcrlc
bs18Pn+szs1yc7SK19z63s3p0rH9w3Sul7yug7XwljKm3+TRSfK8hgwZ5o1b
L2kulI5j6xyC4DyII444xhvP9e8X58nSsVddP8ufa+D7Xe+889/mfdRP08em
TPnYe28d49Z5Y/7zN998v/e8P/dgl112L5x22jmLfY5q1n3uvPNR777OEVP/
S+eRzJ37nflv29JYmtdVgg5SLjaQ731BifKzUJ57WOJoKWO/q/jBHhLR+5gr
85taa4kS3/PS/9362PO9Gt8X0rj++ru8x3zPSUN9Zp3fGSx3Ws6DdYDWEwcf
fIR3X30k3cf3jIKv8/0uLe977rm3N5/I30dvq2+kvpTeb43fdc89/2p+TMu/
1gU673RJ9ZR6WPvvf1DzffW7dF7X9OlfLrZf8evUU9PPU1+trb/h22/P9fz7
22//52LvfdVVt3ive++9T7z7pfIZtuS1vt+ldXVwn2uuud17/F//mljyt9Rr
GtSjfPrp183rRQ31usb0bZqG1xUNcmyMceeSntZaAOKOtF0Ocm2YK6y1pAW8
mtDgdwGkEPwuiAL8LgBIE127dv2D1Hd76Ni89AefXn3RGlvFc7fmS9wrMTiX
y21RW1u7irXusCTJ89KxZc3VtaTnS63fNWzYCG/egH9f5xzovAfN5aWP65wN
/W81T6I+7/td77//RfNr7rjjEe+x559/1/PB9LY/p0xDx1v9MeQ33pjp3dYx
Xs1VFgx9XOdr6Gt0boWO1aqHZv27tjRa6XX9APWDtexIvFjCN35O4mSJv5f7
GC8Hrk5Qvd2stURNXDyvUl6R+lH6mK635T+m3pb64nr7qqtu9Z7X1wbfS/0r
nWOktzVPntYHweeL1+/SeVLqi5cq08cd19fbp61+l4Z6ZmussYbng+t9rWdU
o/pymndVQ+eI+vurr3TUUb1KfoZ66vqd9DVaZ+rnqTfU1t/Qz7la/N21jvPr
Rd2vlN/VktcG8xkGX6tz6vzvrfVl8ffUOXg6H8y6XtTwva5L+rxN3zwipE4e
584fR1hrAYg7+F3Rg1cTGvwugBSC3wVRgN8FANWKy7m2gUQ/l19tRglva6HE
S3oNsa7znM1m/89ad6VIiuel86o0f+GSni/ld51zzkWer6S3de7DoYf29Hwu
9bU0b5auw7V6YK2ZUn6Xjg37Y+Y6v0tf749xa1x++Y1uDa6p3nvq7VGjLvfm
iBSHrrGjr9GcaJqzzPo3bWmE9bqKyWQyNTp30uUFXVhU9t6WOFueW0d2bV+O
zwuL+nFpbhPFwfNqqVejeQvVm9Lb6m3r8zrPKPheF1wwxpXzz701q7TuCD5f
7Hdp3aP7lCrT/rp8Yfwu1ezPd1KvS314XZdKP1/99MMOO8rzrvz9/fW7it9f
c7fq+5xxxvleTkH14PW+zuFq62+ouRH9+W+lvr8/562U39WS1/p+V3D9Qz90
nyOPPNZ7Xj28SZPmND+n/1spHyzqwOuyQerk8W78/jBrLQBxR9pbB7vycrm1
lrSAVxMa/C6AFILfBVGA3wUA1YJ6VepZufw3L5UYX9eYKf3A2yT6y74b1tTU
rGStO0p8z2vWjPjm1tP8Wkua06CxLL/rkUdecGPY9zc/r+vCtMbvCo7h9ulz
cuGssy703l/HlxeNz071ntO1apb2XZqaPvzBmHdco9xeVzENDQ2/kDK3v/Oe
Py8ulxJjJbaUWL4Sn98SRNcrTk+jlQZrfM/r3ivnfG1xHLbFq9H1ooJzkPwY
NOh0b46R+teaR3C//Xos9nyx36X+k/otS9MXxu9SH9+vp3S9K9Xvzzn1n1+W
36U5Wddbbz3vu/mPvfXW7NB+lz9HLpjvsVSoHs3lGnysJa9dmt/lh64ztsEG
G3rXK/iPaf7Y4G9kEXhddui4vR43Oo5vrQUg7kg5OcS1YS6z1pIW8GpCg98F
kELwuyAK8LsAIIl07tz5p25sfEhjY+N9qy/KQVi87tbXEv+WGC6xpzz2R2vd
cUA9rytPn/p5XD2vvn0HevMsfG/KD39+wbL8Ll1DZtE8rPean/f9rVdfnb7Y
/aX5Xfqc5lU85JAjvbHlu+56rHlfnUOm49I6Ph5cW0c1+rnKNDSPoeY29OeG
xDUq7XUVo3Mv8/n8jppzR37zeUVl9+PVF62lt0cmk/lJFHp8dJ0+p6Ehys+N
G+p5jenXNMnC82qLV6PlWvMEqkftP685TbV8HnTQYd59LcOL1gWc2rxPsd/V
v/9g7/6///3mYpqCZXzYsOFeXRNc46sl32Hq1E8LG220sTeHS+/r2n/+2ll+
aN2m85n8+6X8Lt830rWxij9P55O29TfUx/U3PPro3kv87hq65pfmHwyuR9iS
1y7N79L/yr+t9b++f3PddN9Ti9W9UQdely1yzFzp6uQDrbUAxB0pJ4e68nKp
tZa0gFcTGvwugBSC3wVRgN8FAAmgQ2NjY0bicB0fl3hT1wIq4W+9J3GD3O6l
dVpdXd2PrIXHlTh7XupT6Zo7OhY8evQVheuuu7PQp89JzfMZluV3aS4s9cuO
PbaPN1aqY+A6Z0CPEX/ctCV+l84x07ldOk6scffdjy82z0DXz9H9d9ttz8KE
CTd5vpbq0vf299H1enSfAQNOMf9dlxTqdel8nqi8rhJ00LmW6kvLbzW52LOW
7T3umuWKt4fl895xn92l0p8Vd6w8r7Z4NRonnXSqt2bURRdd5u1/8MFHeB6M
zhnS59UT0+d1bpbWCbrmlPrZQb9L9/HX0dJcpddcc3uhV69+i+VB9OeK6mO+
f76k76DzyXTu07hx13hrdKneJ5981dvHXy9Qcy7ef//TzXPRdB/1hnSfJeUz
1HXIdI6V1mf6Pbbbbgfvdf7807b+hvp63eeoo473vDP9LbUefuaZt5r38dfq
Ur16+557nmjRa5fkd2keR712QHNS6nP62/vrN+pr9D/U17322geR1414XfZI
nXytOxfsa60FIO5o3k9XXsZba0kLeDWhwe8CSCH4XRAF+F0AEDe6dOmyms79
kBgmddOj0m/7rIS3pfnQHpM4K5fL7ZTJZH5lrTtpxNnz0rxkRxxxjOdh6ZwI
HTfWnGX63LL8Lg31onQMVfN+6fwsHXNV/0rHwPX5lvhdl1xyree7BY87nR9y
4433NL9G15VRLTpOvemmm3nrfQXHhm+99SHvPXTc3Po3LRW+16XehvXx6KPe
ts7bXH1RTtJgmf9O4l9SL5wgZb5TJT5bPud9/SypT/5cifdPGhaeV1u9Gs3z
p56L+llaHrt33+cH6z498sjzXl5D9b3Uf9I8pUG/S0P9dq0rtD5Zf/1uhR49
DvXWx/Kf13lNw4aN8OaOqQe+tO+ga1Jtu+323ufttdd+nv8e3G/48LGev6N1
3IknDvHqDvW49Lvp80vyu158cbK3LqC+r/rtWt/pa3TNQZ1f2tbfUOetqjen
mvU31Dr0lFPOKrz77vzFvr/OTdNrCNTPOvfcUS167ZL8rueee8er6/U3UP1a
v2t+Rn1O59Dp99Tf4YMPvoq0bsTrigdS59/o6v/u1loA4o6UkyNceRlnrSUt
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
0cGhH6QAqNX4hnpXRJD26widNyCT1oW/q9nGEQP1LkIqB7nON5V+YLTVL0yV
/uCvrv0ihBBSfKSN30fa/C/1M8AC1LB37RMhpPIw8SXy92bXvhBnbCjHf65+
/rjAtTOViOz/fWXff6+vxbtk0YaufQoKpdK6gqJ5yfN+R33clzSj1hk6qNX4
hnpXdGgh7dhnmfQuaeeQO3uWawdJcKDeRUjloe95l+lr/2vpF7q79okQQkhx
iMVim0nbfqM13+0e1PFw7RchpDJBXBfm3GpjjFcFIse9t+6TUENyU9f+VCq6
htPH+t7gflnUwrVPrim11hUEzUuO9a16PHhoub+b+IdajW+od0UIac96Ik7c
1rzwv85luJ9r/0hwoN5FSGUSj8d/K9f9i1Yf8ajcA//BtV+EEEIKR9rzbcQW
6Xb9K85nIIQEAWmTbtP3nKNc+0LKS6tWrTY3scbyrHGka38qHXkGrELMt74e
HxbbyLVPriiX1uVS86qqqtpEjvd3+ni3Ltf3kuJBrcY31LuixYY6b8laaywT
sV1vuXaMBAvqXYRUNMjl3U+u/xW6HfhCnkM7u3aKEEJI06ipqfmFtOdXmHt/
+ft0XV3d31z7RQghQNqkaj0esRI1vVz7Q8oH+ib9nDHDtS9kHbFYrKWleT1Z
iZpXubUuV5qXHOeu+ji/UY7vI8WHWo1vqHdFDDmWB+jasCa2C/FeXV37RYIF
9S5CiB6DeN2aH3E34r9c+0UIISQ/dXV1baTt/kC34Zi/cIprnwghJB1pm+7U
7dR1rn0h5UHnslylj/s2rv0hP6M1L1NT7cnq6uqNXftULlxpXS40LznGD+nn
+36l/i5SGqjV+IZ6VwTBsy+0rkQigfatXhY1d+0TCRbUuwghmubSDpyBebe6
TfhY+o69XTtFCCEkK82lzT7LGkt8Mx6P/9u1U4QQkgm5r6yRNusn3Gu2bt16
C9f+kNIjx/o+U0fStS9kfRBraWleU1u2bPlL1z6VGtdaVzk1L8xf1XG1a1m3
ILxQq/EN9a4IIm1at312PUrFd9XV1R3i2h8SPKh3EUJsECeA3LdWrNctyLvv
2i9CCCE/o+tvmLhc5HM4rxnrzhNCAo60VRP1/eXVrn0hpUXXk1R5hhDn5dof
khlb85K/L8nrX7n2qVTc2mPBJkHQusqlecnxPEkf18dKsX1SHqjV+IZ6VwS5
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
vbZ07W864tfD2r93kb/atT8kHFSq1nXvvY+lDj30iNT222+f6tBh51S3bt1T
Eyc+4dwvWm6j5pWZqGg1DomE3kWti5bLqHmtD/UuQgipDFDHC/W8rPEc1Pnq
y3GT6JJIJP4qx/hGaxzvBznug1q2bPlL174RQggh5UL6vgd1nHtOrUv6zbXx
eHx71/7aiM8nmD4c81dc+0PCQaVqXVdcMVxdy126HJK6/PLrU0OHXp065pie
qbFj73PuGy2/UfNanyhoNY4Jvd5FrYvmxah5NYZ6FyGEVBbS3m8j9qKley2U
v0fJW81d+0aKA/IeyXG9TI7rCn2cV8nrEbW1tX9y7RshhBDigkQicb70hegP
v8uR03B1PB7f2bWvBh2f/YP2r5drf0g4qFSta8qU6eo67tt3YOrjj1c794dW
mFHzakzYtZoAEGq9i1oXrSlGzetnqHcRQkhlEo/HOyWTybescZ73EolEZ9d+
kcJB3JYcxzPkuH6lx+2Qv+ku+f//XPtGCCGEuEbuc/4h9lq2WC9ZtlLe3821
nwDx98hfqH172LU/JBxUqtYF6927b2qbbbZJzZr1cc71xo+fnOrW7XC17s47
75Lq3//MVH39lw3vn3TSaalLL702deWVI1IdO+6W2mmnDqkBA85Kffjht1m3
ecIJfVTexPTle++9T2rw4PPU/7Nnf6a+C9tr3769+sz06XMb1sX3bbvtto0+
P23aTNU2PfbYS873bzmNmtfPhFmrCQih1buoddEKMWpe66DeRQghFc0GyWTy
cOkD5lnjPa/E4/H2rh0jTaKFHMeeYkus4/iEHMe4a8cIIYSQgIE+82pd13RN
mt71I+YDuXYQwEft1zLEbbv2hwSfSta6PvlkTYOGlG/dIUMuUvrVDTeMVzkP
8blevfo2vA+9a6uttlLrvPTSe6m77npIaWOXXHJN1m3ed9+Tqg154415Dcte
fPFdtezJJ19JLV78Q+qAA7oo/Qy5Fe+55xGVc3HXXTumFi5crtan3tXYqHmt
I6xaTYAIpd5FrYvmx6h5Ue8ihBCi+oKNkslkH/n7sTXm82gsFqt17RvJCfTK
Q8TmWMdteiKR6ODaMUIIISTISH/5P7Fvxb63Yr2Qz3B/174hxszEacv/O7n2
hwSfSta6YHPmfK6u4XPOGZp33fT9c/XVo5S+tWTJj+o19C5oU/Z6ffqcmjro
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
w46N8i5mM4xZX3bZdSouBblu8DnUK4cvxx3XS33XPvvsl7rnnkcafe7FF99N
HXXUscrXXXbZNTV48HnraW/4buQDwjbgS9euh62nd0HL2m+//dV2sO61196Y
WrLkR/Ue9S73hEnrmjFjoYqtQs6oPffcW9UiQR4nvAdN6Pjje6eOOOJodT7u
tVen1FVXjVxPx851PpprDHGeuCZwLSMPFNZBrkHknML5ivoyWBdtgBnLNoa6
LchrlZ7zEIbP4zrK9NsQ25W+rffeW9Lw21B/ZeDAIfLbd1A5qdKvmULaBtj7
7y9T2zW5ulCr5r77nmxoO7p1O1zVekGOLKyDnFtLl/48jj5+/GS1DvbVzjvv
kurf/8xUff2XDe/fcMN41Y5hm9jvOHZoV2bMWNCwDmrkXHrptak99thLtVGo
aYN4Ofs3Ym6CaTvNfpw9+zPn52Q+C7vmRb3LN2XVu6h10aJkYda8qHcRQgj1
LhotSka9ixBC8hMEvQvj1xh7xdh0rvWM3oVxZoz7ol45NB2M7aKuA9Z5993F
DXUgbrrprtTRRx+vPvPSS+812gbGojEGDS3J1HqA5oN1Hnxwqq43fpH6H2PC
eI36FHgf4/rHHntiat99O6sxZOhpqE2OdVDvPJv/GLPGOtC7UAsdY/d4jfHp
W265R/l4yikDVD12Mwb9xhvzlG8Y+0aONvwmjLnj+812J0x4TG0H+gNqvV95
5Qi1DVvvwv7C2Dvew/rYP3g9aNDZ6n3qXW4Jk9YFwzUBzWXcuPtV7ZNevfo2
vIfzExrX/fc/peqvQLPC+YiaJl7PR7QJOJ9xbSCeChowtgM9CO8/8cTLStM1
etf8+V+rejM4h7ENXLeLFn2ntB0sw3VkvhvXfHqdGdveeutDdX1BZ4OOBjO6
En5bu3btlMYzYcKjSqfHtqZOfdNX2wC9CLoS2qVRo8YqvR262pgxdzRqO7Df
77774dTFF1+lXqMNMdtAe4W4Tnwv9hXaDfu4YDk+A/0emhX2IfQ6tC1mHdTo
wT4fPXqcam/gE36z+f1PPfWqev/MM89Xvx/tEX4r2lzofK7Py3wWZs2Lepdv
yqZ3UeuiRdHCqnlR7yKEEOpdNFqUjHoXIYTkJwh615w5n6sxKNQhz7We0aow
FmyWmbHrBx54umGZrRd89NEKFWOC2mD2Nux4C2hPWIbxcrxGbIqdy2z27E/V
+4hRwWuM42PMF8tt/1A76KCDumb1H2PWBx54UKNliI/o129Qw2vEeOC7xo6d
qLd5ptIBFi5c3rAOxv6xzjPPvKHiYaA7IN4NGoFZB7FoRu+Cn/DX3kcwfAe2
g1gx6l3uCJvWBUNMVzZ9OlPOP2gxOAehS3k5H3F95tOI8P1G74IhfszEf5pl
0Gk6dNhZxSyZZfANMVL29ZJuufIZIv7LvIbGg+0bLa/QtgFt39Zbb90o1so2
tB2IybJ97tnzJBW/al6nnzvQEKEzmpg5o3ehvTXrQE/DMhwXbBsxW4gbM+9D
r8P70LnwGu2XrVvC4DPWmTz5GefnpRcLq+ZFvcs3ZdG7qHXRomxh1LyodxFC
CPUuGi1KRr2LEELyEwS9C7ENeBZFbEGu9TLV74KehWUYy7XX69PnVBWbADPx
CNm2gbFeLLv55rvVa8Qq4PP2dyNW4rzzLlX/m3xnyDlmG8aWEWuWzf9MNXig
SSEmw7zGmDW2fd11N6nX8B+fsz+DHGVYB3E1iFHJNNZs1++CPpjJX+wXk/eN
epcbRg2o/2PYtC4Y4odwvkD7mDv3i0bvZdK7cH6amCov5yOuMejUuTQpL3oX
DNctriOzLWjM+dqaptTvQr5Cc40W2jbAp1zxrZnaDvgBf8xraHuIDYOuhuX4
zfAFGjreN3rXokXfN3zGxMRhn5t5ByamDIaYUyyDjjdz5tKGeNT034fliPVy
fV56tTBqXtS7fFNyvYtaF60SLGyaF/UuQgih3kWjRcmodxFCSH6CoHdhnBpj
qKgVk2u9TFoVYhfWaT/j1Ounn35NbQtjx48/Pi31/PNvq1gOE5ORaRsY/7U1
M+QAw1ixyeGFsWC8j1yBeI24CryPuIZ0e+edj7L670Xvgtl5yqCzIR+a/T7G
7bHO0KFXq/gX/I/fZa9j610Y/zdaQyafsf+pd5UfpXUNmLc0bFoXDP7iekFs
Ic5R5OM072XShJA/z+iyXs5HXGOIZ8rlg1e9a9q099VytAcmHhR/c227KXoX
alkhr6GftgFxVchfmO39TG0HagFi35vjgRqA8A/HBb8PMW127bFMehfaQdN+
oF3B55FT1byPOQB4H/XazL67/vqbM/4+k1M2LBY2zYt6l29KqndR66JVkoVJ
86LeRQgh1LtotCgZ9S5CCMlPEPQu2BFHHK3Gbu1cW+nmRe86+ugTVHwWxr7N
Ohg3b4rehVo8yC0Gn5ATDHV8UPPGbBM5BvG+yRPm1QrRuzp3PrDR+DPM5FfE
Og8//Jz6H7V47HVsvWvs2Pty1iuCUe8qL2HWumxDjSxcDzh3UOcKyzJpQiYH
57RpMz2dj8j/hzp9ub7bq94FQ8wTtgm/8uloMOhd6blHs/02W+8qtG2AJm+2
kcny6V1TpryufjvyD6bvc696F14bLRK/45JLrlHbv+iiK9V70LzwHmquuT7v
imVh0ryod/mmZHpXJWpdmdoTV/b224t0+/e453XQX3TufMB67Tl0/fT2O9u6
pTbE1a6bb7DA+T7OZGHRvKh3EUKIN70Lc/3QXpq8FKgbjLlv9rgKLb8hJ4Z5
/nK9/VL70lRDrWs8S2J+KM6xRx55wblP2SxI94TpRr2LEELyExS96+67H9bj
rIMb5TBDfRzTD3rRu1DPBtsw7yNGa7fddk8NGnR21m2k613oh9GHYRwbuhE0
ILuvMzFVdt4vGHIr5vqNhehd0OlwL4D9YN5H3jCsg5gZ5CrDPenpp5/TaBu2
3oVxnnbt2q2Xo9H2F7qFid1wfS7Aoqx3RUHrsq8HM45o8tmla0L4jccc01PV
ucI55+V8HDfu/ozjl/bzVlP0LlzbiKFC3TFo2Pl+H/Kf4rpDW2Avz6d3Fdo2
4HqFf+nPI+b35tO7UAstfVzUjEebuDIvehfew3499tgTVVzpgw9ObXQckXcR
zyf274GPy5atcn5OFmph0byod/mmJHpXJWpd2doTV1aI3oX7zMMOO7JRf3Dn
nQ+qdTD/x/5spnXLYUHXu2Bh0LyodxFCiHe9C/N8R468TeWux7MH2s+TT+7v
vL8Ji+G5C8+56MNdb7/UvhRiqNeNuaF4VsYYX1DzgwTtnjDdqHcRQkh+gqJ3
YSwVcUzoVxCLgXssxBVgfNWMk3vRuy644PLUDjvsqMadMVbbo8dxKr9h166H
qe/wondhW1gfsRIYG8FY8muvzWlYH2O76OegM+H70B8aX21dKt0K0bveeutD
VR8Hv2PChMfUWD7GxaEfGK0E49L4zKmnnp4aP36y0qwwLm/0Lhj8wzrIGYl9
g/pgiCl5+eVZDesg7gVj/Ii/cX0+RFXvioLWBUPOT5y3qMWF8w7n1nPPvaXe
w7kHXQn15aAV41zF+6gt5fV8xHV98MHd1LV78cVXqe+BzoRlRoNqit5lalN5
HTs0NcZwbeF/xFGa35ZL7yq0bYBPaLewD4YPv0Vdx9DtTS7TfHrXBx98otoF
PI8++uiLah/suONO6jcYzcqL3oXfgdgutHuwhx56tqH+F8zUYcO8gltvnaA0
Tvhl108Mo4VB86Le5Zui612VqnVla09cWSF6VyZDf5VpbMOVhUHvggVd86Le
RQgh3vUuzHmzl5nnvDfemJfxM36eZzHOke29sD4no8/eUtc+dr39pqxbrv2N
Z9pcNau9Wqn9Ddo9YbpR7yKEkPwERe+CYbwaY+LIR4hxbmgvffsObNCavOhd
mCPSr98gNQ6MMXfoRhizxTgyant50buQGwwxDGZszNjZZ1/c8Bl8zznnDFX1
i6BHYfwXY8y54v0L0buMPxhTx/fsssuuagzcnguDfXD++Zep/YXxeGgRRx99
fCO9C/cE0B86ddpX7VuMv5977iWpuXO/aFjnpZfeU9+DPI6uz4Uo6l1R0bpg
OD+hj0JjwV/EY5n3cA7iPIJujXMW75vrsynn4/z5X6tz3dQIwzMYvtfU1WuK
3gXDfEXo2F5+HzQ1XFPQjNB2QH83vy2X3gUrpG2AoU4g6n/ht0Lj7969h9K4
8V4+vQsGLQr7cfvtt1fPqtAO4Rf0RrzvRe/CXDvobna7hzl4iL81n8FcPPiC
44bfiHkKtm4eVgu65kW9yzdF1bvConXh2sY1jesWbTKuW7TJ0NShre+1Vyf1
PtqY+vovGz6H97t1O7zhXgw6uP1+enuC9gvtEdpxsw7iVaHBIzct2gq02chp
m8vffN8Lw2vcN5ntmrE4W8vKtQ78MueCyc9q5vHahmWZ1oXNnv2Z8g19An43
fhv2gb1/0Dfcd9+Tan9jHeSFsrUr5ADG5/AeDPm4UW/SvB8WvQsWZM2Lehch
hBSud5kcPKidcN55l6q8OZgHiJxuWP7UU6+q9ZD7Df0cng0xXjF48HmpBQu+
adRvYowG/WbHjrupPhrPSa+/Xt/w3cgnj2c98+yHZ6p8fWWh9zmZLF/fjvsA
+Gx/Bvc12A+PPfZSo3sGY6amhrlvuvDCK9Q4E57X8Ixm/xY/20+3XOuaOhZ4
Pl93r7TuHsXLfRj2I2pEw1ccR+wrbMMem8JzL8bhsF08q5tzBPNBbX+QK9N8
Jt/5k+38gD94JsY8Uzy341jj3hPjZ6htjf2MMQDk+TfbmjXrY5UbCdvB78Sz
ul0TwMU9Ic5f+AF/UVPB3jeZjHoXIYTkJ0h6V5DMzqmI8XXcm6CPZv7q8ljU
9K4oaV35LJMm5NoQW7XHHnutp7vRGpvd7sHwnIH7c/MMFHULsuZFvcs3RdO7
wqJ1wcwcH2jheJbGvB88T2MZrmvE5UIDgi40cOCQhs8NGXKRGr/AMzr0fjyb
Yy6Ned/Wu5APGfNr0FaY3KZ49sd4DmLTEcOL8ROMUWEcw4xtZbJ834v7McT5
Yjlyyawbl+neSO/Ktw76A8S9YozDjFdgrgX6LayD/YTxNSzLtC6WYV4WxnkQ
D48xFOxTjJssXLi80f5B7VfknsY4IeZ3IP7X/BZ8DvsH40KY64X3sU0TCxwm
vQsWVM2LehchhBSud6GeL9pQ9N3Qu9CPQ1dCHWb0j3iuRewX+lz0cehnkf8B
z4NmW3i+gIaCZzHoCpjziH7VjvPBd+MzyP3xwgvvNNR5ztdXFnqfk25e+vZ8
ehTuP/D7zNxl3EuYGDZzX4D509B2Jk2aorYPfcbks/ez/XTLta7Ru7C/r7hi
uPLH6G757sOgL2FMDOtgrjTyoOBY4jzB+9C2sG28j32IvybXCOagYx9j/imW
vfvuYrU83/mT6/yAP/g+6F2Yf4nfitfw6ZZb7lE+Ym4mfDb3U/he+IF7RHwX
5onjM1jXxT0h7qWhc+FedcKER5V+Z+baZjPqXYQQkh/qXesb5jFhTgr6OeTs
Ql+I17i3c+1bpViU9K5K0rpgQdK78HyF/J7mvhMxY659CrKhbhmeR4cNG6Pa
Pjw74P4ber9r38plQdW8qHf5pih6V5i0LpgZB7Jz2Zh5q7buhGsfsazmdXpf
hfsgjBWY2o223oXYKTznI6+qWR9xXocccmijOUL4H+NRudqTfN+LMTJ8rxnn
gJl8PUbv8rIODGNK9vzcXLlr7HUxnoH1MKZm3kc9eNTIuOaaGxrtH+TSNesg
fhbLTD+U/lsxBmLm0ON12PQuWBA1L+pdhBDiXe/CmDz0B2gKw4aNVmP76M/R
Z0HvQnsKfcT+HGJboNuY8X0Yxv2x7jPPvKE0p/R7EeTwQP9u8nbgu/Gsll7z
OF9fWeh9Trp56dvz6VH2/UZ6DsFMeTaQMx77d+jQq31vP5NlW9foXcgrkv6Z
fPdh0Jeg79jroSa3GSe7/fYH1Laff/7tjD4h3is9n2G+8yfX+QF/EA9lL8O9
JmIJ7f2MbaF2WKbfiW3ieRfan1lWzntC1FnD/4hH9Hq/Rb2LEELyQ71rfcP8
FtTOwT2RybWG+zvMV3btW6VYVPSuStO6YEHSu/AMBX8wrwv1W1z7E3TD8xBy
P2Cf4b4fzxaYT2liNirFgqh5Ue/yjW+967p+c4+R82JlWLQuWKYcztB8sMxu
EzGegdyl5jXaTsyjxvgF2gOT49nU8zPP7phPgL+obW9/L+atYnwEYwK2YV20
x9n8zfe9GCdJn3uUXpvLyzqwQvUuk7MmfR2Mt2Desb1/7HEtzOXGMjvHDfLQ
wl/kDMK9Jt43+WPDqHfBoHmNGTxv5fX96gcU8wIuFKN3tW7degvXvhBCiCu8
6l3pedwQu23icDAeYudSN4a+GrqDvQw58NblzLs9NXHiE+p/O/85+nq7z8V3
2/nhbcvVVxZ6n5NuXvr2YutdMNyvmPz85da7MuU9yXcflinHPuZHIgch/sd4
GY7Tvvt2VrFR6dvPpHflO39ynR9e6oVgDAbbQr1wswznDXQ6fDcMY37QRM37
5bwnhH+oJ4JrC/FmRgPOZdS7CCEkP9S7aEG0KOhdt/ZYsMmogfUfPnrbJ6td
708ajdY0q5/5IzSvldf1m3u467YEUO/yjW+9a1i/hX+RNv2j6c8sD02b7nUc
CHO4oU/hfzx3G90bz+iYx41aDfiMybljnt0xPoAxEcTAm9xCMOQ7whgExlrS
LdvcIS/fizoc6WMi6VqWl3VghepdvXqdouqWpK+DvEmIj7X3T656iSbnzkUX
Xaly5Rh9C/PS8X5Y9a63Xvpu7ciB9Z+OPHXOv4p5ARcK9S5CCPGud6EfQ945
aBXpufJM/a70z2GcHvFa9jLk2EDbi9glzCXG/xjLN++jRjvyG9rfjfpM6dvO
11cWcp+Tybz07aXQu5BLz8zRKbfehfsee7mX+7BM+hLmudqaD773xBNPVp+D
vmXH/2fSu/KdP7nODy96F2xLndcR/yMWy+TTfPzxaSoWDfPc7Vpo5b4nRC0y
5EYwc+1NXFs2o95FCCH5od5FC6JFQe8CIwbWD7jtwoVfL1uy1vk+pdFo3u21
KctXjRpYv2hE7wV/dt2OAOpdvilOPkM5H0YOqF/8+tRvQ6F5FTIOhBrf67Sh
n2t3m7wy6XoX8rFgzi/GKmztCHNlzXxlr+blezF20L17j0afS9eyvKwDy6Z3
Zapnb6+L2haYu5y+DsY7TK2JfGMbyAuEGFp7fAf108Oud7398vdrRg6s/2RY
vwVVRbpufUO9ixBCCq/fZVs2vatz5wPXi92ePfvTRhoDtAXMhYF+MWjQ2SrW
ytZhMukZXvrKYuldXvr2q64aWXS9a7/99m+IW/Kz/UzWVL3Ly32YF73LGHSl
HXfcSWloZlkmvcvL+VNMvQv1ZJGT0c65jeOQSe8qxz2h/TnEUprYuvRzxTbq
XYQQkh/qXbQgWlT0LqA0rwsWfkPNi0YLh02fqrSuxUHRuppprSaZTP7k2pEQ
UxS9C4RJ8ypkHOiBB55eT2cxz+qoMWC/Ns/iqFGA53/zPsay8L6pf24sve6C
bV6+F2NeGCObMWNhwzrpWpaXdWDpehdyI2GdV1+dvZ5v9rqmLohdv+S11+ao
ZdiPmfYPzB7bMGNNdi0Jc6zuuGOSXv859Rp1T1yfR14siFoXoN5FCCGl1bug
E2DM347zRiwX2l7U28Jr9MkYx+/Vq6+O+Zq53nen6xle+spi6V1e+nbzm+x6
0GZuitGjTK2oG2+8s9H2M90XGH0JuaH9bj+TZVs3m97l5T7Mi95l5+OD7mTr
QZn0Li/nTzH1LtT1Ru0S21+c17h3NcvKeU+I16Y+GszUQLPzX6cb9S5CCMkP
9S5aEC1Keheg5kWjhcMCqHUB6l3+KZreBcKieRUyDoS8M5iDffLJ/VOPPvqi
quGH+bn4zIMPTlXrpD+74zkdNbtQCwGvMS6CsQsYxnHw7I7cRel5Bm3z8r3Y
LsYZMC6B9++66yE1bmJrWV7WgaXrXfgcdDLkFsJn7PE1e13MB8ZcZORNHDfu
fjXmht/eseNuqblzv8i4f2DpYxsY90N9B/w2fN8+++ynjgFyNuF9zKXGa6xn
xnuCatC6Rgyo/zxoWheQff4F9nubNm1+79oXQghxRSn1LuQ9RD/Zo8dxqQkT
HlN9L/rzY47pqXLkod+EHgK9Af0w6nk98cTLKoeb/d2Z9Ix8fWWx9C4vffub
b85PtWvXLjVw4BA1nwf+YH/YehR+L2pXYTu490F9U9wjmfsC6DDQSBDLtcMO
O6o8eosWfed7+5l+U7Z1s+ldXu7D8uldL730nsrHhxpg2D7uA219K5Pele/8
yXV+FKJ3od4Y9j2OMX4Xvhd5BLt2Pazh+8p5T4g62dhnl1xyjfou+IH9aet/
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
jeps+zgYCCEhyZvkDWlO4rzZxP5kW9JoabYJNfTeQgvFtIAppldTYtMxmIDp
xRgIxdRgasCU0Hs1zYVmjE1J6GCwre+5hzPLrCztane1ezSj/++6nku7knb3
UZudmXvOmfjveeutL1q+vvTS61vmZIyuu/32h8LrdFv8ORo//ppWj63WVe35
upQVWX8rWB1gy6Fr7XJm6Rgwu/41qyut9rFaPpPJfKunPkdtsV7mqL966QcA
AAAA0L3Iu6h6LPKuysi8KKp1pTnrEp0/x+1P/o/vXhKsLvMu6c7MK8qzRowY
FWZU8dL8hO3dvskmmxcPOODwlt8Xzbv3+ONTW65TRrTjjn+t2EO5vEsZjsaJ
bbHF1mHWduutD4RfL7300lXnXfo+Gn+l86nqHFrjxk0obrPN9i1zHCr70pi0
tdZaJ8ySzjrr4pbsqTTvuuKKieHvOvzwkeHzcsQRx4bfjxlzbnh7tXmXnktl
ZPrb+v7tt78MH6vmJtTf0OPU+K4ZMz5v+ZnLL78x/D2PPPJyy3XKGXWdbuuO
5Wa1WVcl8TFgVo+UjgHTuCqrh6zGWG2h+9f6s1ONWF+L+fj7AAAAAICeRd5F
1WORd7WNzMtPHX30CcU//Wn1mvyuJ56YFu5rXWGFP4a/86STzmjZP0pVX2nP
uqR///4/cvtr3/fdS4LVbd4l3ZV5RXlWubr44qvbvP3CC68IzzelOQ3jv7N0
DJRynJVWWrliD5XO1fXgg5OLW2+9XXi+K2U7Oi9YR+YzjK7TzylDUq+rr75m
cdiwfcJze0W3a05A5Xb63RtttGlx8uSZ4fWleZdKz8kGG2wU/i6N91I+Fi2X
q827NGZN17300uzwe835eOihR4e9qQflcaXj6UaPPjO8PX7dqFEnF1dZZdVW
j7VW1dWsqxyNAcvn80PaGgNm9bbV9UEQHGy1Uu/evZeo1d+vxP7eV+5zv2h3
/y0AAAAAgH/kXVQ9FnlX+8i8er5qmXdNm/bf4siRJxVvvvm+4mmnnRfuCxw/
/lrvjzFJ1QhZl/Tr1+/Hbl/xe757SbC6zrukJ87nRXV/ae5D/Z+4+urbqv6Z
7bffKTzmoSf6646sqxL7vP1aY7usTtMYsGhuwVjNtXrS6qwgCLbL5XJ/qHUP
9jfnuc99r1r/bgAAAABA/SHvouqxyLuqQ+ZVm6p2XFUt867SWnfd9YtHHnmc
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
1lVZEASDXN71oO9eEiy1eZeQeTVWkXVVJ5vNLuWWnbM9t7KIxula7akxXm2M
AXvD7nOV1b5Wyzc1NS3uuW8AAAAAAIBEIPOifFeUdY3Z59U+vj8P9ay5uXkF
ty/0Pt+9JFiq8y4h82qMIuuqXiaT+Zn73L/tu5dSGgNmfW3kzgP2bzfeq1wG
9ojdfqrdf0v7+te++wYAAAAAAKhXZF6UryLrql4QBCu5MQr3+O4lwVKfdwmZ
V7qLrKtjNEegW3a+5buXKpSOAZteLv+y22fY5dX22PbT2F/GgAEAAAAAAHyD
zIvq6SLr6phCobCq2885yXcvCdYQeZeQeaWzyLo6LpvN9naf+zd999IZmo/R
lvsbVzEG7GGNAbP6M+cBAwAAAAAAjY7Mi+qpIuvquHw+v7rbp/kv370kWMPk
XULmla4i6+oczf/nPvev++6lRhatZgxY7Dxg+9jXy2UymW/5bhwAAAAAAKAn
kXlR3V1kXZ1TKBTWcuO7bvXdS4I1VN4lZF7pKLKuzsvn833csvNV3710F40B
03nA7DGeqHM8lhsDZrd9YfWAfT3aLjfRec189w0AAAAAANDdyLyo7iqyrs4r
FArruX2WE333kmANl3cJmVeyi6yra2yZ2eSWnVN899JT7PEuFgTB0na5tz3u
K6xeqzAG7HXdrvvl8/ll9HO+ewcAAAAAAKg1Mi+q1kXW1TXu/C3aZ3ud714S
rCHzLiHzSmaRdXVdNpvt6z73L/nuxSeN59K4LquT7bm43+rzMvmXrrvP7nOS
xotp3JjvvgEAAAAAAGqBzIuqVZF1dV2hUPizy7uu8t1LgjVs3iVkXskqsq7a
yOVy/d3n/nnfvdQTnc/Lnptl7XkZrv8rOt9XhTFgOj/YP9z5wgr2o4v47h0A
AAAAAKAzyLyorhZZV20UCoVt3L7Hf/juJcEaOu8SMq9kFFlX7QRBkHPHCjzj
u5d6Z8/VL6w2s+frFHu+HtQ5v8rkX5/a9ffY/Y6zy/X79ev3Y999AwAAAAAA
VIvMi+pskXXVTnNz8/ZuX+PFvntJsIbPu4TMq76LrKu2NCbJfe6f8N1L0jQ1
NS1eKBSWD4JgP3v+rrav3yo3BkznRrPL8Xa/3ezrrP1oL9+9AwAAAAAAVELm
RXW0yLpqq7m5eWe3b/F8370kGHmXQ+ZVn0XWVXtuzj5lMo/67iUNBgwY8Ct7
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
714AAEDbNO9hPp9fx/53X2D/u9+JZV/zrO612iebzfb23Wd3IO8CAACAT+Rd
6E62LfcXt333ku9eGgx5V4KMGzfudr1Wd9555wLL0cMOO6y40korFV955RXy
rgYVBEGOuQwBAEisXva/fEXbLhpj9Vr8nF/2/eOaDzGfz//ed5O1orzr5Zdf
Lm6wwQbF1157bYF10z322KO4xRZbkHcBAACgW9x77707LrfccsUxY8YssH55
5ZVXhuvh//rXv8i70Cm2/faM257b2XcvDYa8K0Heeuuti7Tdv80227Rahj72
2GPFZZZZpnjWWWcxvquB2ed4lNsndqnvXgAAQNfkcrnA/W9/viT7esHqGJ2z
03ePXRHlXXpMRx55JHkXAAAAepTGd40cObK4wgorFF966aWWdcs333yzuM46
6xR32203xnehU2wbZwW37fYfzenhu58GQ96VIJrPUMcV6PW69tprW5ahw4YN
C5fDWh6TdzUuW4ZOcXPCbuC7FwAAUDv2//139n/+IKuHrObH8q9p9v2xdpm4
82HH8y7VTTfdRN4FAACAHqO8S/Nkab6so48+umXd8uyzzw7HFTz66KPkXegU
20a7xm3njPTdSwMi70qQ6Pxdu+++e3HDDTcszpgxozhp0qTw9ZswYUK4PNV8
MDo2YdVVVw2PT9hyyy1bblM9/vjjxaFDhxYHDx5cXHPNNYsjRowozpw5k7wr
4bLZ7ADmMgQAIP0ymczP7H/97rYNdYddfhUb9zU5CIIRdtnku8dqxPOutdde
u7j66qsX9X2lvEvrvSeccEJ4P807s9lmmxWvv/568i4AAAB0SnT+Ls2XpfXL
p556qjht2rTiKqusUjziiCO6tJ+VvKtx5XK5X+p8zNpWy2azS/nupwGRdyVI
lHdp/sJll122eOGFF4ZzG2699dbhMlbL0x133LG47rrrFs8555xwrlmd10uv
7yWXXBLeZ7vttguX2xdffHG4PI+NzSXvSjBbjh7tPsv/8N0LAADoGf379/+R
rQP81ere+Lgvne/LLg8YMGDAr3z3WEk87zrvvPOKm2++eXH48OEV866DDjoo
XP895ZRTildffXV4e3ReW/IuAAAAdFSUd2m+rPXWW6+47777Fo8//viW+Q27
sp+VvKtx2fvjFLdNNs53Lw2KvCtBorxLpeMMBg0aFL52GuOl67Ttr+MRJk+e
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
3PIvxccfn7rA9WuuuXbx9dc/rnrb++GHXwrfVzfd9G/v+xdUa6yxVvGII47t
0H0uu+yG4qqrrlZ84YW3W66bPHlm8fnn31rgZw855KjwuevJxzRt2n/D5/ji
i69u977kXQAA1J+O5l0PPPB8cbfd9iquuOJKxSFDhhQ32GDj4qmnnt1yu64/
7rgx3te7Gq20jvzQQy9WvP2OOx4pjh17Ubu/57HHphSPPfaUDv1t8i4AANBI
orzL9/ofRaWpXn2FvAvJU03e9c4788J9J3//+/mtro+yq7vueqLqz0ka8q4J
E24trr/+hsWXXpodfv/ss28Wl1566eJ1192xwM+OHHlScccd/9qjj4m8CwCA
ZOtI3nXzzfcVl1tuueJqq/0pXO846aQzivvue3B4zE10H/IuP7X22usWjz76
hLK3TZnyfnH11dcsvvjirKp+l9YntQ5a7d8m7wIAAI2EvIuial/kXUiiavKu
p556NXwvbLnlNq2uP/30C8Lrzz//8qo/J2nIuyo9P+XyLh9F3gUAQLJVm3dN
n/5BcZVVVg2Pw5k69T8V7+cz73r66de9/N133/U/X/ef/rR6xbxr1KiTi7vv
Przq33XVVTcX11lnvarnNiTvAgAAjYS8i6JqX+RdSKJq8i7lONH7IT6H37bb
Dg2vO/jgI1uu0zGq+l7z/elY4003/XPx6qu/ORa1NO96883PihtttGlxiy22
Lr711hfhdTNmfF485pjR4XHKK6zwx3A+wGuuub3NHtv7u6rZs+eGc/usvvoa
4e/dY499iyuttHKrLKu9++hY6ei50P4GzWEYfR9VdDy1junV99ttt2OrPq68
8qbwMatP3Ue5ocbQRc/P4MGDi5MmPV7cZpvti4MGDSpuuOEmxYkT76n6sZJ3
AQCQbNXmXeecc0n4P7+99STlXYcfPrJ44IEjikOGrBDmJvH1hJkz5xRPPnls
cd111y8uu+yyxbXWWqc4evSZ4XpRdJ8999yveMIJfw+v1zqafucBBxzeal7r
l19+t7jPPgeFt+k+un355ZdvNSe2/q7yOa3jaH1I8wdE64Dl6rzz/hE+RuVD
Gg+l9SSNdXrwwRcWWFe98ca7w/UurR+dcspZLT3tv/9hLXM97rrrHuH8gPHH
deKJp4dj4/74xxXD9b+99to/XBfbeefdw7+n50V5U0d6itYDo9L30W1ah9T6
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
AOpPtXmXxr4r/9BxMNFxSFHFj8NpL+/Sebw0Vjx+u3KgtdZap9X37eVdmrtZ
x0FpHJIyr/j8gs8880Y4rl/zMXdkHa9ctjRp0uOt1nUq5V2XX37jAvNuP/ro
Ky1za1d6XJ3Ju0p7Umk+SK3nlT6m6BirF1+c1Wp9rnT9c++9D2h1nc6nFo2X
a6/IuwAAQCPpSN6lfZg6P0vp9WuuuXbx9dc/rmpdS1VuH14tSvMD6Fi0SrdH
6746br7SfW6++b5W56ONSseglW4XpK00X8J++x1Sk9+lbSztg9U2j44F1LwY
PfU49F6MzxUfleY+17mYb7zx7m7vgbwLSdRe3nXMMaPD+W2i75Xx6DN10UVX
tVyn/EfnX9BtOo+D5tVRbqXPnc51rv0wW2yxdXiugXL/C7QM0t/QPoO33/6y
uPXW24XLdf0u7adQD1qmlM75Eq/2/u7s2XPDfUHRecSvuurm8Hhb9RJlWdXc
J3q88bxLv1/7M7RPSPngWWdd3DI+rTTvis5doWOm9f9Jv/frfS7nhrdXk3e1
91h1n+jcG/o/1tZyi7wLAID6U23epdLxNlpP0LEvo0adHI750rpUfBu4vbzr
hhsmhfc/5ZSzwmObNJee1i3i4/nby7u0XqSvlQlpTkSdz+v22x9qtc9A63T6
Ozp3ltZjNH5JOVu57bioomxJ+ZPWC9Wj1oP0c9G8fpXyLvWkORq1jnbJJdeF
f1PHHq222p+KU6a8X/FxVZt3tdWTSmPv9Txq3VHrZNF5uaJjrOI5nM51pnXG
8eOvKZ566tnh7WPHXtSqB60Pl8vPyhV5FwAAaCTV5l0aS69jzqP1uqii/XE6
Lr/aLKCe8y6tR+pxls6fpXXf+BiGNFYt8y5lXdpnre2bW265v0cfh9b9y82N
rm2eddddP8w0u7sH8i4kUXt5l86Lrcwmfp2ympdffqfle32+9F555JGXw30a
On5Ay1QdF6H/HxMn3hNu/+u8U+X+F2h8lO5/4omnh9/rdxx55HHFVVddLczR
NJ5J+wkqndch+pm2/q7uM3nyzPB448GDB4fX61hm/Y14llXNfUrzLpXOc6Hl
qf6+MjP9Hl1fmnepNM+g5tHR/g/tc1E+FuVU1eRd1TxW9aP9WDoOuK3lFnkX
AAD1pyN5l0rHv+h/vtYNVJorOn68X3t5l0oZi46V0XFNBx98ZJhBad2mrXFQ
peO79t334HD9JtqOUOn3PfHEtPB2re+cc86l4fqP7qdtOB1bFGVP5SrKlvS7
tU42ZMgKYd/xbKtS3hWt22mclPIoPTcaZx+/X1fyrrZ6UulxaV1Qf1eP+Z//
vCu8XhmixrpF8xuolDnqWGPdV9vUyi7j65oa/6Wfae9YpqjIuwAAQCOpNu+K
zkkSncs1Kh2HVWnupkpVz3mXcprSec81xkDrrfH19zRWLfMuPVelx6D1VFU6
F3BPFnkXkqi9vItKd5F3AQBQfzqad9VLaax89LWyLc23qPxGWVpnf2elc2X5
rFr0pOOr4sdTtVc6pkmZXem8lZWKvAsAADSSavOuKCtSxc9dq2PHdJ2O+4qu
U54UHbukGjp01+KDD77Qcntp3qV5unUMvOZfisZVaa4qzXGg+QW0LqfjmzQP
Qls91iLvUuaj+xx22N9artPcC9Fjf+65GW320FbfOiZLc5grM4zW/5Wl6Tod
U6frNG+3nksdG6bj3DSWQXMcxJ87/V6NodDP6T6aq0rnmFG+pPkZdLuOTZs6
9T8tP6f8aZddhoWvl8Yq6H6aayF+nFi5vKujr4Oe2/gxfKporgaNaygdG3LO
OZeE94led/WpMWE6Pi46nu20085boKeTTjojHKulx6+xETq+Ts+fjguM/+3o
vMrRfO2l50XWvBE65lHnUl5llVWLhx56dMu5iartp1yRdyGJyLsau8i7AACo
P0nMu7RtF527S3PzXXDBFeF4dG1PaOxSZ39vWvMunTNC4/RLz9tVqZSNVbNN
GhV5FwAAaCTV5l3RnAbKBLS+quumT/8gzJeUNyiXie6r85zoHCKa50nrt9G8
2NH5VkrzLs0PoN/9/PNvhd9r7sSddtotPAeK1h+V92jecP2M5tmu1GNX8y5l
T8suu2z4eJQ3RZmU5g9QtqLfff31d1b8/dX0rXxFcw9ceOGV4ffKbZSj6Jy9
+l55mrI/Pd96nocO3SX8ec1HFX/ulOMo89KxXXrudZ1ym3vvfTrMZzQe7cAD
R7T0ptxGGZeeA91Hf1ePR/NzRfcpzbs68zroPRHN+X7QQUeEc2dE85ZXm3cp
w1J2p4z0hBP+Ht4ezUGo10TzSn59Tp0x4XtNjyV6rDoPst5LmqdCr3N0XmRl
tJonLJ53aS4NPfea017PmZ5v/X095vjz1lY/lYq8C0lE3tXYRd4FAED9SWLe
pdxG23k6zlPHFWqbStuq2hbtyu9Na94V/R7N79je/bTPRNvUpedfaKvIuwAA
QCOpNu/SeCFlLzpXS3QeK+UfygJ0vldlJ9E6V3TukagmTXosXAfUOCl9H8+7
xo2bEOY/t932YMv9tR6s3xs/J4xKcw3qOLFKPXY174r6uvLKm1qdk0z5lzIV
5VCjR5/Z5u+vpm/lZ1rnVxakfnUe2vj948+fxr5pPJbONRzvMb6tEI1d0nFh
0XUan6bzt0Tfl5unfcSIY8J+lVHp+9K8q7Ovg8aMqR/lnfHrq827dK6e6Hbl
W8qvRo48KfxeY8vayz0rzWd4333Ptsq79t//sHDM2muvfdRyH+Vn8de+vX4q
VcryrkVc3jXXdyPoXuRdjV3kXQAA1J8k5l1U50pzPrZ3n5dffrflOOJqi7wL
AAA0kmrzLo3xUYagXEoZjeaK1ris3XffO8xZtD9cY5ei++v8q8o3lA1Ec8wp
R9JtUWaj890uv/zyxd1226vV3zrkkKPC23VbvPR39fsq9djVvCvKufTYNL+g
5vHTuKtofJXmYCjttTN969iv6DnR81f6e/T87LHHvuHceSplTtH8iuXOfaax
SbouGiOm0vgwjVWLvi+Xd+k1iuc/pXlXZ1+HruZdpX0qWxs+/MCWnpT/xeeD
L61q8y49t8px4/fRHJC6T3RsXXv9VKo05V1NTU2L6zkpFApf+O4F3Yu8q7GL
vAsAgPpD3kV1tci7AABAI6km71I+o/3dF198dZhlKOvQ+BrNbahLXadMRrfr
/jqXku6vvEjZUpQzaRySbo8yG+Umm2++ZTi+S9dFf++vf90zzCKeeurVBaqt
Y566mncp11BWoq+Vd2gexvPPv7zlHFCaIzu6vVx1pO8TTzw97CU+rk2l+Qn1
XCoX0m3//vcz4Tgt5Tzx5669vEtZYvy5KJfbROPulHvp+9K8q7OvQ63zri22
2KYll1JPOl9ZW+/XavMuzWWo+Rnj91GOpvscd9ypVfVTqdKUd2Wz2e+6vOsT
372ge5F3NXaRdwEAUH/Iu6iuFnkXAABoJNXkXcpctL/77rufDL/XWCNlQNE4
L12nMS+aH0+5hcbfxHOEF1+cVTbv2muv/cNsRJmX5vOO7q955jQ2qSNzUqu6
mncpi4nmatT5nqLzZGn+QV0XjYfSHALlfr7avpUVKWvRXHobbLBxOGdhdNvQ
obuG8ybqeYmuU77THXlXNHdfdI6r0ryrs69DpbxLr3FX8y7Npahzk7X195V3
HXXU8QtcX5p36bnXeb7i99HcjbqPMttq+qlUacq77Pn4gZvP8APfvaB7kXcl
o+L/H7pyn9Ii7wIAoP6QdzVWdcd6HnkXAABoJNXkXePHXxtmAK+++mH4/a23
PhB+H2VDKs1tuOWWfwnzL90WPydVlNFE51wqzWx0riR9P2HCLeH3up++P/fc
y1r1Ec+FylVX8y6NZYqyLZXmNIznfNHchjfffF/Zn6+mb52bS5mWzgn2xBPT
wuwmmqtQtemmfw4zneh7netX+c1BBx1R9rlTdSbvUh96/VZaaeWW/nQ+4V12
Gdahx1Np/btc3qVsqfS8X3rNOpJ36Vxxur8ec6V1fs29qSy1tK/SvEsZosYq
xuc/v+CCK8L7aOxbNf1UqjTlXf369fuxy7ve890Lule1eVe0nI9y4Y7eHpX+
Z8TPOxjVmmuuXXz99Y/b7eORR14Oc3QdP7Dzzru3e/9alvp76KEXy/4fWHXV
1cJjJrrj795xxyPFsWMvavd++r/d0XPCk3cBAFB/apl3VbPuVM16nI6T3Gmn
3bp1PU99aLtY22M6BvWVV97zvp732GNTwu1nnYfb53qe+jj22FOq/r3kXQAA
oJFUk3cpk1AWFH2vbEHreRdddFXLdco2dG4n3aZMY+ONNwvXA6+4YmJx3XXX
D7MXzW+o+5bLbDSuSH9Dcye+/faXxa233i78mZEjTwrHhelntZ7b1rlZ1afm
RtS6eWlpfTnKuzT2rPT2O+54NLxNeUr0+zSnobKmd96ZF36vS20bVFr3r6bv
ceMmtMpcLr30+vD7a6/9V/i9fk7jvrTPVM/fDjvsHM5vuMUWW4cZVVfyLm1b
6DFp3kllXfqZs88e33Kfww8fGV6ndWc9ls6+DpXyrig3VQ/afojO39aRvEv3
03hAPSfqU+8v3V/XRa+Tcizdrr+vv6ntAV1fmnc9/fTr4d/Xczxhwq3h/QcN
GhQ+N3quq+mnUqUp7xowYMBPXd6ViseDynoy76q0PI2WcToOoq0etHzSskjz
pN5yy/3hOOTO7lvoTOlvl5s3VcsSjcl96aXZNf+bU6a8H/6f1Jjp9u6r/TRr
rLFWVec9j4q8CwCA+lOrvKvadada5F1dXc9TKevSeo+2ddVvPaznaV5/7duo
dPxrT63nqbTNqvXOau5L3gUAABpJNXmX8oDSeeiUjWjut+h7rfNp3VXHjGnc
0lZbbRtmCRqvpHkAlW0oO9B6drnMRsfCa51Y57XS99pXd+SRx4XHyUe/R3lE
W2P3o7FC5UrrplHeVa6U4+gyvt4/efLM4hFHHNvqb+hxlRs7FFVbfev3aTzX
gQeOaPUzyk703Oh2/fw++xwUPhfKp7SNMHHiPeE5vHRur67kXRqvpixSfWl/
rOYSLF3H1hgs3Tc65q4zr0OlvEvXR+dI09/Qe+jkk8d2KO9STZ/+QZhZqic9
T9re0vOksXDR49D7VbfpHGzR+clK8y7VpEmPh8+LHpvOR6ffGz/ekLxroYVy
udwv3fm7ZvjuBd2rJ/MuLZN1H40rjV9/+ukXhNfr3Ilt9RAtC3s654qq0nkC
u7M0/nj33YdXfX8tYzX2utr7k3cBAFB/apV3VbvuVIu8q6vreSpth1Uz1qlR
1/N0bgJt61YztyF5FwAAaCTV5F1U8qtcbkN1X6Up78rn831c3vWq717QvXoy
74offxCf+2/bbYeG1x188JEVf1a/N368grJqXV8pax82bHiYa+tr7evROSaj
rFtjOjfccJP/396dwElR3vkfV+Nu9sgm2dybuBuzIZEdYbq7GlFB44F4gwcq
Kl544S0EDxAUFBRFBRUEBA9QEORQ5Ignooh4oYgCiiAglwpqjPGIRqn/7/uk
qv81zfRMzXTP1Azzeb9ev1dXV1dXP109YlV/+3ke97uC6HPUJv02Icz61dc1
7Ier3/xGX1/3tV59S8N10e8eJk2a5eZlVL9TbavvesL+qCr9+6zfLfTocbnL
6fXb3ltuGV2hPZX1q160aI37bW/4+wj9PiO6Xx1jvWacMYNU5F0AADQ8cfOu
+fPfcGMV6txG50a9e/fPzUdQ6Nyptudx1eVdxZznae6B/N+mhuN1qG9aVfNB
1+V5nsY6CddFfz9Z1XEv5jxP46mE4++r9HtL/T42/3PSXBPV/W2QdwEAgKaE
vKtpFHlX/da2lHd5ntcsyLtWJN0W1K36zLuGDBnprt31vYDmzdM69d1Uv1TN
b6i+pIWeq5xH3xPoNUaMGJsb4yZu3qVt2rU7wJ869TH3HUXYH1Tt1jbLl292
30VoG435qnFT1VcqnMtwwYKlru3qD6vvZHRf6zVOq+ZajOZdeq7uq5/V9Olz
/EGDbnH3lXlF/31WLqXfMC9YsMy//vpbt5or8tFHFwRzCy7MrdN3K/qeRuPw
apzY/N8Ev/rqKvcc5W1x/t0i7wIAoOGJk3f9Y17oti63UbaicyudX4SZVKFz
p9qex1WXdxVznqftdM6kNui8SmP8r137mXssTt5VV+d5ysh07KJ5V3XHvZjz
vJtvHpH7HDQHgs77wvcQlt5DdC7wQkXeBQAAmhLyrqZR5F31W9tS3mXXWS2D
3zK+nnRbULfqM+/Sb1S7dj3Lfb+gPkpaN2XKI+77AOU3+j4kHOe0stL3DHoN
jVMarqtJ3qXvQMLHlVNpnb5b0X2N4dq6dWs3Fk+h1y80zo1eO8y7NA+g5tDS
9xPRbfSeNU+j5qvUff37rNcMH//gg2/c9yyaNzFcN3jwsK1+I60+Xfnf+URL
Y7zqOXG+B3HHgbwLAIAGJ07e1bPnFe7cYs2aT3PrNN5ddK6sys6danseV13e
Vex5XqFzurh5V12d5+WPjx/nuNf2PE/9zzQXQlXjFer89vDDO1Z7jkfeBQAA
mhLyLooqfW1LeVc6nW4b5F3zk24L6lZ95l26Ntf3CPo9q77z0HPUB+rccy/y
Fy5c6Z6v3+QWen6xeVd0DkT9jljr7rprkruvcWuqypFUcfIu/ZZay6NHT6iw
TTjGj75/0f3Kfo+guRYvvvjS3H1956HnRMfHCb8bufrqG9y8hZW1U98rnXXW
ebH+3SLvAgCg4YmTd6m/Uv78witXfuzOE9QHvNC5U23P46rLu4o9zys276qr
87z8vCvOca/teZ7GKWzVqpU7zuF4jvl15pnnunM9/caqqvdD3gUAAJoS8i6K
Kn1tS3lXJpM5JMi7ZifdFtSt+sq71K9Jj48dO8V9n6HfuI4fP92NeaNbrdO1
ux4v1IZS5l1he8JcSvMv6PfIVR2DOHnXc88tccv6PXN0myeeeDFowzPufmXf
g3Tu3KXC9yfnnHOhe47mcgjX6bsNtVljGmosneicD2Hpd8H5c8UXKvIuAAAa
njh5l84D+vYdUGGd+hHp3OG664YUPHeqzXmcqqq8qxTneaXMu0p5npefd8U5
7rU9z1Mp89Kx1mN6nfy+XhrLWo+pT39V74e8CwAANCXkXRRV+trG8q7jg/m7
JibdFtSt+sq75s1b7B6fO/dVd1/j7em3tuHvf7VOv3vt23dgwTZU9p1N+P1C
sXlX+/YHuudUdQz0PUi/foO2Wh/NuzQ/hJbDeSvCUv6l9ZoTQvfjfA+i30Tr
OfqNcv5rak4LjacT3WdYGq9Hv/2N8+8WeRcAAA1PnLyrY8ej3HxT0XXLl2+q
cD5WX3lXKc7zCuVdGiO62LyrmPO8/LwrznEv9jxv06Zv3dxi+fO/qvQZKDus
7hyPvAsAADQl5F0UVfralvIuz/PODvKuO5JuC+pWfeVd48ZNqzBmi367qvvh
/A4qXfcff/xJBdtQ6Dub/PkQ1AdK36nUJO/Sa+u3v0uWbKiw7+hvajVOz4UX
9tyqXdG8S/cPPfRwv1u3Cypso+fp98Dr1n3h7sf5HkS/EdZ+33zz/dy66LwX
ixev3SpbC78r0vuJ8+8WeRcAAA1PnLyrV69+7hwo2j9I5wQ6D5gz5+Uqz51q
eh6nqirvKsV5XqG8S9mSzuui69QPqyZ5VzHnefl5V5zjXtvzvPw+W5oTNj9b
O/nkrm59ded45F0AAKApIe+iqNLXtpR32bXXJUHedWPSbUHdqmnepX5D+i4k
Wg8//FS1j+t7Cc13EO5P3y/ss8++Fcbj0/cbe+yxR8E5ugt9Z6N+TvpeYcaM
ue6x7t0vc797rUnepfnLNfe4fv87fPjd/oQJD9t+e1cYr0bfb2i/aqe+1wnn
VcjPuyZOnOnua9wczdt15ZXXuvtDh96R21ec70HCPmHRuS40ho2+s9Fr9Ohx
uXv8mWdeyz2u73G0bsyY+2P9u0XeBQBAwxMn73rttXfdedNpp53pT578iDsf
UaajjCmc26mmeVeh8zhto7yrQ4cjtnpc51KlOM8rlHeFWZrmxtI8qEOHjnL7
qUneVcx5Xn7eFee41/Y8b+TIcW78xnHjpvpDhox0j6u90f2o31xluVx+kXcB
AICmhLyLokpf21Le5XneDbq+ymQylyfdFtStmuZdldUf/9ir2sf1nUD+WDTK
gzT+S3h/9uxn3fYvvri80jYU+s5mxYqP3HX/3nv/wT/44EPd9wKaG70meZdK
32uoX5b6Yek7mpNOOs19jxF9Hb0HPa4+XOH3P/l5l0rzU3TseKT73kTbjhgx
tsK84nG+B9Ex1Zzlkyf/KbdO3yvpuyZ9r6Lbe+99sNJjtGjRmlj/bpF3AQDQ
8MTJu1Rz5ix05zvKXzRXlvKbd9/9a7XnTjU9z9M24ZxS+aVxAEtxnlco79J6
nTPpdXT+pP3eeOPwGuVdxZzn5eddcY57bc/zpk+f4/rAqQ3KDwcMuLHC+aX6
f+k5yuOq+9sg7wIAAE0JeRdFlb62pbzLrunGBXnXKUm3BXUrbt5FJVPqz6X+
YXG312+Bw5wvTpF3AQDQ8MTNu6jGXTU9z3vyyZdcP7VwTrSqirwLAAA0JeRd
FFX62sbyrseC32wemHRbULfIuxp2LVy40j/ooEO2ms+hstLc5kcddYz/1FOv
xN4/eRcAAA0PeVfTqJqc56mUjd1yy+hY25J3AQCApkR5l53/+MMuXrGFoqjS
1YhLVr6b9H/fpZDNZl8P8q6WSbcFdYu8q+GXxuLRnBXVbafxcAYPHlajfZN3
AQDQ8JB3NZ2Ke56nOVo13qLGcIyzX/IuAADQ1Ew+1v8ORVGlrf79/R2S/m+7
FDzP2xSMZ/jTpNuCukXe1Thq1apPSrJNfpF3AQDQ8JB3Na2Kcw6nOcmic3lV
V+RdAAAAAOBs73neFpWWk24M6hZ5V9Mu8i4AABoe8i6q2CLvAgAAAIDttkul
Ur8PxjJcnnRbUPfIu5p2kXcBANDwkHdRxRZ5FwAAAAC4ubuODfKuKUm3BXWP
vKtpF3kXAAAND3kXVWyRdwEAAACAm7trYJB3XZl0W1D3yLuadpF3AQDQ8JB3
UcUWeRcAAAAAuP5ds5R3pdPpI5JuC+oeeVfTLvIuAAAaHvIuqtgi7wIAAAAA
l3etU95VXl7+m6TbgrpH3tW0i7wLAICGh7yLKrbIuwAAAAA0dalU6lfBWIaf
Jt0W1A/lXU8/+JH/zHSqKda02zeSdwEA0MAo73pg6PrEzxOoxlvDLl6xhbwL
AAAAQFPmeV73IO+aknRbUD+GdV/Rb1j3twdSTbeGX/z24Un/HQIAgP/Pzs/2
Tfr8oCHX+Z1HrD6r02D/6rOeGJ90Wxpq3Xbx2wP69/d3SPpvGQAAAACS4nne
c0HedWzSbQEAAACAfHbNMkfXLJlMpl3SbQEAAAAANDwtWrT4eZB1fbHTTjv9
a9LtAQAAAIB85F0AAAAAgKrYdWMPXTfa7QNJtwUAAAAAKkPeBQAAAACoil03
Ph9cN3ZKui0AAAAAUBm7ZnkouG7pmHRbAAAAAAANC2MZAgAAAGgM7JplQJB3
9U26LQAAAACAhsXzvCHBWIa3JN0WAAAAACjErluODa5d1qfT6R8m3R4AAAAA
QMOQyWR+bdeLX9v14me77rrrj5JuDwAAAAAUovEo7Prl9SDzWmDXMz9Nuk0A
AAAAgOTZNeLE4FpxYNJtAQAAAIDq2PXLb60+CsZkfz+dTh+RdJsAAAAAAMlJ
pVKZ4BrxE6sfJN0eAAAAAIijvLz8N3YN81ZwPaOan06n2ybdLgAAAABA/fM8
7/ng2rB30m0BAAAAgJpo1qzZ9+2aZrBdz3wRyb0W2bqzdt55539Jun0AAAAA
gLpn14HnBteDH3EtCAAAAKCxsmuan1jdZPV5JPf6xPO8Iel0+ndJtw8AAAAA
UDfs2s+z+jqYt6tD0u0BAAAAgGKl0+kf2jXOVXaN83Ek99I1zxNWZ5eXl/8s
6TYCAAAAAEpD83TZtd6G4LrvxqTbAwAAAAClVFZW9s92rXO41d0azyKafVm9
rjEQM5lMO22XdFsBAAAAALWyvX7bGGRdC+z+jkk3CAAAAADqkl377G91g9Xi
vOzrS1v3iFUfW96Pcd4BAAAAoHHQ2B7Bdd2HLVq0+HnS7QEAAACA+pTJZH5q
dYpdE03wPG9TXv71d1v3ktVQ26YT4x8CAAAAQMNj12xnWW1RpdPpfZNuDwAA
AAAkbHu7Nkpns9medp30J6vP8vIvjYuxOsjGLtA8yPac7yTdaAAAAABoqiL9
ulRXJd0eAAAAAGho7Frpn6z28jyvn9U8W/46P/+y+tweezqTyVxntx2aN2/+
46TbDQAAAABNgObrGhb5beIwrUu6UQAAAADQ0DVr1uy76XR6N7uO6mY12mqh
1d8qycDWBfOA3Wh1WiaTabXTTjv9a9LtBwAAAIBtxA52rTWRfl0AAAAAUDqp
VCpjTrfrreF2nTXf6tNKMjDVKttmRtAXrAs5GAAAAADUjF1X/ZvV9Ei/rm5J
twkAAAAAtlWpVOpXdt11UDAX2N1WLxWYD2xL0B/sSavbbfkiuz24vLz8N9sx
FgcAAAAA5Gi8Dbtmeie4nvrarp2OTrpNAAAAANAUtWzZ8n81z5ddm/WymmDL
iwv0BQvzsKVWD1oN1NiIVnuUlZV9L+n3AQAAAAD1ya6PBkSukz5Op9Ptk24T
AAAAAKCC79g1W/NMJnOMXbf1t5pq99+y+qaKLOx92+5pqzusethzD1GWth19
wgAAAABsQ+x65//s+uf1SNb1hF3//DTpdgEAAAAA4gvmBjtZc37Ztd1ku7Zb
aPXnqvqEWb0RZGb6/eOZ9twD0un075J+LwAAAAAQV7Nmzb5v1zM327XNV8F1
zqe2fFbS7QIAAAAAlI5d6/3ArvWyVscFYyOOseU5Vmusvi0wNuIWqw1Wz9n9
+5WhaW7nYJ6x5nY9+d2k3xcAAACAJm9HzWts9WHkeuaFFi1a/HfSDQMAAAAA
1K9UKvV7jWcf5FkDlW8p51LeVc18YZusnreaZnWLretpt51tX224vgQAAABQ
lzKZTEe7BlkeuUZZa+tO2Y5x2wEAAAAAW9tRc315nre/VVfNGWbXkWOt5try
arv9exWZmOYUW2vbLbB6wJZvsrrYlo9OpVKtbfm/tuNaFAAAAEANpNPpI9SH
K3LdobELr9h5553/Jem2AQAAAAAare/Y9eX/ZDKZfewa8zS7vdpu77V1z1qt
KzReYqS+tloZjK94ly1fpd9kan9Wv9b+k36DAAAAABK3g10vdNH8w5FrCf32
bkTz5s1/nHTjAAAAAADbPo2XaNehB2YymXPsdpD6elm9ZMubq8nCwnrXtn/G
bifb7TCrPpp7Ohi/ZPd0Or1z0u8RAAAAQOnZ+f4/adx1/UYuMq7636xGl5eX
/ybp9gEAAAAAEEqlUrva9epBdu16XiaTuc6WJwXjk7wfMw+LjmPytrKxIFMb
aususX2eEPQ/a5b0ewUAAABQPc0HbOfv10avCez+Z1ZDgnHRAQAAAABoVMrL
y3cJ5g87ya5teyoTs9txdv9Ru11ktbEmuZg97892u8TqMVu+x24H2O0Ftt9O
6XS6jeYrY+x/AAAAoN5tr9/BWT0czAUcnr9/bLfX7Lrrrj9KuoEAAAAAANQ1
uwb+ifqK2e1+mUzmZKvLbfk2uz6earXAltfWsL/YJ1ZvWc2150/Ub0mtLlXu
ZvtuZ+tblpeX/yzp9w0AAAA0ZsqxNC5DdMzCIOd6TWMZ2jn3vyfdRgAAAAAA
GpoWLVr8PJVKZeza+XCrs636W91hNSOYV2xdDXMx1fv23MV2+7jd3hfMU3Zp
JpM5Rb9RTRvGXQEAAABydrTz5A52jjxF83FFMq6v7HaCnT63TbqBAAAAAABs
C9RfTH24MpnMAcqt1F9Mc4IF84vNDX5/+mVtsjGrV61mW42x/V4dzMF9mN1m
ycUAAACwrbJz31Z2vnurnfduyuvLtcZue+scPOk2AgAAAADQFDVv3vzHdn1e
nk6nD7Xbs9RfzK7T7wzmF3sjmC+sppmYaqM9d2HQ72yU3b9S/dEymUzHVCrV
WnN4J/3eAQAAgOqUlZX9Ivjt2NK8jOszjY1g59HtbbMdkm4nAAAAAACo2s47
7/wvqVTq93Ytv69d03e2uiDIxUba7TSrecFcYR/VIhf7SN8dWD1pNd5qsK3r
abddNM+Y5jRjbm8AAADUJzsP/aWdk16s81yrbyMZ17c6b7XlU5mXCwAAAACA
bZt+A6s+Y8qrrE7IZrMXWQ1QvzGrWVav2OMbapGNrQue+yere6yuteph607U
a5WXl7ew258m/f4BAADQ+Ni55E7B764WWG3J68u1zG57KQdLup0AAAAAAKDh
UT6lbCybzR6oecZs+bJgnrGJwTxjb1p9Upt5xmwfi+32cY0zY7djbf/X2e0l
wescrPnGGFcRAACg6Uqn0zsHYxW+lH8+GWRcA+zxVNLtBAAAAAAA24wdlU0F
c4QfZrena05wz/Nusdv77XaO3S6x2pz/e9yY9Yk97227nW/1kC3fEXy/caHG
cLTl/dR/zOpn2zE/AwAAQKNl53W/tfO7Pnb7aiXnhJq/tp/G1E66nQAAAAAA
ABprJpVK2U3mgKA/V1f9djebzd6s/l5Wj+o7DrtdX4tsTPWhfvNr9bTVVLs/
QnOaBXObHad8TN+TBPkYAAAAElJWVvbPGktAYwgEc87mn9ctCvKv3ybdVgAA
AAAAgGJks9kfeJ7XLJ1Ot7HlI2357Ewm09eWb9XYikH/Mf3e9wO7/aYm2Vgw
r/kmq6XBGI2Tbfl2/XbYls+zOtZeax+rMlv+iTVn+6SPBwAAQGNm51W/1nmW
nW/NtNvPKzk/e1m/hdJ4hkm3FQAAAAAAICHbK5fyPO//gpzqGLt/rvIrq+HK
s4Jca0mQc31bm3wsGJ8xzMeGB/nYuXo9va5en3wMAAAgVh+uT+2xB63OsuX/
Srq9AAAAAAAAjZDLx9R/K5KPnRfkY7eH+Zj6f9UmH1N/s7D/WGR8xZFW12j+
Mavjg3EdNcDjL609OyZ9QAAAAIr0nVQq1drOd3rZuc8TdvtFJb8hWma3N9nt
/nb7T0k3GAAAAAAAoInZIZPJ/FT5WDqd3lfjHQb5WP8gH5sS5FoaH3FzLfIx
1SdWK+25z1vNsLrL7l9vdYnVqfa6h1rtpjF+ysrKvpf0AQEAACgvL29h5ykX
23nLw8G5TP75zefB+IXntWjR4r+Tbi8AAAAAAABqJJePWf3BqpPVOdls9kqr
26zu1++erV6z2mD1VS3ysS+t1lktsnpc+wz2fZXGWAwyuf2sWpaVlf1iO/qQ
AQCAIqVSqd9rTlWrSfqNT4FxoJ/U+YjOgZJuLwAAAAAAAOpXs2bNvp/NZn/r
ed4eVh0ymczpdnuZ1Y22fqzVbKsXrVbZur/WIh/L70M20+oe7V+vo9ez6phO
p9tY/a5ly5b/mfQxAQAAydJvZuw8oYvV3VZrCvTfetLOIfra7d6MUQgAAAAA
AICa0Bzw5eXlO6VNMBfY8cHcYFdrjEWrB7LZ7FNWr1tttPq6FvmY5iH7wG6X
hPOQWY2y+wOCsYv0/ddBtuxZ/Y/VvyV9XAAAQO3ZacUP7f/tRwXnEssq61+u
PurKt2x5r6TbCwAAAAAAgKYnm83+QH3IrHa3OszzvNOC+cE0T9idmnvD6jlb
Xm71kS1vqUVGprnp11q9qnEWbR8TrYZZ9bM636pzJpNpp5xOeZ1yu6SPCwAA
TZV+q2L/bz7YarAtv1LJHKT6vcx8q2vs/9/78P9tAAAAAAAANEI7lJeX/yyc
h8zzvKOtuln1sRpqdZ/Vo1YLNcaR1We1GWdRzwvGSHrF6jGrCVa3Zv8x39m5
9thxVvtblVs7fslYSQAA1I7yquD/6f3t/6fP5vf/Dn7rot+s3GTbHWLnAf+e
dJsBAAAAAACA+tasWbPv5o+z6HneBUH/rmFBf68nstnsIqt1QX+w2mRkf7Va
bfVykLmNL5SRpVKpX/F7dKDxGNJj3Y+GdV/Rj6Ko0lff02dOPOPoQX60uh0z
5MOLT7zrpSu6PvzAtd2eOynpfwMAAAAAAACAxkhjKQXzf2kesAOtTsyfi8xq
jtViq/VWfyumH5n6o+X1I7vK6jxlZBpr0SqlzE7ZXdLHBmiKbr3ond+NvGzl
V3OnfbSFoqjS11NTP/RV+esfGrnRH9XrnQeT/jcAAAAAAAAAaCrKysq+l8lk
fu15XtbqIGVkVhdpfpFIRvak1WvKyGz9l7XJyKw+t3o3GGvxcav7rW7Lm4/s
gHA+MjIyoHjKu8b0WfXphx/6PkVR9Vcvz/3UH30FeRcAAAAAAADQkGkOkmg/
skwmc0KkH9lwq0nKyCJjLdY2I/sieP6iIHN7wJZHWA2w5e72eien0+lD7f7u
dr9Zy5Yt/9Oat33SxwdoKMi7KCqZIu8CAAAAAAAAtk3hWIupVCqTTqfbR+Yj
6583H9mrVmtrOx+Z1Te2n012+6bVfFt+2Opuqxvtfi+7PcvqaHv9fawtu5aV
lf3Cmrdj0scHqAvkXRSVTJF3AQAAAAAAAAhpTEONbah5wDzP2z+bzR5ry+dY
9bX7Q63utXWzrV6w5RVWH1ttqWVO9qnVKnv+S1Z/0r6D1+hj1c1es1NeRvad
pI8PUB3yLopKpsi7AAAAAAAAABRph2w2+5Py8vJd0ul0m0wm09HzvK627hKr
QbY82mqa1dN2/w2rjbb8VS0zsk+sVipvs5plNc7qZqveQT+yo6z2tjaUWXt+
prYlfXDQtJB3UVQyRd4FAAAAAAAAIAm77LLLf5SXl/8mk8m08jzvYKuTNEeY
1UCrUVZTs9ns3CAje8/q65rmY+p7FvRBe9tqgdVMq3s01qK97uVWZ6TT6SNs
272smiu3246MDEUg76KoZIq8CwAAAAAAAEBjkU6nf+h5XrNsNru71WFWp1r1
tHXX2u0Yu33Qap7VsmBOsdr0IVN9FMnIZgTzkY23ukVjO9rj59lyZ1tuZ21K
t2jR4r+TPjZoGMi7KCqZIu8CAAAAAAAAsC0LMzKrPawOtzotGGvxemVkVg9Z
PWv1ptVme/zbInKyL6zW2T5es3rS6gG7P8JqQNB3TX3YDkqlUq1t3W9btmz5
n0kfH5QWeRdFJVPkXQAAAAAAAABQUWQ+srYa71DjHlqd7HleD2VXViOtplg9
ZesWW20oIiNTbbZ6y2q+xly027Gal8yWr7DXPceWj7Xl/W05Ze3aKenjg8LI
uygqmSLvAgAAAAAAAIDSKC8v//dMJvPrbDbr2e0BVid4nneBVT+rYbb+fqvH
bHmh1Wpb/rSIjOxL28d65W1B7jbVarQtD7LbS+21T7flIzU3mS2XmV8kfXya
AvIuiopX77//95JsExZ5FwAAAAAAAAAkascWLVr83PO8/1M2FfQnO12ZVTjm
oi1Ps3ralt+w2mjLXxWRk30aZG2vWD1uy5OsbrflazTmovqxaW40jf+YSqV+
37x58x9bG3dI+iA1FjXJu5Yv3+z36XON3779gf4ee+zhH3zwof6ll/b1V6/+
i3t89OgJ7jNbu/bzxLOJJGvp0o3+kiUbGuT+Fy9e6z6jKVMeTfQYjR8/3d9/
/3b+smXvleS99+rVzz/++JPqrL23336P//jjL1S7Xf/+1/uLFq2OtU/yLgAA
AAAAAABofHbZZZf/SKfTO4d9yTzP62zL59lyX1seanWv3Z9lt8/b7XKrD4sZ
c9H282e7XWm3L1k9YssTrG5T3zV7zQvttovVwdam3TQ3meZNS/oYlZLmdbP6
uzJIu7tjoe3i5l3KGA488GCXc1122ZX+zTePcNnXcced4H/wwTduG/Iu33/9
9XV+q1at/AcffKJB7r+h5F2TJz/id+hwhP/WWx+U5L1fc81g//TTu9VJW5Vz
HXNMZ3/z5i3Vbjt37qt+p07HxernRd4FAAAAAAAAAE3G9sqhWrZs+b/KpZRP
ZbPZE4O8ql+QX40P8qwXg3zrz1ZbapmTfWPP3aS5yez2uby5yfpobjK7Pc5u
26VSqYyt/5+ysrLvJX2QKhNkfqqvNV+b+uFVtl3cvKtr17P9Pffc03/22dcL
bpNk3qUsJE4eUdelvj06BnWVdxW7/6TzrmI+o7o+toVKme6oUffF3l453n33
PVTtduRdAAAAAAAAAIBq7JDNZn+i8Q0zmcyeGu/Qbk/xPK+HLQ+wGhGMi/iE
xkm02zXFzE0WjNe40WqJLT9jtw9Z3WnLg+11L7flM235aFvex5Zb2u0vmzVr
9t26PADKusLMy15vi9W3dn+6xqGMbhcn71qwYKnb11VXXVfl9/dh3jVx4kz/
yCM7+W3b7uV363ZBhT48Tz+9yD/77PPtsbaulKMtWLCswj66dDnVnzbtcZcb
aJtTTz2jwhhx7733tX/99be6/mZ77/0H/7zzuvvt2x/kjx07JbfNnDkvu/0o
ozvkkMP83r37u/EYq2q/+uQMHjzM7Wv33Xf3jz32eH/GjLm5x2+66XbXv62y
Y/PII8+5PnD5fxsaZy96bAYMuNHtv02bNq4/UvS9F7P/QrVy5cf+JZf0cZ+F
xg/s0ePyrfKu6o6VxvI76KBD3Gdxyimn+0888WLuMY1HqDEttW+1/cQTT3Gf
nR5TLqXX0jHU83RM1S9QbQ7bH/aDuuCCP7rPW+37wx/28ffddz+33xUrPnKP
V/Xe1Wbd12vE/SxfeOEt9xnMmbMw996POOJof+bMpys9/gsXrsytmz37WdeH
S88/6qhj/LvumlThORrTUPsk7wIAAAAAAAAAJGTHsrKyX2QymTLP8/YO5ybL
ZrOXWA2ydXdYTbXluXa72Gq9LX9RxLiLn1uts/28ZjXHlqfY7Sh7zetsuact
d7Xljra8l3Kq8vLyn21XxdiEUWHeFcnkXC6nvm9W92l8SW0XJ+9S3qF9zJu3
OFbedfjhHV32pD4xyqOi48w98MBs/7TTznT7HDlynH/ooYf77dod4K9f/2WF
fZxwwskuh3nssefdNspRwn0oM1KGMWrUvS63UaahjGTjxq/c48pj9PgVV1zt
T578J//OOye6NimDC1+nslJ+0rp1a3/o0FEuq1EGo7ZojLo4eZRef8qUR9z9
W28d47K91157t8L7uvLKa/3589/wp0+f4zKTvfbaOzcfVTH7r6y0vXIe5VRD
hoz0J0x42M1xFc27qjtWelzbKzPTZ6fbMDdSJqZjr89Pn6VyTo1xeccd4yvk
Xcol9Zg+T2Wfzz//phsTMz/vUuakv5nnnlvi/n6Uealvlbap6r3rb6Rz5xMr
5F3VfZbKu3RfbZ869TH3mYQ57Dvv/Dm3H2VmOj5hO9V3UTmXjqOO1w033Oa2
iR53tV37rm5uMvIuAAAAAAAAAEBDor5aqVTqV57nlafT6X0zmUwnWz47m832
stsbre4K+lbNs1pqy+9ZfV1ETvYX289qq4W2/LjdTrS63Zavsbo4zLcK9EVz
uZe18WO7PT9O3qV+XXru229/GCvvWrp041ZZWZgh5I9npwxEjyuziO4j+lrK
T7Ru1apP3FxhykX69RuUezzMQcJ+R+pzc/XVN1R4nXAsvIcffqrStoePKxcK
16mt6nMU5nXV5VHR/eSPuVfZWI/KQ5SlXHfdkKL3X1kpO9K2mn8q/32GeVd1
x0rj8hXKOvV3oUwp2vcuWmHepb+B/MfCv4to3tW5c5cK22iOL20za9Yz1b53
ZVVh3hXnswzzLmVd4TbK4bROWWS47qSTTvMPO6xD7r7GzdQ2w4ffXfC4P/ro
ArfNpEmzyLsAAAAAAAAAANu8Zs2afT+dTu/seV7WbttnMpnjs9nseXbb19YN
tbrX7s+22+et3rblD+PkYYWyrrzMS/XNvm0Of390n3c+r+p7efVJ0vPWrPk0
Vt4VzXQ09pvWKV8I1ylHUTah/jvhWHRhNlDZPpQ/aN3LL69wOZiWwz5EKvUH
CnMQZW1aVo6k7ChaWq/+S5W1fdy4aVu1U6VcTX2w6iLvUh1zTOdcTlPqvEv7
1f6j66Lzd8U5VurDpc9Jfb70WUb3pc9OOVOh1w/zLr2H2uRdq1f/xW2j41KT
vCvOZxnmXbNmzcs9rjxV66LjE2ocx+gxVG528sldXT8wHZ+wT2G01PdM+xk2
7C7yLgAAAAAAAAAAKrd9Op3+YTab/a3d7uZ53sFWXTKZzIV229/W3xbM1RUr
F9unzaH+HVes+LKq7+U1Jpy2V/+XmuZdymmimYfGotP9gQNvcrlAmIncf/+M
gvtQJhHmF+rfpbELL7roktzjyif0+KJFa9y4dGHWoHwkv95996+Vtl3j8el5
y5dvqrBe8039oz2f1Une1bXrWbk8pdR518EHH+pypEJ5V9xjpeVzzrnQbatM
KZyPTf3sNH5hdXlXZf2/4uRdmzZ967dq1cqNX1mTvCvOZ1lZ3qXPRuv0WYXr
NHahxtaM7kfHRdmZckJlfk899UreZ7bM7Sfst0feBQAAAAAAAABAzXme93lV
/bps+Rurr215wwF7HTNtTJ93Pqvqe3mNNRjn+/vq8q4NG/7m8oO+fQfkHn/z
zfdrlHdFs5KePa/wBw26xfW1UX72j0xkTYU+QXErHDtPfcii69VW5RrK2ZSX
lDrv0hh75513cS6PKWXedfzxXdx4fIXyrpoeqyeffMnNx3bmmee6++3bH5hr
e13kXeHfhuZpq0neFeezjJt3ae6x/D5yYb3xxnr3mPLX6Oca9u+67bY7ybsA
AAAAAAAAAKglz/O+KDDG4d/tdksmk5mRTqfbats483epn03Hjke6rCp/bDpl
YWE/oOryLs3hpeVx46bmHg9zh/Hjp8fOu/SY8o0zzjjHZRgzZszNbavx5tTn
pn37g/x1677IrVeu8t57Xxd8j5qXSX2JonNNaaw67Ud9sHRf49epHRr3Lj/T
CfMozcml+2PG3F9t3jVnzsIK494Vs//KSsfmH/Nrrak074p7rKJj9l1ySR83
vmG4rD5eS5ZsqPC6YYZVbN41dOgdbptnnnmt2vcezbvifJZx8y5lhsoko6+l
3DZcDuc3i2ZrYT6sx8i7AAAAAAAAAACoHc/z/hbpz/Vt0JfrQ6tRGgcxum2c
vEs1b95i149K/Y8uv/wqf8iQkf6FF/askNfEGc9Q/WGOOuoYl1FNnDjTP+yw
Dv5uu+2W658VJ+9SnyL17VJmo5o582mXhYTba34wbd+p03H+PfdMdjmSspRo
jlFZ9e7d370/9cvRfk8/vZvLTdSvSY+/+uoqd//SS/u6MevU/gMOaF8hj1KG
pLmuNJag8o4RI8a6fCR8X8qI1JdNfbk0l5T6SGl8vWL3XyjD0/vRPpT9aH/K
hcK8K86x0txoysQ0RuDYsVNc1hXO2aUcK3wPw4ff7U+Y8LB9Lr1z/fdqmnep
rYMHD3P70TiJevzccy+qkGUWeu/RvCvOZxk379J70d+9Xlv3lQPqeKhfoY5n
584nuv5d69d/mXuOPl/t58UXl5N3AQAAAAAAAABQS+rDZfWZlfpzzcpms3sV
2jZu3uW+n395hcu49tlnX5clHH30sW6suTCziJN3vfLKO24+JD1fGYvyFs0P
psxAWUKcvOuOO8a7nCXaf039mCZNmpV7zuzZz7rcRuPX7b9/OzffV3Xzjyk7
Ue6mfEjPU5ah/US30Wuov4/6uiljUeYRzaPCjEjHRjnJkUd28pcu3Zh7Xz16
XO7a07btXi63y8+Carv/Qu9pzpyXXR8lHW/tVzlNNO+q7li99NLbfrduF7jP
XJ+RcimNMxj9m9Djaou20fiJGk+wNnmXcizlUjo27dod4F911XVbzbdW6L3n
513VfZZx867p0+e4deGcZatX/8VlaeorpjZ06XKqG78w2kaND6nHq/3vibwL
AAAAAAAAAICCPM/7KpvNjmzZsuX/VrdtTfKuhlKafyl6XxmEcodTTz0j8bYV
qkLzd1H/qMrGM2wIpXEelZlF88HqSn+H6qdW3XbkXQAAAAAAAAAAlEZjzLuu
uOJq12dJ8ztpDL5rrhns+kMNGHBj4m0rVORdVVdDzbtUGsdR/RrjbKt+YOoj
t2bNp9VuS94FAAAAAAAAAEBpNMa8S+PknXnmuW58PeVcGt9O4+NpPMSk21ao
yLuqroacd6k/Yfful+XG5Kyq+vUbVGGMxKqKvAsAAAAAAAAAgNJojHkXRdV3
aZ6xZcveq3a7119fF3uf5F0AAAAAAAAAAJQGeRdFJVPkXQAAAAAAAAAAlAZ5
F0UlU+RdAAAAAAAAAACUBnkX1VBq8+Yt/qZN31a7ncYWTLqtpSjyLgAAAAAA
AAAASqOp5F3KUW666Xa/ffuD/H333c+fPfvZSrfr3/96f7fddiu4nwcffMLP
ZrP+008vKriN9t29+2VbrR83bpp/3XVDY7VXr3PEEUf7bdvu5Q8ZMrJej9X8
+W/4Gzb8rcI6ZUwdOx4Zu/01Le1fx2zt2s+r3fb883v469Z9kfjfVLFF3gUA
AAAAAAAAQGk0lbxr3LipfuvWrf077hjv8qh33/1rpduVIu8aPvxuv23btltl
Rhdc8Ef/9NO7VdvWhQtXurb27TvAf/TRBf5rr71bb8fp/vtnuPf3zjt/rrD+
gw++8U888ZQ6y96URerYx9n21lvH2LEZmPjfVLFF3gUAAAAAAAAAQGk0lbxL
WdPZZ59f7XalyLt69uzttpk165ncuvfe+9r11frDH/aptg2jR0/w99xzz1hj
+5W6xo6dUmneVZe1fPlm934XLFgWa/tly95zn9GiRasT/7sqpsi7AAAAAAAA
AAAojW0h79JYeIMHD3NjFe6+++7+scce78+YMTf3uLIRZThh3XXXpIL7KkXe
dfTRx7ptrrji6ty6xx57Pvf6b7yxvuBzzzjjnAptvfjiS9169X/aY489Kmy7
YMFSt80jjzzn7ivTu/76W9227dod4LK1Sy7ps1VftvHjp7tjpP0dcEB7149s
xYqPcn27oqV1S5ZsyN3XvuMed+V2Xbqc6k+b9rjfocMRrs/bqaeesVVONWrU
vf7++7ersE598Dp1Os5v06aNf9RRx2z1mekY33DDbYn/7RVT5F0AAAAAAAAA
AJTGtpB39erVz43/N3ToKJdHKfdRNjN37qvu8Zkzn/aPPLKT37nziS6PqSpv
KjbvUj8utUVzXSnD0TiAWj9gwI3+YYd1cPt+6KEnC+7/mWde83v0uNzlR2rr
c88tcevj5l3avzIuPW/ixJluP4MG3ZJ7jo6RnqPX0OMjR45zGduaNZ+6zEvz
c+lx5U16j1q3fv2Xri3aVzTvqu64K+/S/RNOONmfM+dll/kdeujhblzE6PtQ
Jta169m5+5rDSznX8cef5E+e/CeXaylXiz5H7VeGlvTfXjFF3gUAAAAAAAAA
QGk09rxLfYWUqUTnldq8eYvLQqJzZZ1yyun1Mp7hCy+85R6fNGmWu33qqVfc
euVfymyUu0Uzo8qqsmwrbt6l/ev9h9ucf34P/5hjOrvlt976wOVTl112ZcHX
rmo8Q71+2PY4xz3Mu95++8PcNpo/TetWrfrE3d+48St3v3fv/rltXn99nVun
edAKtVPHUttobMOk/wZrW+RdAAAAAAAAAACURmPPu8aNm+ZyD+VM0fX9+g3y
99pr79z9+sq7wpxLeZH6LQ0ceJO/ePFat059rrp3v8w/55wLq2xDMXlX585d
KmxzzTWD/f32298th+MVzpu3uOBrx8274hz3MO9Sf63w8enT57h1L7+8wt0P
sy31fwu3UW528sld3fiHd9450WVi+W257bY73fPUHy7pv8HaFnkXAAAAAAAA
AACl0djzLo3Hp9xj+fJNFdbffPOIIGv5zN2vr7xL4wFqTiwtjxp1nxu/b8yY
+/1DDjnMrbvlltG5xwtVKfMutUfzeGn59tvvcdu/+eb7BV87bt4V57hXlnfN
mjWvQk42f/4b7n50zEWV5hxTdqYxFHXswn5yYenY6nmzZj2T+N9gbYu8CwAA
AAAAAACA0mjsedfkyY9U6C8UVt++A1xWEs6fVV95l14jHM9PY+1pW+U1Yf+l
hx9+KsiJNhd8jcqyLeVIxeZd48ZNddvreYVeO8y7Vq78eKvHonlXnOMeJ+8K
+76pH1pl7dFcaxqPUe8hup9bbx1T5efQGIq8CwAAAAAAAACA0mjseZfGw2vV
qpXruxSu0/h37dsf5HftelZuXX3lXXrd6Nh8GtNQ28+d+2qFfGf27GcLvkZl
eZfG9YvOexVtS9y8a9GiNW77K6+8tsI277//99xyOB7jiy8u36pd0bwrznGP
k3epH5ju9+lzTYXX2rDhb7nl++57aKts7cYbh7t1Op5J/w3Wtsi7AAAAAAAA
AAAojcaed6l69+7vshjN6TRlyqOuf5WymCeffCm3TU3yLj1X/YfyS2P8hRmT
+jHlP/7EEy+5x+6998Hc/jTunsYv3LTpW3dft5qXStsXakNlederr65y7br0
0r7+ggXL/IkTZ7r91iTvUvXtO9A9R/OIKUdSXqUxF5cs2eAeV47VunVrl1np
NdQnLHxuNO+Kc9zj5F2qjh2PrDCn2Xvvfe36xGmMQ7Whc+cT3XtYv/7L3Da9
evXz9913v9xxbYxF3gUAAAAAAAAAQGlsC3mX+gINHHiTy380lp7ykfz+UzXJ
u5THVFaLFq3O5V2Vldqg23nzFuf2t3Tpxq36U51wwsn+hRf2LNiGyvIulfpe
dehwhN+mTRv3XpQF1TTvUj40fPjdLuPSsTrssA6ufW+99UFumwkTHvbbtz/Q
PS8cm1GVn3dVd9zj5l0ay1DvK7y/evVfXJamvmLKBtVHLr8/nT7Pnj2vSPxv
r5gi7wIAAAAAAAAAoDS2hbyLatyl+cTUL6yqOc2ipX5eyvwefXRB4m0vpsi7
AAAAAAAAAAAoDfIuqiFUjx6X+2PG3B9r23DsxKTbXGyRdwEAAAAAAAAAUBrk
XVRDqLff/tA/9dQz3BiJ1W3btevZbp6xpNtcbJF3AQAAAAAAAABQGuRdVEOp
tWs/899//+/Vbrdq1SeJt7UURd4FAAAAAAAAAEBpkHdRVDJF3gUAAAAAAAAA
QGmQd1FUMkXeBQAAAAAAAABAaZB3UVQyRd4FAAAAAAAAAEBpkHdRVDJF3gUA
AAAAAAAAQGmQd1FUMkXeBQAAAAAAAABAaZB3UVQyRd4FAAAAAAAAAEBpKO8a
ednKr55+6COfoqj6q4dGbiTvAgAAAAAAAACgBIb0WPejYd1X9Kcoqv5r+EUr
j0r63wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqM7/A79Jtzs=
    "], {{0, 1895.}, {1724., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{1724., 1895.},
  PlotRange->{{0, 1724.}, {0, 1895.}}]], "Output",
 CellChangeTimes->{3.905286982939702*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"cd726e1e-f176-48f8-b325-7b4a9031c906"],

Cell["Here is a corresponding description:", "Text",ExpressionUUID->"5b1826be-dd5a-4994-8d48-1590ca4672c3"],

Cell[TextData[{
 StyleBox["Start",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "The",
 " ",
 "beginning",
 " ",
 "of",
 " ",
 "the",
 " ",
 "process."
}], "Item",ExpressionUUID->"0a56ce37-8410-4ae6-96ae-95d6cd944688"],

Cell[TextData[{
 StyleBox["Outline a workflow",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "The",
 " ",
 "stage",
 " ",
 "where",
 " ",
 "a",
 " ",
 "human",
 " ",
 "outlines",
 " ",
 "a",
 " ",
 "general",
 " ",
 "workflow",
 " ",
 "for",
 " ",
 "the",
 " ",
 "process."
}], "Item",ExpressionUUID->"53bb769c-b18e-4065-bcc4-b345e3f84f1e"],

Cell[TextData[{
 StyleBox["Make LLM function(s)",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Creation",
 " ",
 "of",
 " ",
 "specific",
 " ",
 "LLM",
 " ",
 "function(s)."
}], "Item",ExpressionUUID->"1408c425-f6b8-4b07-a258-c7ed1e620b22"],

Cell[TextData[{
 StyleBox["Make pipeline",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Construction",
 " ",
 "of",
 " ",
 "a",
 " ",
 "pipeline",
 " ",
 "to",
 " ",
 "integrate",
 " ",
 "the",
 " ",
 "LLM",
 " ",
 "function(s)."
}], "Item",ExpressionUUID->"8cef4a4d-2ea0-492b-8dd5-73c19fab5be7"],

Cell[TextData[{
 StyleBox["Evaluate LLM function(s)",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Evaluation",
 " ",
 "of",
 " ",
 "the",
 " ",
 "created",
 " ",
 "LLM",
 " ",
 "function(s)."
}], "Item",ExpressionUUID->"7367dfe1-a5cb-4523-90b3-11bb7c262cb0"],

Cell[TextData[{
 StyleBox["Asses LLM's Outputs",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "A",
 " ",
 "human",
 " ",
 "assesses",
 " ",
 "the",
 " ",
 "outputs",
 " ",
 "from",
 " ",
 "the",
 " ",
 "LLM."
}], "Item",ExpressionUUID->"b6463c39-a45e-4131-b948-caa0476d541e"],

Cell[TextData[{
 StyleBox["Good or workable results?",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "A",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "to",
 " ",
 "check",
 " ",
 "whether",
 " ",
 "the",
 " ",
 "results",
 " ",
 "are",
 " ",
 "good",
 " ",
 "or",
 " ",
 "workable."
}], "Item",ExpressionUUID->"76010d55-f535-455e-9a85-fa29f759bcf0"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Can you programmatically change the outputs?",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "not",
 " ",
 "satisfactory,",
 " ",
 "a",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "to",
 " ",
 "check",
 " ",
 "if",
 " ",
 "the",
 " ",
 "outputs",
 " ",
 "can",
 " ",
 "be",
 " ",
 "changed",
 " ",
 "programmatically."
}], "Item",ExpressionUUID->"8436f512-dbc3-4eb9-8de8-fea3fea56660"],

Cell[TextData[StyleBox["The human acts like a real programmer.",
 FontSlant->"Italic"]], "Subitem",ExpressionUUID->"207f64c3-f5fe-4159-84d7-\
bad26ec97072"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Can you verbalize the required change?",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "not",
 " ",
 "programmable,",
 " ",
 "a",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "to",
 " ",
 "check",
 " ",
 "if",
 " ",
 "the",
 " ",
 "changes",
 " ",
 "can",
 " ",
 "be",
 " ",
 "verbalized."
}], "Item",ExpressionUUID->"5cead472-5746-4094-ac8f-e79f98d664da"],

Cell[TextData[StyleBox["The human programming is delegated to the LLM.",
 FontSlant->"Italic"]], "Subitem",ExpressionUUID->"d1f10df6-863b-4c34-82e7-\
68158980d69c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Can you specify the change as a set of training rules?",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "not",
 " ",
 "verbalizable,",
 " ",
 "a",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "to",
 " ",
 "check",
 " ",
 "if",
 " ",
 "the",
 " ",
 "change",
 " ",
 "can",
 " ",
 "be",
 " ",
 "specified",
 " ",
 "as",
 " ",
 "training",
 " ",
 "rules."
}], "Item",ExpressionUUID->"1c534bd8-90e8-4522-92ad-8a4c8199bb02"],

Cell[TextData[StyleBox["The human cannot program or verbalize the required \
changes, but can provide examples of those changes.",
 FontSlant->"Italic"]], "Subitem",ExpressionUUID->"973f4ae8-8ab2-46f9-9538-\
da92932a36a0"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Is it better to make additional LLM function(s)?",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "changes",
 " ",
 "can",
 " ",
 "be",
 " ",
 "verbalized,",
 " ",
 "a",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "to",
 " ",
 "check",
 " ",
 "whether",
 " ",
 "it",
 " ",
 "is",
 " ",
 "better",
 " ",
 "to",
 " ",
 "make",
 " ",
 "additional",
 " ",
 "LLM",
 " ",
 "function(s),",
 " ",
 "or",
 " ",
 "it",
 " ",
 "is",
 " ",
 "better",
 " ",
 "to",
 " ",
 "change",
 " ",
 "prompts",
 " ",
 "or",
 " ",
 "output",
 " ",
 "descriptions."
}], "Item",ExpressionUUID->"989e1287-f4d5-42dc-a22f-dac2d1520b74"],

Cell[TextData[{
 StyleBox["Make additional LLM function(s)",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Make",
 " ",
 "additional",
 " ",
 "LLM",
 " ",
 "function(s)",
 " ",
 "(since",
 " ",
 "it",
 " ",
 "is",
 " ",
 "considered",
 " ",
 "to",
 " ",
 "be",
 " ",
 "the",
 " ",
 "better",
 " ",
 "option.)"
}], "Item",ExpressionUUID->"0cea0a8b-3922-4896-9978-3a09b91c7080"],

Cell[TextData[{
 StyleBox["Change prompts of LLM function(s)",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Change",
 " ",
 "prompts",
 " ",
 "of",
 " ",
 "already",
 " ",
 "created",
 " ",
 "LLM",
 " ",
 "function(s)."
}], "Item",ExpressionUUID->"3f3107e7-2fa3-4067-9907-73df64f54951"],

Cell[TextData[{
 StyleBox["Change output description(s) of LLM function(s)",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Change",
 " ",
 "output",
 " ",
 "description(s)",
 " ",
 "of",
 " ",
 "already",
 " ",
 "created",
 " ",
 "LLM",
 " ",
 "function(s)."
}], "Item",ExpressionUUID->"63189085-ea75-41e6-b7b5-212fee5f676d"],

Cell[TextData[{
 StyleBox["Apply suitable (sub-)parsers",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "changes",
 " ",
 "can",
 " ",
 "be",
 " ",
 "programmed,",
 " ",
 "choose,",
 " ",
 "or",
 " ",
 "program,",
 " ",
 "and",
 " ",
 "apply",
 " ",
 "suitable",
 " ",
 "parser(s)",
 " ",
 "or",
 " ",
 "sub-parser(s)",
 " ",
 "for",
 " ",
 "LLM's",
 " ",
 "outputs."
}], "Item",ExpressionUUID->"b6b815fd-7f37-4ac4-b48b-3092fb058726"],

Cell[TextData[{
 StyleBox["Program output transformations",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "Transform",
 " ",
 "the",
 " ",
 "outputs",
 " ",
 "of",
 " ",
 "the",
 " ",
 "(sub-)parser(s)",
 " ",
 "programmatically."
}], "Item",ExpressionUUID->"eb24284e-8403-49db-b815-b9fe1364f4b3"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Overall satisfactory (robust enough) results?",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "A",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "to",
 " ",
 "assess",
 " ",
 "whether",
 " ",
 "the",
 " ",
 "results",
 " ",
 "are",
 " ",
 "overall",
 " ",
 "satisfactory."
}], "Item",ExpressionUUID->"7336fd7c-09e5-4b90-b6d7-3a0c5d3d47b6"],

Cell[TextData[StyleBox["This should include evaluation or estimate how robust \
and reproducible the results are.",
 FontSlant->"Italic"]], "Subitem",ExpressionUUID->"08d22d40-b983-44d7-b2b4-\
676dc95ac331"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Willing and able to apply different model(s) or model parameters?",
  
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "A",
 " ",
 "decision",
 " ",
 "point",
 " ",
 "should",
 " ",
 "the",
 " ",
 "LLM",
 " ",
 "functions",
 " ",
 "pipeline",
 " ",
 "should",
 " ",
 "evaluated",
 " ",
 "or",
 " ",
 "tested",
 " ",
 "with",
 " ",
 "different",
 " ",
 "LLM",
 " ",
 "model",
 " ",
 "or",
 " ",
 "model",
 " ",
 "parameters."
}], "Item",ExpressionUUID->"0c62b7cd-d5fd-4b79-831b-b6f2b34b2d9b"],

Cell[TextData[StyleBox["In view of robustness and reproducibility, systematic \
change of LLM models and LLM functions pipeline inputs should be considered.",
 
 FontSlant->"Italic"]], "Subitem",ExpressionUUID->"b7922720-b2bb-4649-ab10-\
b7ab214644d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Change model or model parameters",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "willing",
 " ",
 "to",
 " ",
 "change",
 " ",
 "models",
 " ",
 "or",
 " ",
 "model",
 " ",
 "parameters",
 " ",
 "then",
 " ",
 "do",
 " ",
 "so."
}], "Item",ExpressionUUID->"10332333-a7db-4d6d-889e-f828db50a78b"],

Cell[TextData[StyleBox["Different models can have different adherence to \
prompt specs, evaluation speeds, and evaluation prices.",
 FontSlant->"Italic"]], "Subitem",ExpressionUUID->"d437914d-5224-4683-ab71-\
f75e70d2134c"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Make LLM example function",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "If",
 " ",
 "changes",
 " ",
 "can",
 " ",
 "be",
 " ",
 "specified",
 " ",
 "as",
 " ",
 "training",
 " ",
 "rules,",
 " ",
 "make",
 " ",
 "an",
 " ",
 "example",
 " ",
 "function",
 " ",
 "for",
 " ",
 "the",
 " ",
 "LLM."
}], "Item",ExpressionUUID->"4f3ea52f-3f23-4549-b725-7a3b2f94f554"],

Cell[TextData[{
 StyleBox["End",
  FontWeight->"Bold"],
 " ",
 ":",
 " ",
 "The",
 " ",
 "end",
 " ",
 "of",
 " ",
 "the",
 " ",
 "process."
}], "Item",ExpressionUUID->"ce1b8ac5-80f1-408d-99e3-bfd8d9b908cf"],

Cell["To summarise:", "Text",ExpressionUUID->"670e7ed9-ba82-4b7a-b97f-f3f7fc44e69f"],

Cell["\<\
We work within an iterative process for refining the results of LLM \
function(s) pipeline.\
\>", "Item",ExpressionUUID->"1d3ea08e-eef7-406f-8806-a04fd972029b"],

Cell["\<\
If the overall results are not satisfactory, we loop back to the outlining \
workflow stage.\
\>", "Item",ExpressionUUID->"0116aac9-e88f-46db-b136-656fb17c216d"],

Cell["\<\
If additional LLM functions are made, we return to the pipeline creation \
stage.\
\>", "Item",ExpressionUUID->"7f5674f6-8f19-4092-b006-5b5f0499f257"],

Cell["\<\
If prompts or output descriptions are changed, we return the LLM function(s) \
creation stage.\
\>", "Item",ExpressionUUID->"567f1288-c016-40a3-92d8-77918c35b73c"],

Cell["\<\
Our (human) inability or unwillingness to program transformations has a few \
decision steps for delegation to LLMs.\
\>", "Item",ExpressionUUID->"4004679a-002f-4689-822b-4195a57e4f52"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "We",
 " ",
 "leave",
 " ",
 "as",
 " ",
 "exercises",
 " ",
 "to",
 " ",
 "the",
 " ",
 "reader",
 " ",
 "to",
 " ",
 "see",
 " ",
 "how",
 " ",
 "the",
 " ",
 "workflows",
 " ",
 "programmed",
 " ",
 "below",
 " ",
 "fit",
 " ",
 "the",
 " ",
 "flowchart",
 " ",
 "above."
}], "Text",ExpressionUUID->"0bb52c03-df48-4555-adf4-1fde80d6d6c6"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "The",
 " ",
 "mapping",
 " ",
 "of",
 " ",
 "the",
 " ",
 "workflow",
 " ",
 "code",
 " ",
 "below",
 " ",
 "onto",
 " ",
 "the",
 " ",
 "flowchart",
 " ",
 "can",
 " ",
 "be",
 " ",
 "made",
 " ",
 "using",
 " ",
 "LLMs."
}], "Text",ExpressionUUID->"23d7ff4e-b14a-4233-bea4-b80e66e7879f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plot data", "Section",ExpressionUUID->"ec1037db-499f-422b-88b9-efd9202a129c"],

Cell[TextData[{
 StyleBox["Workflow:",
  FontWeight->"Bold"],
 " ",
 "Consider",
 " ",
 "a",
 " ",
 "workflow",
 " ",
 "with",
 " ",
 "the",
 " ",
 "following",
 " ",
 "steps:"
}], "Text",ExpressionUUID->"ff8ee189-fdae-4825-b231-1e05f4af4696"],

Cell["\<\
Request an LLM to produce in JSON format a dictionary of a certain numerical \
quantity during a certain year.\
\>", "ItemNumbered",ExpressionUUID->"e8a1c702-412e-4859-b344-7007aa63061f"],

Cell["\<\
The corresponding LLM function converts the JSON text into Python data \
structure.\
\>", "ItemNumbered",ExpressionUUID->"e4922141-3d3b-4ea5-ac72-73ab5f203621"],

Cell["Print or summarize obtained data in tabular form.", "ItemNumbered",ExpressionUUID->"ef3edac7-9b89-4530-b8aa-a41ff8dccca8"],

Cell["A plot is made with the obtained data.", "ItemNumbered",ExpressionUUID->"e61cda90-6ce3-4df9-8a35-54282aec2c2f"],

Cell["Here is a general quantities finder LLM function:", "Text",ExpressionUUID->"3e60f52e-1038-4b37-8662-fe7b54792dab"],

Cell["\<\
qf3 = llm_function(
        prompt= lambda a, b, c: f\"What are the {a} of {b} in {c}? Give the \
result as name-value pairs in JSON format.\",
        e = llm_configuration('openai', temperature =0.7, \
api_key=openai_api_key),
        form = sub_parser('JSON', drop=True));\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905287152057405*^9, 3.90528717084411*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"6e71cd2d-24d4-46ee-932b-121052a08647"],

Cell[CellGroupData[{

Cell["Countries GDP", "Subsection",ExpressionUUID->"78287a48-4128-48f6-906a-93dcffcd2d9d"],

Cell["\<\
Consider finding and plotting the GDP of top 10 largest countries:\
\>", "Text",ExpressionUUID->"3bfe317c-710d-4f9c-932d-3d45f4633fba"],

Cell[CellGroupData[{

Cell["\<\
gdp1 = qf3('GDP', 'top 10 largest countries', '2022')
gdp1\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[84]:=",ExpressionUUID->"c2798298-506e-4cb5-b87d-343f6393c6e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"United States\"\>", "\[Rule]", "23.4`"}], ",", 
    RowBox[{"\<\"China\"\>", "\[Rule]", "20.5`"}], ",", 
    RowBox[{"\<\"Japan\"\>", "\[Rule]", "6.2`"}], ",", 
    RowBox[{"\<\"Germany\"\>", "\[Rule]", "4.8`"}], ",", 
    RowBox[{"\<\"United Kingdom\"\>", "\[Rule]", "3.6`"}], ",", 
    RowBox[{"\<\"India\"\>", "\[Rule]", "3.5`"}], ",", 
    RowBox[{"\<\"France\"\>", "\[Rule]", "3.4`"}], ",", 
    RowBox[{"\<\"Italy\"\>", "\[Rule]", "2.9`"}], ",", 
    RowBox[{"\<\"Brazil\"\>", "\[Rule]", "2.7`"}], ",", 
    RowBox[{"\<\"Canada\"\>", "\[Rule]", "2.3`"}]}], "\[RightAssociation]"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.90528702410224*^9, 3.9052871751046963`*^9, 
  3.9052885326613007`*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"5ce4569a-b672-4151-8c9a-267564638ecb"]
}, Open  ]],

Cell["\<\
In order to make a corresponding table (data frame) we select form the LLM \
function's response only the elements that are dictionaries:\
\>", "Text",ExpressionUUID->"f7cfbd53-f5b3-4c3e-895d-4818347800cc"],

Cell[CellGroupData[{

Cell["\<\
gdp1f = list(filter(lambda x: isinstance(x, dict), gdp1))
gdp1f\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[85]:=",ExpressionUUID->"27966532-2082-44c2-8e6c-356e9ed4ab22"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"United States\"\>", "\[Rule]", "23.4`"}], ",", 
    RowBox[{"\<\"China\"\>", "\[Rule]", "20.5`"}], ",", 
    RowBox[{"\<\"Japan\"\>", "\[Rule]", "6.2`"}], ",", 
    RowBox[{"\<\"Germany\"\>", "\[Rule]", "4.8`"}], ",", 
    RowBox[{"\<\"United Kingdom\"\>", "\[Rule]", "3.6`"}], ",", 
    RowBox[{"\<\"India\"\>", "\[Rule]", "3.5`"}], ",", 
    RowBox[{"\<\"France\"\>", "\[Rule]", "3.4`"}], ",", 
    RowBox[{"\<\"Italy\"\>", "\[Rule]", "2.9`"}], ",", 
    RowBox[{"\<\"Brazil\"\>", "\[Rule]", "2.7`"}], ",", 
    RowBox[{"\<\"Canada\"\>", "\[Rule]", "2.3`"}]}], "\[RightAssociation]"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.905288534597375*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"97ae62b5-7231-42cb-bb9f-e6a2dab9197f"]
}, Open  ]],

Cell["Here is the corresponding table (data frame):", "Text",ExpressionUUID->"a316a02e-d9f3-4f48-ab3b-6893800b2c9e"],

Cell[CellGroupData[{

Cell["pandas.DataFrame.from_dict(gdp1f).transpose()", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[86]:=",ExpressionUUID->"1010d5f3-e189-40b6-a148-839524ffd1ce"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "United States" -> <|0 -> 23.4|>, "China" -> <|0 -> 20.5|>, 
       "Japan" -> <|0 -> 6.2|>, "Germany" -> <|0 -> 4.8|>, 
       "United Kingdom" -> <|0 -> 3.6|>, "India" -> <|0 -> 3.5|>, 
       "France" -> <|0 -> 3.4|>, "Italy" -> <|0 -> 2.9|>, 
       "Brazil" -> <|0 -> 2.7|>, "Canada" -> <|0 -> 2.3|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[156.8], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[34], 
            TypeSystem`PackageScope`AtomShape[60]]], 1, 
          DirectedInfinity[1], {All}]]], 10, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Real], 1], 10], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[156.8], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[34], 
            TypeSystem`PackageScope`AtomShape[60]]], 1, 
          DirectedInfinity[1], {All}]]], 10, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Real], 1], 10], "Path" -> {}, "DisplayedRowCount" -> 
     10, "DisplayedColumnCount" -> 1, "DataRowCount" -> 10, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["United States", 
                  Style[
                  "United States", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["United States"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["United States"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["United States"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["United States"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["United States"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["China", 
                  Style[
                  "China", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["China"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["China"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["China"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["China"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["China"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Japan", 
                  Style[
                  "Japan", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Japan"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Japan"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Japan"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Japan"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6.2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Japan"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Germany", 
                  Style[
                  "Germany", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Germany"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Germany"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Germany"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Germany"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Germany"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["United Kingdom", 
                  Style[
                  "United Kingdom", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["United Kingdom"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["United Kingdom"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["United Kingdom"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["United Kingdom"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["United Kingdom"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["India", 
                  Style[
                  "India", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["India"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["India"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["India"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["India"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["India"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["France", 
                  Style[
                  "France", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["France"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["France"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["France"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["France"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["France"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Italy", 
                  Style[
                  "Italy", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Italy"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Italy"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Italy"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Italy"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Italy"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Brazil", 
                  Style[
                  "Brazil", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Brazil"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Brazil"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Brazil"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Brazil"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Brazil"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Canada", 
                  Style[
                  "Canada", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Canada"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Canada"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Canada"], 
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Canada"], 
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Canada"], 
                 Key[0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{277., {141.634033203125, 147.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{277., {141.634033203125, 147.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905288537606821*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"1f1a2930-6e59-46ce-89f7-47af2df14c7f"]
}, Open  ]],

Cell["\<\
Instead of programmatically manipulating the LLM function result we can \
request the LLM to produce the desired transformation (with another LLM \
function):\
\>", "Text",ExpressionUUID->"be347b01-2cf4-401d-811f-fa81ad5533a1"],

Cell["\<\
ftc = llm_function(lambda x: f\"Convert the JSON dictionary {x} into two \
column table with column names Name and Value. Show the result in JSON \
format.\", e = confOpenAI, form = sub_parser(\"JSON\",drop=True))
res = ftc(gdp1)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905288547090054*^9, 3.905288547979168*^9}, {
   3.905288702230341*^9, 3.905288731731189*^9}, 3.905289615185207*^9},
 CellLabel->
  "In[132]:=",ExpressionUUID->"9936fa63-d4af-415d-a7ec-0f5cedb7d069"],

Cell["Here is the table (data frame) for the result above:", "Text",ExpressionUUID->"3cdc55bf-ed6c-472a-82f7-ee723715982c"],

Cell[CellGroupData[{

Cell["\<\
dfGDP = pandas.DataFrame.from_dict(res)
dfGDP\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.9052887335518417`*^9, 3.905288734426559*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"0aa02f19-3990-4ca9-b0c3-0d86db9719fb"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      0 -> <|"Name" -> "United States", "Value" -> 23.4|>, 
       1 -> <|"Name" -> "China", "Value" -> 20.5|>, 
       2 -> <|"Name" -> "Japan", "Value" -> 6.2|>, 
       3 -> <|"Name" -> "Germany", "Value" -> 4.8|>, 
       4 -> <|"Name" -> "United Kingdom", "Value" -> 3.6|>, 
       5 -> <|"Name" -> "India", "Value" -> 3.5|>, 
       6 -> <|"Name" -> "France", "Value" -> 3.4|>, 
       7 -> <|"Name" -> "Italy", "Value" -> 2.9|>, 
       8 -> <|"Name" -> "Brazil", "Value" -> 2.7|>, 
       9 -> <|"Name" -> "Canada", "Value" -> 2.3|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "Name"} -> 
        1, {All, "Value"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "Name" -> TypeSystem`PackageScope`AtomShape[156.8], "Value" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 2, {All}]]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"Name", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 10], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "Name"} -> 
        1, {All, "Value"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "Name" -> TypeSystem`PackageScope`AtomShape[156.8], "Value" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 2, {All}]]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"Name", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 10], "Path" -> {}, "DisplayedRowCount" -> 
     10, "DisplayedColumnCount" -> 2, "DataRowCount" -> 10, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Value", 
                  Style[
                  "Value", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Value"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Value"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["United States", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["23.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["1"], 
                  Style[
                   RawBoxes["1"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[1]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["20.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2"], 
                  Style[
                   RawBoxes["2"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Japan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6.2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3"], 
                  Style[
                   RawBoxes["3"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Germany", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4.8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["4"], 
                  Style[
                   RawBoxes["4"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[4]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["United Kingdom", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["5"], 
                  Style[
                   RawBoxes["5"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[5]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["India", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["6"], 
                  Style[
                   RawBoxes["6"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["France", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3.4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["7"], 
                  Style[
                   RawBoxes["7"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[7]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Italy", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["8"], 
                  Style[
                   RawBoxes["8"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[8]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Brazil", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["9"], 
                  Style[
                   RawBoxes["9"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[9]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Canada", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{277., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{277., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9052887154489202`*^9, 3.905288734774994*^9}},
 CellLabel->"Out[92]=",ExpressionUUID->"3276be0f-eb7e-42a9-927f-08fdc30254eb"]
}, Open  ]],

Cell[TextData[{
 " ",
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " We can define the transformation function to produce Python code, but \
actually requires more notebook-manual steps. Here is the corresponding \
definition:"
}], "Text",
 CellChangeTimes->{
  3.905288739873006*^9},ExpressionUUID->"7911ee9a-aecc-4b84-bfda-\
98d8d168985e"],

Cell["\<\
ftc = llm_function(lambda x: f\"Convert the JSON dictionary {x} into two \
column Python pandas data frame with column names Name and Value. Show the \
result in Python code.\")\
\>", "ExternalLanguage",
 Editable->False,
 CellEvaluationLanguage->"Python",
 CellLabel->"In[93]:=",ExpressionUUID->"2663215d-bd26-4434-bbe1-cfca71b581a7"],

Cell["Here is a plot attempt:", "Text",ExpressionUUID->"b31876db-5ff8-4530-9cc0-692c7e5c5dac"],

Cell[CellGroupData[{

Cell["\<\
import matplotlib.pyplot as plt

def plot_points(df, title=''):
    plt.figure()
    plt.plot(df['Name'], df['Value'], 'o')
    plt.xlabel('Name')
    plt.ylabel('Value')
    plt.title(title)
    return show_plt(plt)
    
plot_points(dfGDP, 'GDP')\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905288976803226*^9, 3.9052889994826736`*^9}, {
  3.905289135417575*^9, 3.905289149561104*^9}, {3.905289205000341*^9, 
  3.905289205381941*^9}, {3.905289337214116*^9, 3.905289379939887*^9}, {
  3.905289456780344*^9, 3.9052894662151318`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"4347e401-9bbb-49a6-b458-361833b014b2"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
z3zfLqN+rHsO5r+vDM7/lnqOIdyjjOqenHd+tj1q8Jrbhr8LX6jb4S3h+xti
IJdxnAN+rIz617IN+bk6j6s3GEy7t7b3/uEdZdQnl8e1fYNpsn/m+XXb5frJ
uvzR094zPL6Marx8r+eUlbXZG2p8HDGj3YfV/78rPC98LpwX3hxuNSV2H1pG
n78vLqP+sEtq2z5at32u7zuGG4b31effmcs/mMfj6rQ5j2+Gfw53H8Z/GcXq
RyfjZtCefyqjfDCM/+vWGLlb2Vr8X9q++vfP1nk9atY0m9gGR5VRrT1uy89O
tiWGG5XRvpCx8O/hv5XV9d+bq2/XeeW6/FL4TG3XuC2/VkZx/a26fnN+L6vz
+0LdhnvL4Pxv2UC8bXV/mHIMeXb4vdqWt9TxmcfzuHFB3Z7PDVcZvO7BZZ19
uk6Xy/b+uu1yezx78NyaMd66rGXGcW4j67asPH48sMbR4RPT/HV4UWt7Z22f
Murrzj+uOYiP+9ZtlnH5kLL+sX78uklnDbfjrP1pjfa+rr7nquNYOXjcb46h
soG8UNbZV+s0eR7tP+o6yuPYU8ohqJ+Zv7K5+u+rdT++Rd3f8hj129PmVUbn
wjKOn1Tq57Q6/rg6n8fUWMxa8P+FFwzm87q6L2Quzn68f6ixuFb++2D4yzKo
Ryeen9We/H3rzH/5GTL7m7LPMHPP7evzedzNOud5ZdAPUEZ9UTnB34ebhFuH
vw1vrq/LvPnNOs2nwsnhf9T9Opf/6nW6fWV1/XdR3Y9vk/tv3U//fLAsWSM8
oLYh/UkZ5dGpy76BGDi9HDx+Z9/a/rptcp28OvxbuFx9fm9t77l12nz/08oo
Jx1Zp7lCeHIZHY+uV0b1Sx7X7jvxnnmM+sO6/n6yTvOw+nweq7PG+tV12p51
3NtrO29T2/2MMjoGjtfxqeXg8TK30y3Lwfovc23WN/mZ/G/KKM+9qb5mXP+9
vhyM/zfWZXtQGeXifO/Mi99bVtZ/Wdv8V/j98NQyqntyOY+r0+ey3qwcjP93
1ffOdm0l/rN9WVP9Ul2mB8yaZqPboE6Tcfgv4fZlFItnDduScVHbmvtBxsud
6/IM678X12XOY8c/1m3xpfr4gXU7n1lGMZT1VdYYH6jz+L9lVCvn339eRvvG
HcvK+m/deNvq/jDlWJkx8PRw41xndXwey+5a3zv3zTwWPXfwugeX9ffpR9R1
9OgyisXbDtbxujHecPy/dFnL7OPcRvfl8fEjz5FmnXKfwfPXKKOYvGtLW2dt
nzK6ruGPwodrPO6t8ZH70/7a7qPL+sf68XUFw37FXMe/NdiOm6r/yijvZHw/
cZ3ptiOG1swLZQP7ap3uN8rouJTr8afqPE7ejm3HYimbq/8uKCv7+/I4+K5Z
8ypT+ixieFH444lxP1RG+fFKZXTsu2S8T9bnb1LHrZX/MpbPrftI5pjMuz84
Mc2q9syYV9YDz1hrHdV9K/+412Dcdeq476v75/jz41MG0xxRjwc/Vh/vK6vr
v/xj2Of2i7kPrtHePG5l7vzJ9ZZtxutPLzPO35TR5+n84xb18d76+JTBNJev
637mMaKM+pVePvGeuT32DMZlP89L69+3n1y/dXwej8+v8nNqHvOyhpnsb8h+
1ocPYjfj4poT01xS2zD+zHKHOi77YU4sB/s5v17WiP8y6rP55bKy/nvxON7K
KH9n/3Bes5jxn/Vy9pHcdxD/l8ZJ2Xr8Z/u+MW7/GtNM1n9rbYPx+95m8PwN
h22J4UfLKIdeZzDNj5WV9d8/1PV/RF1Hbyuj6zRyn/+e8O4yykvZlnuM51dG
OfCtg/ntr9v9kWWd+z/KRLxtYX/4VjkYZ+mvatv/ZQOvv0/4wuDxg8s6+3QZ
1bhPnTG/dWN8q8oWzv9Ortuyuh7Lz7ivGzzOmvYjZZuucZ6yfXJkfsb+/vr8
3jpu3T7gMnGsH4zPXJT7dvbDjz/75nbcbP13uzLlOHYoYmjKPFbkhbKBfXXG
fJ4Q/mk7th2LZdY+X6bXf++fmOZXwkdnzatMr//G5zeGx9YLagzmZ5afLqN+
s8lrbf5rcl5T2pyfVbNf8lfLqC8u66wnrdOe3Ed+vYz6uL5Y25Pv/7K11lEZ
5bT8Y3z+d3gsOqHO943lYB/Sw8LV6mvzWP7A+ve+srr+u2Dive6VyzJ4nOcH
8/Puf9R5nV+X9Re3GAOnl4M5IM91vqSM+v3PGyzTj9fn99bHd56YR/advWDw
OGudPM/5+TqPzP/vnnjP107MI+/zGPefjuu/Eyemyc/tWYNkv1DWWnls+vbE
Nji/jnvaIHY/PGW585/3l4P13/XquOzrGNd/d63//26dNmuYrPv+vW77i+t7
Pb2srP+eUAbxFsO/ht8sB+M/18c4h329vsePlC3Gf13GzLF5PjrrpqNmTDNZ
/621DcZtudzENF8aLFfm9o9OPP9dZWX9l8v8+cG+9JzBNPm57VVl1Hfz2uH8
yuj81XDa3CYfLwf7Zo8fvOea8baF/SH7WW44cFRt+2lTpr9rnT5ruK8OtucR
G9mny2h/vjTWZrRn3RjfqrKB+m+9dVtW13/Zx56xfUx9nP3ST2pp5zrb53Z1
XH7GOrYcPEZNfv5f91g/mPbPa9wOP+/ldtxs/Tf1OLbdMTSIo5l5oWxgX63j
8rql7G/+TJ1Hniv+3HZtPxZHGZ1TeMGU8RlvXxk8XhXrZdS3cfbg8YrjR5le
b+V5nWeVlcfWsbwX9sQyPeesW/9NWYbfqMeqK67Rnjwvm31K2W9+q9qOvObt
lbOWq44b13b/a8pyjPfZ8TnGl9ZjTp4vzBojz488uE6zr0y5/m/ivSZr8Tw/
mH2c2Ydy8/qen9/s+hnM7/RyMAdkXZPn4rIWuWmd/zCX7y2z678/rX/ndTd5
/MrPp7eu7fvjMuXas4l5ZO10Vv17zfO/5WCtdUoZXVszLZ7G12KeWqYcp+ty
ZN/TCyaW7fi6Hb4y2D7/s4zyWPZtZJ2Vx96n1fd+z7jt5WD995iysv57T23H
OP7H/V/Z9/fCMjrebjn+y8Hzv1ersZHnUI+eNs0mtsG6banLOZlTxr9JP6v+
y/cY5538vJbnH/+z/n/Z/AbTXja/uk5/qwzqv7KBeNvq/jAt5ibGHVvfO883
ZP9x9t8+tGxin47hqmXt+m/dGN+qsk79t5F1OyOO8nPIE8voPEjG+XVb2rne
9imj2i5rlbzWYm+Z+HxQp1n3WF+ny7yR9eENJsav2I5lm87/bkcM1cdr5oWy
sX013z9r96yTx9caPGnyvVkOZdRv8d4p4/Nz9/Az3qpYL+vXf/k55HETr8nP
VW9aoz03rvF4uynjNlv/7a/73neu0Z7s33/+4HFeI/GhsrL+y77EP5h43W/X
48161/WO89aeOm1e59ta/+Xnw58bPL7uVtbP4PWnl1HuPbLO54cHz43PTU7W
fycPpsnzv+eMx5XR9xy8aeI93lg2UXvUx2eusX7PqtPn9ct5vNq7xvKtit3B
tnlFqfFfVtZ/l8Z/WV3/5XnKJw3i/+N1e06r/y6Lt3Kw/rss/suoDzOvrcqc
dKAl/ofLWEa11bvq+x8zaz2stw3KwfO/PzB4ftb536MH09xjImYmz//mewzP
/w7rv8vmN5j2svmV6fXfuvG2lf1hVsxNjMtrYFfUyGVUP2x2n/5YmX3+d90Y
36qysv6bdpzb6r78iBp/eT3nmYeqzYNxedzO8xX/u8yu/zZyrL93jdVV38sy
uR3Lxu//yOuHZ+aJbYyhNfNC2di+mve3fWTiff5k8r1ZDnVfyeu5M9/lZ6L8
7JHXkGef7/Aa3lWxXtav//J4kud28rrbcV/MLQfvl3k2P1/cc3jcqftLni/L
vvO8/v1tZf3r3/O9T6rT5zJlfsnzYG9apz35mStrl7zedXwvw1cmjgl5TfS7
63yvUY8bmZ8yb+fntjxX+oi6j+Y17dnPnsfzX6v71s+X0fUced4vzw231n//
UpflpnUdvXW99bNODJxeRrn3cnWZ8tq1zPN3q8s9rf7Luif7wLJGyP6Arw7W
6aPrOsxjS8bTU+rjzdZ/eS46z0Fkn9n96vJmLfSAOj6P9YfV+HhPfb+9dVtm
P8BtZsVuHZ//PLwcjMcT6rjfKTX+y+r672/q+s/YfXp97Xllev03jLf31nYM
4z/rmMw1+TlieK33VuJ/xTKW0ef6vJ4/z6teZ8Y0G9kGeU4q+3LyHFv2/7y5
tuXR9fmMmezfy5ogjx/Zn/dPZfr9Hy8vo/6J/D/7UE+vzw/rv+H8ctqXDedX
ptd/68bbVvaHGceYyfrv+NqWbENem5Dfj/CJsvl9+kF1HT2qjI6J2W/2yPrc
ujHecPy/bFnL9OPcVvfljL+8riePefdraeOMNg+//yWPC7k/5Wf9fWV2/bfm
sb6M7mu8oC7j8D6Q8X1kK7Zj2Xj9l+d88l7JjOt71+1707qtP7CNMbRmXigb
21fH13zkdc83qG384uR7szzKKMfkvZGfrftDHnfvPzHNqlgv69d/2ZeceezC
iTi9bY3TrBnOr9P82uD53OfOqK/7eDn4nTNr5b881/COGqt5HM38ktcyHblW
e8qof/6VtS2frfv+C8vK+i+Pe++s+1KO2FvH5378ujq/i6ucT+b8B9Z1mhNm
js/Pmb9cX9da/926bqN83/yM/TPrrZ91tn/ek/Dy+vfdy+gc8IV1Xd2lTK//
DpRRH9M36vR3G8zv8PCCupx5rjDPmf5u2WTtUcfldVfj7029qK7f7DfL+/i+
o06T58/ynOon6zR5jP+zUs85lbXrv1y34/j/fB2X3/1y/4ntM67/cvnHNVAu
W8bbWWV6/bci3rIdU+I/R2TN3Rr/q5axrpc8r5y11XUnp9nINqjrfxzjZ9ft
nvvJSRP7x9tqLGScT/YpnF5Wf/9L1hpXqc9fVv9NzC/3py+V9fv/1o23Te4P
q9bLtOPbYHxeB/2pGhNvqNtrU/t0HZefX/Mz60V1fs+a2JYzY3yrysr6b9Vx
biPrdo31lceVVd8F06qs/q6a/PyVdeu9J45Rk/Xfmsf6cvAei0lnTduOZXPf
/5z70bNr/OZ+kvVd5ol92xVDZQN5oayzr9Zp8nPtF+p6ymuXHjP53sByqMeb
Z29w2qnHVra03rMmy3poy9/dOIc2j+9xn/vvFrDYyqjv+FnzbgcAK5XRvQI/
UT8vnrjB16j/2td73qee3xeY91n/w7zbs05b8xqAvD4jz2HlebPsT/xY8X2w
zFD72e5fP9vceN7tAWClMrqWLc9D5L0sG/puLvXftqz3fXUd5vmX4+bdnnXa
mueH3lfPS322xsyx824Xi6sc/H2ox8+7LQAAAAAAAAAAAAAAAAAAAACwaMrB
30/41Ynxq36TAgCA/tX6L3+DLX/P62qD8eo/AIAlVOu/15TRb88/fTD+svov
hiPDX9TvB8/vfn5vODAxn7PK6LeZn1lryfx+6IeHI8roN2Pz90Pzd7hPmHjd
zcroN4XPr695cbjGvNcLAMCyqvXfK8O9aj/gder4Yf13TP5+Q/7OS7h+eGT4
Vrj9YD5Z/50XfiPcqP7/7VrbPayOe24Z/Zb8d9TXHBU+H34n3KSMfrP+b8Ob
571eAACW1bj+q3+/Mzy//r3m+d8YXhueMXic9d/bBo/31D69Fw3GXbtea3iH
+vi3wpkT871Oneb75r1uAACW0UT9d+far3ezif6/rOV+Pfxb+GKt674ZXjaY
T9Z/z5mY98fDEwaPD6u13T3r46whL6rzG7pk8jwxAADbY1j/1cevreeDh/Xf
yfW87QPCrcINwxkTr8v675kT8z47PGZiXP5zYv379eGv6/wmHTHvdQMAsIym
1H/H1ev2nj6o/14zPi9cH18ufGgb6r/fDh8Ml5/3egAA2C0m67867kVldC/I
JfXx74dzwp3CTcNp4SvbUP8dHT4X/ircrozuLfnR8Kdhz7zXDQDAMppR/x0b
LhzUf1ev54TzO1zyO1qeEl7YWv/Vx3lf8CvK6Dtj8rtlPlDrzcPmvW4AAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY+f9Rs9RI
    "], {{0, 480.}, {640., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{640., 480.},
  PlotRange->{{0, 640.}, {0, 480.}}]], "Output",
 CellChangeTimes->{{3.905289345443924*^9, 3.905289380407835*^9}, {
  3.9052894621655293`*^9, 3.9052894667498007`*^9}},
 CellLabel->
  "Out[115]=",ExpressionUUID->"036af154-881e-4ad2-93b4-a5ee1a92a089"]
}, Open  ]],

Cell["\<\
Here we obtain the GDP for all countries and make the corresponding Pareto \
principle plot:\
\>", "Text",ExpressionUUID->"d725b5f2-9547-4279-aa2c-e199e46fc4ae"],

Cell[CellGroupData[{

Cell["\<\
gdp2 = qf3('GDP', 'top 30 countries', '2018')
gdp2\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[108]:=",ExpressionUUID->"155a1e00-58f8-4ecd-825f-55d3ddfd4277"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"United States\"\>", "\[Rule]", "20510.18`"}], ",", 
    RowBox[{"\<\"China\"\>", "\[Rule]", "13608.15`"}], ",", 
    RowBox[{"\<\"Japan\"\>", "\[Rule]", "4970.91`"}], ",", 
    RowBox[{"\<\"Germany\"\>", "\[Rule]", "3997.9`"}], ",", 
    RowBox[{"\<\"United Kingdom\"\>", "\[Rule]", "2825.75`"}], ",", 
    RowBox[{"\<\"India\"\>", "\[Rule]", "2716.39`"}], ",", 
    RowBox[{"\<\"France\"\>", "\[Rule]", "2668.99`"}], ",", 
    RowBox[{"\<\"Italy\"\>", "\[Rule]", "2089.85`"}], ",", 
    RowBox[{"\<\"Brazil\"\>", "\[Rule]", "1886.75`"}], ",", 
    RowBox[{"\<\"Canada\"\>", "\[Rule]", "1739.01`"}], ",", 
    RowBox[{"\<\"Russia\"\>", "\[Rule]", "1683.56`"}], ",", 
    RowBox[{"\<\"South Korea\"\>", "\[Rule]", "1642.38`"}], ",", 
    RowBox[{"\<\"Australia\"\>", "\[Rule]", "1409.9`"}], ",", 
    RowBox[{"\<\"Spain\"\>", "\[Rule]", "1408.94`"}], ",", 
    RowBox[{"\<\"Mexico\"\>", "\[Rule]", "1212.83`"}], ",", 
    RowBox[{"\<\"Indonesia\"\>", "\[Rule]", "1046.84`"}], ",", 
    RowBox[{"\<\"Turkey\"\>", "\[Rule]", "771.35`"}], ",", 
    RowBox[{"\<\"Netherlands\"\>", "\[Rule]", "912.54`"}], ",", 
    RowBox[{"\<\"Saudi Arabia\"\>", "\[Rule]", "748.16`"}], ",", 
    RowBox[{"\<\"Switzerland\"\>", "\[Rule]", "705.1`"}], ",", 
    RowBox[{"\<\"Argentina\"\>", "\[Rule]", "625.92`"}], ",", 
    RowBox[{"\<\"Sweden\"\>", "\[Rule]", "538.04`"}], ",", 
    RowBox[{"\<\"Poland\"\>", "\[Rule]", "524.89`"}], ",", 
    RowBox[{"\<\"Belgium\"\>", "\[Rule]", "494.76`"}], ",", 
    RowBox[{"\<\"Thailand\"\>", "\[Rule]", "488.58`"}], ",", 
    RowBox[{"\<\"Iran\"\>", "\[Rule]", "454.13`"}], ",", 
    RowBox[{"\<\"Austria\"\>", "\[Rule]", "455.56`"}], ",", 
    RowBox[{"\<\"Norway\"\>", "\[Rule]", "434.72`"}], ",", 
    RowBox[{"\<\"UAE\"\>", "\[Rule]", "421.14`"}], ",", 
    RowBox[{"\<\"Nigeria\"\>", "\[Rule]", "397.27`"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.9052893975509253`*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"9f7457ce-52b9-44cf-856a-1563751cdb77"]
}, Open  ]],

Cell["Here is a plot attempt:", "Text",ExpressionUUID->"22d602d0-0daf-47ec-9757-8737ca686cf8"],

Cell[CellGroupData[{

Cell["\<\
import numpy as np

def plot_pareto(numbers):
    numbers = np.array(numbers)
    sorted_indices = numbers.argsort()[::-1]
    sorted_numbers = numbers[sorted_indices]
    cumulative_sum = np.cumsum(sorted_numbers)
    plt.figure()
    plt.plot(range(1, len(numbers) + 1), cumulative_sum / cumulative_sum[-1] \
* 100, 'ro-')
    plt.xlabel('Items')
    plt.ylabel('Cumulative Percentage')
    plt.title('Pareto Principle')
    plt.ylim(0, 100)
    return show_plt(plt)


plot_pareto(list(gdp2[0].values()))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289402013077*^9, 3.905289447845334*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"79600920-904b-4945-a476-5e68bfeb538b"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3Qm8HFWZ9/ETtgABEWUNWwiICCiibEaEqyAKKEJcEVFAFhmdKOAkIggZ
R4VRZ8ABwQEdUBRRXx1gBEEQiQyLIwIissqWsIY9AcKSpN//ST2XVIruvt11
+tap0/2rz+dL+lZv55z7kOdJVZ1TGx74+cmHLOWcO3J5/WfyAdPeecQRBxz1
wVfrhw9POfKwQ6ccfNBuU7548KEHH7H9gUtr571jnJuu1y+jx41GAwAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBJ
2vaXRs58uV/OlHUitGdFmS5Do/DZjYKn5QrZo8P3D9n7et623HfcK2eVfK8f
t0bsmAIAAPWWq//8n9vLO+U4eV7ulnEVt2c1a8/0Ufhs/59fWD8nySfkNlnY
SQ2o7VX23leNYv+3ko1Kvpf6DwAAjChX/21d2P9V279vD75jhS5eO9r13ymF
fRvZ/kvbvG9ZWSb276qD/lH/AQCAEbWp/3a3/V+2n/0xwT/KEzJHrpdPy5jC
+/z5y1/LZLnBjiOeYM+tJf9p55dflHvsc5ex5yc0OUfbyJ8P1baD/E7mynNy
dRfnb19R/9n+2XKHPR6y1+0n/yYP2PHBTV2T87++bfKMbCwX2eNZ9t6xhe8Z
K8fKrTYuj8vvZVJh/PL9Hf5Of6zy3+VhmSczZKvC5zet/7R9VK6RZ619lxTf
CwAABkeb+m+K7T/YfvbXAx4ou5hjrP46tvA+X788KHfJAVa/bGO130x7/hDZ
2T7D10Fn2nt9ffQe+97vu+xcq7eRPb+T1Y3XyUfkA1bL+Prsox30tdnxv1Vl
gVxlPw/XW75G9eeK3y97yGva1H8vyC1ypPXrn61Nx+Zet4xcLi/Jt2Q3++yv
y8cK43dW7ufh7/Rjd568T/aVO112/eLE3GtfUf9p+7K15QfWj71dVjP7OnCz
2PEHAACql6v/trMaZSWrE/wxMX+cb80m71nKXvsVeczljgFa/eLnkGxSeM/3
XHbMbv3C/iPt+zezn1ue/3XZMaxHfBtz+5aWv7rsmNuYEfrq//Nda7s/p+uP
6V1k+//BXjNcb81o8v5W9Z9/8OHCay+U23I/72evO2iENraq//5cGOcNXFYL
n5Hbt0T9p209qzf/o/Ad/nf8kPwsdvwBAIDquVfO/x12k7w997p3yWV2zKn4
2jVzr/P1y/VNvscfT7vAaq+8zewzDrPXNa3/tI1z2XGs7zb57Kn2nk1H6Guz
fj4lX8m9ZrjemtLk/a3qP9+u5QuvPV7m5X4+x2XnbZcaoY2t6r8jm7z2Cvl7
7udi/XeQvXfrJuN+rjwSO/4AAED1cvXfflYnvFnWLrxmW5cd0/P1nz/vOsle
+zV774Tca339cmGT73mpRf017Cv2ulb137q2/5gmn/0Je+7tI/TV/+dn1va3
yiaydOE1w/XWh5u8v1X990yT1xZrsUvlrg5+H63qv1fMw7Ea7sk233n0CGO+
IHb8AQCA6rkW1/8VXuPnHfhjV8VjXK3qv183+Qx/vvESq72aGW+va3f8z1+n
1+743+tH6Kv/zyvmfxReM1xvfajNc0O5fZ3WfzGO/x1q7/1gq3GPHX8AAKB6
HdZ/fi6rv3Zv2dy+FeS+Luq/M1w2l3bVEdqzsn3mvzZ57mqrI1fI7fPXIvpz
1Z1e/xer/hu+/u/AEb6/Vf13nWt+/d/323znBJcdd50aO84AAEB9dFj/vcst
Xjv53fIxq0fu6KL+W9ue82ufHGaf6deY+QeXrRezbuEz/LrMu9pxqgm2fyer
ea719ZnsKRe7gPm/TV4zWvXf8Pxf3/5/lfda//1c4W7m//q5OR932fxfPz9n
o1bfafuOshrQz7/Zy8bQn8P/tv/u2PEHAACq10n9Z687wGoyv16LX9vlSy5b
D6aj+s+e8+d2v+Oy+4r4OuhxqyP9eeRxudf5NVSut+9quObr//n1S/z6M35O
8Ps67Gu0+s/2LW/1nq+b/Zoxj1lf3lYYv7OafOcnbOxm27j8Qd460nfa/g9Y
7fm0vdd/h6/ld44dfwAAAFhSu3oUAAAA/Yf6DwAAYLBQ/wEAAAAA+pW2HeV/
XHYfUb9jr8LzY+xaZ/+8X1PrCtm88Bp/L9GT7Rprf99zf++BdavqAwAAADrn
snuj+zmBk1vUf9NctvaBf34Ll62D72vBlXOvOc1l95zy96rfyua/3egK6/0D
AACgXor1nx3782vATsvt88f6/H08D7WfV3HZ+hIfzb1mvMvuH/Ce2H0CAABA
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
d6d/fgs51/6+XDl222s+bj4f/6YQf6+J3e7IY3ax7O9zrGwpv5b7ZFzuNcRb
uXEj3l45bu+X3WUT83XLo5sTa0iFy+4pclph362uB/cU6VdW/90Yux0pKdYx
9u/jh/zfk7l9fu2sp+TQ2O2tizb133mx21Zn/t9jNnY72s/EW4lxs33EW2dj
94R8mlhDCtwo31O4X1n996z9e+4e+7fdxNjtqrMm9d9E27dV4XXnyw9jt7cu
2tR/Ppf483V3yBmyRuy21om2jW3strCfibcS42b7iLf2Y7a0fMxl92TYjFhD
CrSNtzidVNj/Zbk9dvvqymXn5z4ob5RdXHZtx8Py2thtq6sm9d8k2ze+8LrT
5ZLY7a2LFvWfv2ZjD5edV/LnoW502fUI3HOg8fKxvgvkytw+4q3EuNl+4q35
ePm///21UvOtPt7d9hNrqL1c/fe2wv6j5bbY7UuFtnFW/x0Ruy111ab+W7vw
On9s4eLY7a2LZvVfk9es7bJrjybHbm8daPuuy+6RuW5uH/FWYtxavI54a7x8
/swfL91ajpdHXXb8j1hD7TnO//ZyLC91hesoscT4cP63B+PW5nV3utz1RoNK
28kySzYs7CfeSoxbm9cTb68ck8vkP4k1pMJl8z9OLey7xTH/o5sx9Nf23i/H
xm5LXTWp/4avkZ6a2+f/PcI10m3GrcVrXuuytZs+Gbu9EcfJx9Mp8oC8rsXz
xFuX49biPQMfby3G5Xcuu1aSWEMS3OL1Xw502fovJ7rsmoYNYretrrR9W3by
/1aW7Vy2VtscxuwV47SSvNn4HYfb4/Xt+Wn2d+LeLru26BzHGgltx82e8/H3
NpkgQ3K1/ftjYMfN/xvWYsn/f5lfp2SF3GuIty7HjXhrOW7fkHfYmPjrAP36
Lwvk3cQaUuKy9Z/vddn8Jb/+846x21RnbvFaTr5u9v9u/qVsFrtddWO5otHE
Wfb88Bqp/t/K/njCDJebdzio2o2bz8tyicvmYvr4u8/2rxe73ZHHrNl4efvn
XkO8dTluxFvLcftBLmf6sblsuPaz54k1AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAqZvdUOM8eXyEnxW4TAAAARg/1HwAAwGAZrv/sz+K9
WCfYazaTi+QZeUTOltVyn+HrxpN97ShP2msOkXFypsyVu2S33HtWlZ/IozJP
7pQDYo8HAABAv8vVf6vI1XK6rGWWlrWtRvuGbCpbyW/l8txn+Ppvjhwjr7M/
F1jNeLDtO1UekxXtPafIDbK1rzNlF3l/7PEAAADodyOd/9X2VbmksG9dOz64
Se59V+aeX9qOFf4ot28te8/29vMF8l+x+w8AADBoOqj/LpQXrZ7Lawyfz7X3
fbfwvvvkn3I/j7H37Gk/7ybPyY3yTZkUeywAAAAGQQf132/kl7JxE+PavO9e
+UJhn//PXrmfV5f95ccuuwbw27HHAwAAoN8V6j9/Xd/Jhee/LrfJMm0+o1T9
V3juUJkTezwAAAD6XaH+83M//s9l8zFWk6VkvMyWX8i2MlF29dfu+ev87H1d
138uu67wA3YccXP5H/lj7PEAAADod4X6bxO5xq7Ly6//4ufv/spla7v4526V
E/01ffZ8mfrPzxG+xT7vcZfNQd4w9ngAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJb0/wFe4THL
    "], {{0, 480.}, {640., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{640., 480.},
  PlotRange->{{0, 640.}, {0, 480.}}]], "Output",
 CellChangeTimes->{{3.90528941197307*^9, 3.905289470109602*^9}},
 CellLabel->
  "Out[116]=",ExpressionUUID->"467d04c6-ee86-48a6-86c6-56c9a2b773d1"]
}, Open  ]],

Cell["\<\
Here is another one based on the most frequent \"non-compliant\" output form:\
\
\>", "Text",ExpressionUUID->"88f2523c-1d0a-4107-ad2b-312edcc79db4"],

Cell[CellGroupData[{

Cell["\<\
plot_pareto([v for v in gdp2[0].values() if isinstance(v, float|int)])\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[117]:=",ExpressionUUID->"6204b125-c05f-49ef-bfba-1298ad358adb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3Qm8HFWZ9/ETtgABEWUNWwiICCiibEaEqyAKKEJcEVFAFhmdKOAkIggZ
R4VRZ8ABwQEdUBRRXx1gBEEQiQyLIwIissqWsIY9AcKSpN//ST2XVIruvt11
+tap0/2rz+dL+lZv55z7kOdJVZ1TGx74+cmHLOWcO3J5/WfyAdPeecQRBxz1
wVfrhw9POfKwQ6ccfNBuU7548KEHH7H9gUtr571jnJuu1y+jx41GAwAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBJ
2vaXRs58uV/OlHUitGdFmS5Do/DZjYKn5QrZo8P3D9n7et623HfcK2eVfK8f
t0bsmAIAAPWWq//8n9vLO+U4eV7ulnEVt2c1a8/0Ufhs/59fWD8nySfkNlnY
SQ2o7VX23leNYv+3ko1Kvpf6DwAAjChX/21d2P9V279vD75jhS5eO9r13ymF
fRvZ/kvbvG9ZWSb276qD/lH/AQCAEbWp/3a3/V+2n/0xwT/KEzJHrpdPy5jC
+/z5y1/LZLnBjiOeYM+tJf9p55dflHvsc5ex5yc0OUfbyJ8P1baD/E7mynNy
dRfnb19R/9n+2XKHPR6y1+0n/yYP2PHBTV2T87++bfKMbCwX2eNZ9t6xhe8Z
K8fKrTYuj8vvZVJh/PL9Hf5Of6zy3+VhmSczZKvC5zet/7R9VK6RZ619lxTf
CwAABkeb+m+K7T/YfvbXAx4ou5hjrP46tvA+X788KHfJAVa/bGO130x7/hDZ
2T7D10Fn2nt9ffQe+97vu+xcq7eRPb+T1Y3XyUfkA1bL+Prsox30tdnxv1Vl
gVxlPw/XW75G9eeK3y97yGva1H8vyC1ypPXrn61Nx+Zet4xcLi/Jt2Q3++yv
y8cK43dW7ufh7/Rjd568T/aVO112/eLE3GtfUf9p+7K15QfWj71dVjP7OnCz
2PEHAACql6v/trMaZSWrE/wxMX+cb80m71nKXvsVeczljgFa/eLnkGxSeM/3
XHbMbv3C/iPt+zezn1ue/3XZMaxHfBtz+5aWv7rsmNuYEfrq//Nda7s/p+uP
6V1k+//BXjNcb81o8v5W9Z9/8OHCay+U23I/72evO2iENraq//5cGOcNXFYL
n5Hbt0T9p209qzf/o/Ad/nf8kPwsdvwBAIDquVfO/x12k7w997p3yWV2zKn4
2jVzr/P1y/VNvscfT7vAaq+8zewzDrPXNa3/tI1z2XGs7zb57Kn2nk1H6Guz
fj4lX8m9ZrjemtLk/a3qP9+u5QuvPV7m5X4+x2XnbZcaoY2t6r8jm7z2Cvl7
7udi/XeQvXfrJuN+rjwSO/4AAED1cvXfflYnvFnWLrxmW5cd0/P1nz/vOsle
+zV774Tca339cmGT73mpRf017Cv2ulb137q2/5gmn/0Je+7tI/TV/+dn1va3
yiaydOE1w/XWh5u8v1X990yT1xZrsUvlrg5+H63qv1fMw7Ea7sk233n0CGO+
IHb8AQCA6rkW1/8VXuPnHfhjV8VjXK3qv183+Qx/vvESq72aGW+va3f8z1+n
1+743+tH6Kv/zyvmfxReM1xvfajNc0O5fZ3WfzGO/x1q7/1gq3GPHX8AAKB6
HdZ/fi6rv3Zv2dy+FeS+Luq/M1w2l3bVEdqzsn3mvzZ57mqrI1fI7fPXIvpz
1Z1e/xer/hu+/u/AEb6/Vf13nWt+/d/323znBJcdd50aO84AAEB9dFj/vcst
Xjv53fIxq0fu6KL+W9ue82ufHGaf6deY+QeXrRezbuEz/LrMu9pxqgm2fyer
ea719ZnsKRe7gPm/TV4zWvXf8Pxf3/5/lfda//1c4W7m//q5OR932fxfPz9n
o1bfafuOshrQz7/Zy8bQn8P/tv/u2PEHAACq10n9Z687wGoyv16LX9vlSy5b
D6aj+s+e8+d2v+Oy+4r4OuhxqyP9eeRxudf5NVSut+9quObr//n1S/z6M35O
8Ps67Gu0+s/2LW/1nq+b/Zoxj1lf3lYYv7OafOcnbOxm27j8Qd460nfa/g9Y
7fm0vdd/h6/ld44dfwAAAFhSu3oUAAAA/Yf6DwAAYLBQ/wEAAAAA+pW2HeV/
XHYfUb9jr8LzY+xaZ/+8X1PrCtm88Bp/L9GT7Rprf99zf++BdavqAwAAADrn
snuj+zmBk1vUf9NctvaBf34Ll62D72vBlXOvOc1l95zy96rfyua/3egK6/0D
AACgXor1nx3782vATsvt88f6/H08D7WfV3HZ+hIfzb1mvMvuH/Ce2H0CAABA
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
d6d/fgs51/6+XDl222s+bj4f/6YQf6+J3e7IY3ax7O9zrGwpv5b7ZFzuNcRb
uXEj3l45bu+X3WUT83XLo5sTa0iFy+4pclph362uB/cU6VdW/90Yux0pKdYx
9u/jh/zfk7l9fu2sp+TQ2O2tizb133mx21Zn/t9jNnY72s/EW4lxs33EW2dj
94R8mlhDCtwo31O4X1n996z9e+4e+7fdxNjtqrMm9d9E27dV4XXnyw9jt7cu
2tR/Ppf483V3yBmyRuy21om2jW3strCfibcS42b7iLf2Y7a0fMxl92TYjFhD
CrSNtzidVNj/Zbk9dvvqymXn5z4ob5RdXHZtx8Py2thtq6sm9d8k2ze+8LrT
5ZLY7a2LFvWfv2ZjD5edV/LnoW502fUI3HOg8fKxvgvkytw+4q3EuNl+4q35
ePm///21UvOtPt7d9hNrqL1c/fe2wv6j5bbY7UuFtnFW/x0Ruy111ab+W7vw
On9s4eLY7a2LZvVfk9es7bJrjybHbm8daPuuy+6RuW5uH/FWYtxavI54a7x8
/swfL91ajpdHXXb8j1hD7TnO//ZyLC91hesoscT4cP63B+PW5nV3utz1RoNK
28kySzYs7CfeSoxbm9cTb68ck8vkP4k1pMJl8z9OLey7xTH/o5sx9Nf23i/H
xm5LXTWp/4avkZ6a2+f/PcI10m3GrcVrXuuytZs+Gbu9EcfJx9Mp8oC8rsXz
xFuX49biPQMfby3G5Xcuu1aSWEMS3OL1Xw502fovJ7rsmoYNYretrrR9W3by
/1aW7Vy2VtscxuwV47SSvNn4HYfb4/Xt+Wn2d+LeLru26BzHGgltx82e8/H3
NpkgQ3K1/ftjYMfN/xvWYsn/f5lfp2SF3GuIty7HjXhrOW7fkHfYmPjrAP36
Lwvk3cQaUuKy9Z/vddn8Jb/+846x21RnbvFaTr5u9v9u/qVsFrtddWO5otHE
Wfb88Bqp/t/K/njCDJebdzio2o2bz8tyicvmYvr4u8/2rxe73ZHHrNl4efvn
XkO8dTluxFvLcftBLmf6sblsuPaz54k1AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAqZvdUOM8eXyEnxW4TAAAARg/1HwAAwGAZrv/sz+K9
WCfYazaTi+QZeUTOltVyn+HrxpN97ShP2msOkXFypsyVu2S33HtWlZ/IozJP
7pQDYo8HAABAv8vVf6vI1XK6rGWWlrWtRvuGbCpbyW/l8txn+Ppvjhwjr7M/
F1jNeLDtO1UekxXtPafIDbK1rzNlF3l/7PEAAADodyOd/9X2VbmksG9dOz64
Se59V+aeX9qOFf4ot28te8/29vMF8l+x+w8AADBoOqj/LpQXrZ7Lawyfz7X3
fbfwvvvkn3I/j7H37Gk/7ybPyY3yTZkUeywAAAAGQQf132/kl7JxE+PavO9e
+UJhn//PXrmfV5f95ccuuwbw27HHAwAAoN8V6j9/Xd/Jhee/LrfJMm0+o1T9
V3juUJkTezwAAAD6XaH+83M//s9l8zFWk6VkvMyWX8i2MlF29dfu+ev87H1d
138uu67wA3YccXP5H/lj7PEAAADod4X6bxO5xq7Ly6//4ufv/spla7v4526V
E/01ffZ8mfrPzxG+xT7vcZfNQd4w9ngAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJb0/wFe4THL
    "], {{0, 480.}, {640., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{640., 480.},
  PlotRange->{{0, 640.}, {0, 480.}}]], "Output",
 CellChangeTimes->{3.9052894723778257`*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"c8925c17-4f69-4ce3-846a-bb5b56e35c71"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Gold medals", "Subsection",ExpressionUUID->"2281df5f-705e-4146-a509-2748df3eda9a"],

Cell["Here we retrieve data for gold Olympic medal counts:", "Text",ExpressionUUID->"cb788994-6317-4cdd-933d-61126cf8b624"],

Cell[CellGroupData[{

Cell["\<\
gmd = qf3(\"counts of Olympic gold medals\", \"countries\", \"the last decade\
\")
gmd\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[118]:=",ExpressionUUID->"8a5b881f-49f4-432b-88cf-20bbc4cd3694"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"United States\"\>", "\[Rule]", "274"}], ",", 
    RowBox[{"\<\"China\"\>", "\[Rule]", "246"}], ",", 
    RowBox[{"\<\"Great Britain\"\>", "\[Rule]", "168"}], ",", 
    RowBox[{"\<\"Russia\"\>", "\[Rule]", "148"}], ",", 
    RowBox[{"\<\"Germany\"\>", "\[Rule]", "130"}], ",", 
    RowBox[{"\<\"France\"\>", "\[Rule]", "95"}], ",", 
    RowBox[{"\<\"Japan\"\>", "\[Rule]", "85"}], ",", 
    RowBox[{"\<\"Australia\"\>", "\[Rule]", "80"}], ",", 
    RowBox[{"\<\"Italy\"\>", "\[Rule]", "62"}], ",", 
    RowBox[{"\<\"South Korea\"\>", "\[Rule]", "59"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.9052894761094513`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"61fc42bc-76ec-48d1-a1ff-d282cb883d43"]
}, Open  ]],

Cell["Here is a corresponding data frame:", "Text",ExpressionUUID->"74ea9393-db66-406a-b8a8-1eea5aa68bb6"],

Cell[CellGroupData[{

Cell["\<\
gmdf = list(filter(lambda x: isinstance(x, dict), gmd))
gmdf = [ {\"Name\" : k, \"Value\" : v} for k, v in gmdf[0].items()]
dfGM = pandas.DataFrame.from_dict(gmdf)
dfGM\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[119]:=",ExpressionUUID->"ca0084ba-a577-433a-809a-587643599c78"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      0 -> <|"Name" -> "United States", "Value" -> 274|>, 
       1 -> <|"Name" -> "China", "Value" -> 246|>, 
       2 -> <|"Name" -> "Great Britain", "Value" -> 168|>, 
       3 -> <|"Name" -> "Russia", "Value" -> 148|>, 
       4 -> <|"Name" -> "Germany", "Value" -> 130|>, 
       5 -> <|"Name" -> "France", "Value" -> 95|>, 
       6 -> <|"Name" -> "Japan", "Value" -> 85|>, 
       7 -> <|"Name" -> "Australia", "Value" -> 80|>, 
       8 -> <|"Name" -> "Italy", "Value" -> 62|>, 
       9 -> <|"Name" -> "South Korea", "Value" -> 59|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 1, {All, "Name"} -> 
        1, {All, "Value"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "Name" -> TypeSystem`PackageScope`AtomShape[145.60000000000002`], 
             "Value" -> TypeSystem`PackageScope`AtomShape[34]|>], 
           DirectedInfinity[1], 2, {All}]]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"Name", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer]}], 10], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 1, {All, "Name"} -> 
        1, {All, "Value"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "Name" -> TypeSystem`PackageScope`AtomShape[145.60000000000002`], 
             "Value" -> TypeSystem`PackageScope`AtomShape[34]|>], 
           DirectedInfinity[1], 2, {All}]]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"Name", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer]}], 10], "Path" -> {}, "DisplayedRowCount" -> 
     10, "DisplayedColumnCount" -> 2, "DataRowCount" -> 10, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Value", 
                  Style[
                  "Value", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Value"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Value"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["United States", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["274"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["1"], 
                  Style[
                   RawBoxes["1"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[1]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["China", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["246"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2"], 
                  Style[
                   RawBoxes["2"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Great Britain", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["168"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3"], 
                  Style[
                   RawBoxes["3"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Russia", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["148"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["4"], 
                  Style[
                   RawBoxes["4"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[4]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Germany", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["130"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["5"], 
                  Style[
                   RawBoxes["5"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[5]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["France", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["95"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["6"], 
                  Style[
                   RawBoxes["6"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Japan", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["85"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["7"], 
                  Style[
                   RawBoxes["7"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[7]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Australia", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["80"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["8"], 
                  Style[
                   RawBoxes["8"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[8]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Italy", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["62"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["9"], 
                  Style[
                   RawBoxes["9"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[9]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["South Korea", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["59"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{240., {155.134033203125, 160.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{240., {155.134033203125, 160.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905289477172345*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"17b86e8c-cebc-4116-af7a-4dcd1a860aec"]
}, Open  ]],

Cell["Here is a plot attempt:", "Text",ExpressionUUID->"79878836-ddf3-48ae-8ab1-be600e39b7b0"],

Cell[CellGroupData[{

Cell["plot_points(dfGM, \"Gold medals\")", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[120]:=",ExpressionUUID->"9751723a-0291-48a5-9d05-ba581506f4e1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3Qm8ZFV5IPCDbQQFRCQ6sgmixg0XHI1CHGiRCSHurWLaGEV/QZws7oLG
ZKYdNTNxnEwmoohrqzPqJCYiYAQXglETjVlwSdQ4Rux2QQITlF2FnvN5T9G3
b1fVq/fO61fvvP7X7/fvfnXr1q1z7/3u/b46d6m7Pfv5G55zq5TSi/fK/2x4
1hmPfNGLnvXyJ90hP3nK8178H0573qm/etLzXnLqaae+6OHPXpcHXrpHSpvy
+LfOf2/btg0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAJiD/HhA9rbs69n1xdeys7OHLHGap2Txx+EzjHtxmPdymKGd
m2Kelvjezdml854HAID8OC37Ufal7HnZo7Ljs1/PPlVquLsvYbrqvx3fq/4D
AOYuP34uuyk7N7vNhHGekh20hGmr/3Z8r/oPAJi7/PhQ9sPswEW+73HZX2XX
ZVdnH82OHoyzU/2XH3tkp2ffzG7I/i47adb6r0zvzOxZ2VfLceq/yR5epv3S
7BvZNdlF2T3GTOOE7OPZD0r7Px19nmPGe3R2SXZjmeZLxtV/pZ/0L7LLs2uz
L5Z5/KnBeDvVf6W2/mz2/dKWf87ePu+4AADWpvxYV2qOv1zk+55W6rALs8dn
J5caLOqkR/TGG1f/bSrD3pr9QnZq9q3su4uo/y4tNdsTsyeUOvDK7Pezc0rd
Fm28LPt81IW99z89uzn7QHn/Y7Lzsh/3a8DUHQOPYZ8s4z05++tSt24btCk+
97nZidkjsxdk/zKs44b1X34cXdry3tTVwI8sy+xd844NAGBtyo9/U+qp9455
LWrDW/fsUYbfKvt29oX4uzf+Ptn3oi7rDduh/suPO6Suv+5PB591TBnv4hna
vK3Uinv3hj2+DP/7Qa33/DL8/uX57UqdeO5gmjFP0c/32d6wz5T53Ks3bN/y
/m1T2nersrx+pdSP+/deG9Z/Ly7t22/esQAA7B4WqP8uKa+NvKQMv095/tIx
73lj6s4lvF15Pqz/TirPnzTmvZcuov57z2DYz5ThvzsY/vNl+GPK8xNGnz+o
bcN/TV1f3N5FzMfrx3z+5mH9lx9Hpe78ySsHyyw8bPDeS3vPj03b+1GjD/Xg
eccEALC2pSnHf/PjvtlDsscO6r9HlOdPH/Oe3y6vHVyeD+u/p5fnPzfmvZ9Z
RP135mDY4f029oavL8OfXJ7/8pj6bOjQ7JDy9yvGfP5/7dd/+XHX1J1r+Ldl
/h5RltuvlWms7427Q/1XhkXfZZyLeEMZP67B3jjv2AAA1q78OD9Nuf5jWFul
1dH/t9T678Ty/DdKjTbObVLX/xd9gQv2/6Xufjnxx2GD8X51lvqv99qe2XHZ
BeV9R09bDgAAS5W23//lg2lwvWp5fVj/xfltcb3G8Fy7qJni/L9P9YYN67/9
0/Kc/7fU+i/OUfzXqFNn+JyZzv/Lj98sn3GX3rC4Dvmzi6n/euM8sLzv1+Yd
GwDA2pW6a1fj/s9fLPXM8aV22pi9v9Qjz+mNP7r+N+4dE/eBiXuYxLWxs1z/
+6q0/frfE0s/2WKv/11S/VeGPb3Uu+9L3TW9cQ5enA/4n7OzeuP9+zJeXP/7
hDJOzOOWQf137zLff566/s24Vvgj2T8tVP+Vz3x76o5LR99fHAuOe9ZEf+z9
5h0XAMDaVvqdohaJ+8/FuWij3397Z9SDY8Z/fOkji/Hi/LePZccMxhlX/0Xf
2MtKHRV1U9yfJe7BcvFK1H9leNR8cdz7ylJrfas8H4732NK+aGfc9+WMNP7+
f9H+S8qyiGm9NnX3tlmo/ov71PxZeU98RvSfRk39iIWWAwAAAAAAAAAAAAAA
AAAAAAAAAAAAwGpR7jt7cHZ7AKApkb/3mHctQXtK7GwDAJp08LxrCdqTuu8P
P4mfNP/vMQDAbEb9N7efdy1Be0oMiR8AaIj8TQ3xAwDtkb+pIX4AoD3yNzXE
DwC0R/6mhvgBgPbI39QQPwDQHvmbGuIHANojf1ND/ABAe+RvaogfAGiP/E2N
XRU/h51x/rpsfbax/L9u3vMKAGuF+o8auyJ+cq23IduabeuJ5xvmPb8AsBao
/6ix3PFTar+bi379NxqmBgSASuo/aixn/JRjvlvH1H79GnCLY8EAUEf9R41l
rv/WT6j7htbPe74BoGXqP2osc/23ccb6b+O85xsAWqb+o4b+PwBoj/qPGs7/
A4D2qP+o4fpfAGiP+o8aK3j/vy1qPwBYHuo/avj9DwBoj/qPGuIHANojf1ND
/ABAe+RvaogfAGiP/E0N8QMA7ZG/qSF+AKA98jc1xA8AtEf+pob4AYD2yN/U
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
SF3f3bey/5i2X/9xeu/126TFX/8xih8AoD0Hz7s+Ydnrvddlx2V3yx6WnZe6
+70cVl6P+79EvffE1N3/5T1p8fd/iTpyV/X9jWrL1vsWzcfqYj5WF/OxupiP
1WVXz0dMd4951ysse/03up/fD7NvZ3+S3XdQu21KXT/gDdknsiPn3e5e+25f
4r7pvmnzsbqYj9XFfKwu5mN1WSvzAYuxVuLefKwu5mN1MR+ri/lYXdbKfMBi
rJW4Nx+ri/lYXczH6mI+Vpe1Mh+wGKm7XiWOT+8577aYD/Ox2piP1cV8rC7m
AwAAAAAAAAAAAIDdXX5cnP3BLpr2pdkL5j2PS2h3/POEKa+vL+PcYd5tneMy
Orwsgwethuks4vM2Z+fMe/lBK8q1Cpf0nq+abWg1taW0Z7fPDexak2q2qFki
9hY5rTum3u+DLGfNttC08mPv7Peyf07d/ar/pczbY2rbM62uzY+7ZK8vn3tj
tjV1v6XyqPL6QvXfbco0xt5jvbz2P7P/W+bre9mnsudmt1uB+Dglu2rG8fq/
GXRN9rfZhhneu67M563L85n3e2WfPfrMH6fuNwzflO2/Astmv1n3zfNejyth
sC767jHvti3DfK2aumBCG4/JbsouWObpzrT9L2J6m9KO9d/M29Cs62ja/nqx
6zk/7pydnW0p+/fLsguzo5d5Oe/U5sXsBwfv2yHn5MdPpe73HuK3HB6wq2KQ
9kzaVtIS6r8x07g0rVz99+7sq9kvpq4f6N9mv5k9s7Y9U5ZRfE78dso/ZE/O
fia7X/ai7CtlnKn13wKfe0TZZr+cnZzdJ7t/9qTsQ9njprz3p5Zpuc+0/y/j
fT91dU64Z/a7qavJ7jXlfbcZM2zm/V7ZZ3+4fOYh2c+nrgZ873LM/zItwyWv
xwWmuyzreBnns78u+tYttM5Xs9RG/ffW2Eel7nvXXZdxurNu/zOt0zSo/3bF
Opq0v17Kes6PT2afyR6ZHZb9bPby7NHL3P6d2ryY/eDgfbfknPy4Xdkmv57d
fYlti98Cu/VyrzPmb9K2kgb132i7zX4ldXVU5Pr4TrHvuGmVv3foB+iNF99V
/yK7PnX9ZX+Y7d17Pb5znVde/0b2y2nh+i9+q/iZC8znTu3JjwOy96auZrgu
+2K2sfe+zcP3ZYeX10bzEPvc6M+JGvSny2t3SF1NGE/iN/biu2N8P4/+n8f1
pr/DNp7K/jY7sUz35uyj2YG99zy0DLuirIdPlGlEX9IHs2uzV5ZxH5u6frjo
c4o+yv/U35ZTV6t+sbwn1sUbs30GbevbNGH5/qTdg2G3KvP+lN6wWI+/XZZr
tP2dqXfctvd33+by3l9IXZ9ZLJ8rs/NT97uFo/3+6L3vKq+P2h/j/E1Zv3+Z
fWw0zfK+X8u+lrb3y72/99qTy/K5vkwz3rt3LzbO6Y07rn13zy4oy3bvCctu
j/J/9IW8Obs8db/FfVH2wDHb4LPLuozY2KPM42nl82Ieo848OrtH6uI+1u1f
pd7+v7Trg2V+I84+l50waFesq9/K3p5dnbo+kOf0Xo/2nTnYVqKejVg/frDt
nZn9fupi9hMLxd6YbeHLpZ2xLA8ctDOWxz+Uz/3uoE1Tl+mM+8hb1vOkddwb
9/CyPn4pdbF2Q2nb+t440d/9ttTt2yKu4nvr88d9ZvaSMk/xWW9IY2r+1B37
iHm7V+r2yf9xge1yuG9/YPbnZR3HdGJ/8ZA0ZftPY7bjMjyOwfxT6uIwYvRV
/TanBY7/LrR8F1pHacL+ejHLvPz9jOz/lfcf1xsn9iXvGrzvrqnblq4py++P
sn8zaR7LsKjVL56WY3rL/1Fpx/3XxO/TZXrbyjq+Q1mWX0g75o+4Z2Dk3Ngm
bijjPHRMTjqxfG7sw6P+jX3N6WW9xjL8fPbkxcQ1q0taXP13dYn/I7N/l7r9
0mvGTSt1x4Jjn/47qfQDlOH3L9N5Qer6iKIW/LvsHb3p/Fnq8kLksOjH+3SJ
/Wn131ey/5N69ejg9Untid+3jn1s1B7RTxN9htFn9bDy+n5lm3tz6vVnpK4P
J0aI/ea9s6Oyj2QXlfcdmP2ojPOdst1E7fXGMv93LOONtrV+/ffDsixvLtvp
P2b/uzcvx2dPL20Iby3TiO352WU+Divbb+ybn1mG/fuybf6n3rRiPcS2fbcy
3ViObyyvxbHp56cd+/X2mbB8o91X9Z7HMnpWmZd+fry0TC+W+T2Kw9P2+i/e
t6E8/5nymfuV9z6pvHbPMu65qdtHD+u/+K57WW/ZRpwel903dTV75JXN5T0P
Ket7Y1lmsR6fN1iHLyzTjtj9tbS9Pt6cdsxd49r3D2U9vmyB7TD2rZ8q73lI
mcbrUlcvjWJlU9peA0U7H5C213/x/eXkssw+UNbzx0sMRIxE/ffh3udFzj+t
zFN81qtTt8++62BdXVnmOdbTy1L3Hebe5fWnleW/Z295fKF89h696Vycuph/
bepqlNH7J8beYFv4aFkmD047bwv/obT7+WXe47vRC2ZdpjPuI29ZzxPWcczz
rQYxuLWMG8v+LamrCw4o48TxuFeWtsa8x/fbqIFPHnxmbCdnpW7/8pgyzqlj
2hfb/OfK34/pL/80W/33pdR9d713ma+nlPiYuP2nMdtxGR414TFlOcR3z9gO
Tx/kkWn139Tlu9A6SpP317Mu89F6vm3qatCIrf+Ruprpp1P3HeORg+028lf0
E0aueljq6ueLJ81jGdav/ya1eX3qYin6H/v7r08vsCzin+gL+HyZ7v6D1+M8
lDhudVKZZrQvtuNhTor3R86I74rRT/Ka1H0Pi31K5JNTUlc/HjdrXLO6pMXV
f7Eu+/19sT//zKRppTF9dqnrmzl7MOwRqcsre6VuHx4DH9Z7/d5l2LT679jU
7XMjX3yubLM/Nxhnp/ZMmFb0Ybxu2jJK22uuJ/aGHZK21y0PTtu/y72qN058
V4964BfK89G21q//4o9RDfTE1OXfy8rrkbuuKX6vDFtXxh3uY2Jf8fLBsKgb
vzNl3mPff0XvebRnMef/jdp2U9k3nDJmHXxgMOzw1LtuY7hMpnzmndL28/6u
KZ83WuYv7E3nT3rv+cUy7N3leSznyGM7fW/orcPDJnz+5uEyn9C+HeJk3HpM
Xf0T7dhzMF70Fz+ntw1GfN9pMM4wxh5ehj27Nyz6o65fYHlGrfobg3X17t7z
yHXRX/jc8jxyYtSHJ/eWR/xxY2/e/jh128/fzxBD42Iv/uh/f7hlWyjPI4+9
esL0Flyms5i2nnvr+MhBLJ/RG+fWqds3nT7lM6Jv7/2Dz4zlv643LPqV3jfm
vfH9+Pm9z4pzn0+YtP2mnfftUZs+c8p2vdP2n8ZsxxPe/9Lsb3rPI4Znvv5j
uHxnWUdpxuO/E5Z5vxaN7+pRy0VtFHVg9Hv9a+qdQ5e6+ij2P4f2ht23tPmh
k+Yx9eq/SW1Ovf6/3rDR/muvKfM12gajVrvd4LXIP7EPeVpvWNRtsR29dPC5
jx+8L5bB0YPpRR58z6zLmNVl0rYyZh8R2+0/DMaJHPvPk6aVxtd/o+M01/Rc
W+Itvis/PnV9LsNzhv51OK0xbY44jn7J6KeIvrios35ngfZE7fSK1H3HvLK0
Jz7/j6Yto9Ttc7el7cd/R2LYSWW6HyvPo+/l1FS+h6UuJz2j/D3a1vr1XyyP
h6Xt/fhRA95cXo/vXXEOyvfKMvl+73PfMWjjtWPad30Z93ZlnOh/if6V2P6v
7r2+d689s9Z/kUdGfXrRN/Wisq4fO1gHrxi89/A0Q/2Xuu+h70ndfvgHvfn+
u/KZv1Cex7q5dW86Z/emcVQZ9sfl+b5l3UfOjD6QX+4tm9E6jM/64/46LK9v
Tjvmi0nt+8l6HMzLEaXNn01dLog8edNgXY3q6FGdvyn72phlH//0j7HfLfXy
T289xx+3L89jfx7f36I/7areZ712sK5eOvis6BPoH1+MvoQLyt/nls84thcH
0Yd6cfaWMe2eJfauHbynvy3cuYz/yOG0y+sLLtMZ95G3rOcp6/gXB7F87GAa
0Sf7jt7z6J+JY2v/UqYROfmvB5/5ocE0YllfNBgW/amxv+ofb4xj7e+ZtP2m
8fv2mEbEeuw7+/X2Tu+ftB2X4XG+RPS5Xpa2fye7fPBZ0/r/pi7fGddRxNu4
nDbLMu+3JfYVUduNjp3EcYQtZdgpZZznZd8Y81mxb37GuOmWYYup/+40aFP8
MfEcz/L6+1MX5y8cvPaANOY7beri8+2Dzz249/pD047f70diGX521mXM6pK6
ffY7xgyP7f77vec7bLdlWBy/ubT3fIcYTuPrrfhOEsc07zFGHG+IfVPsi241
eN+C9d+YefjtEn+3mdKeOC4bfTHRL/bA0o7zB/uBcdvmqLb7b2PmY5S/Rsfm
4pycqDHi+Gzk5si3p5RxRtva8Py/6G//yXHDtPP+Oo6Px74xjnfcr3xmvPC2
QRuvL/M3blnHuXmHpe3HN6LPKPotnz2uPTMs67Hjpe5Y5acWiInD02z1X9Qq
ce1dnA9znzLv8cJnB9OJ/t9X9aZzVm8aDyrD+t/7o1Y8IXX1UBw7/lpv/mMd
/lzqjmvcsg7La5sHcTKpfROP/6YSW9kZqTuGO25djc4p3ZTGnDufBvXlcHlO
iLM3lnmNeur+5XPi3MKFtt8YZ1Pvebw38swhZf4vnzSPg2FLir3U2xZSV7tP
q/8WXKYz7kduWc9T1vHofPvRsh9X/43y68ll3qMv86jSnrPTAv1iaVAzlGGv
Tdv7wEdGfe/7p+48tu8P3vOU1NuflGGx/OP7fHxvju9sT1xgux4XGw8vnx/f
p0fH238n7XheyKZp87nQ8p1xHY2Lt6Uu8+j/i+s9HlyW66Gp6/P6Znk9jo//
85j2xD78V8rfcf7sBwevvyHNXv/doTdstP86fMqy+MnyKus+1sdLeq89MI2p
H1OXS9425XNH/RHHpZ23pUNnXcasLqnbf3xxzPCIz/53o03D9ZgWrv/iPOAX
D97zv7OPT2nPvUqc/eyYYYut/+LYXuTe209pz3mpVzelri76atpxnxT7xNcP
3hfnQsT3m8gvO53Xn7bnsNG2uK6M+6I0Q/1X/r6wvOepacf6L/pKvpy2n2t5
aBpf/316OGzwepxrs0Otnbqaud+eOMfr6hmW9S3tHgyPY+l/23t+6XA9pp3r
v2PK8wN64xxQhv273rBHpPH136+mbj/0pPL8A733jI7pjj0mkbp+sVgmO923
pr8Oy/PNaXvOmda+v58SJxenLq+PjiMdPmUZb0rLV//F+bX9vvF9UheXi6r/
yrDow4z6OGqOz02axyXE3k4xlXb+LvSNNPn474LLdBZp+7ll09bxsP7rn/MW
3y+2jIal7n5RHx98xsfSIuu/Mt3oZ4t9ypEDsQ/7jdQdi7g57Xh93WvSoP4b
fE5cD3futinb/4TYeHH29cGwt6YZ679Zlu9C66j8PW5/vdRlHueXRt6IPtUL
y7BY3lcMYmzc8d+HlOdxfsdfD6b76cG6HNfm9ami/it//3Jp3yj2Yv8W9f3w
+G/sn14y5XPju1Zs378y5XMXXMasLqnbX8W1FVHvxXeD+B7462Vd948pbRqu
x7Rw/RcxHddFxTUWoz6MB/Q+L2I5viM+rh/7qbtePY4zxXeOOKf2k2nh6z/i
s08r48c8xXkSX+nH44T2RP9D7Juj5hidqx3HVPv1X5yX+9dlunEOcNSIB6Wu
33B0XkjsJ05J3fUx8Z0w8tJvpe31yFPKdhf741nrvzgWEvv3rWn78fGohS8t
03pHWUZ/kcbXf3Ge7o/KurtfeX/Ukq8ur4/2JdHeOMYR13Z/a9CeUS32qDLv
Y+9Vl3a+/0v0cz4ndfue/vHCS4frMe1c/8X6iZz1zNSd/7NPWeaxvOMYbXyv
PL6sk3H1X8xXHIP4QHkex8EfnbrzSN+fevVf6s6Xf155z2FlPd5UltfDyjqM
voy79tdhee/mtD3nTGvfc8t6/HJZ/qP1+PQy/L+nrp8x4vySst4OL8s+rssY
5ZFYj8tV/8Wy+fsy37Hdx3GA6FNeSv13alku4dwJ2+aw/psl9k5JC9d/ESPX
l3UY+5Ko73+zvLbgMp1xH/mT9bzAOh7Wf99MXd9qxFz0gcR3ttE+Z3RNRbQp
9revKs8XW/89oSzz/ca0+TVl/cZ1b/E99X+WNkc99+3RMkzddQ5nlviI+I++
7jg/cnTOwdjtf0JsjM7diXNN717WyZVp9vpvweW70Dqasr9e9DJPXT0a91aI
XBjHkaKejn1AbLOjvrLR9R+xD47Yi3Nz/mawnuIzY38W/XERo68sn90fZ1yb
16fK+q88j2vbYj/8sl4cRQzE+TL96z9G5yft9Lll+KvL+nlmWb/Rxxe1wjNn
jWtWn9TVTHGc7ntlfcXxs18ajLNpuB7TwvVfHA/4fNl+tvWGx7kEUYvFPvGa
Ms5v9V6P+uH88r7Yj47uOTOt/os++rjWKfY3kQ/i2Fbs8w6Y1p7U7R/PKW35
XonZuCdJfz8QsRzn8F3X3/bKtvxnZXo3FzGdqDGfUZZpjBj7jp98Hy/vm6n+
K8/j/KkP9aYT04++m63lc+O76eg+Mzv19ZVtcXT9dKzb6Ks5tfd6HPP5Tnn9
grKsh/ucuAbxijJ804Tlf0rafq7bttK2mOeon/rnsO+0HtP4eiWOG323LNPN
ZVgco/3HMu1Yj8elyfXf08ryiudvLXHxvRIT/fov+hcuTt3+77oy3dH1DPcp
y2R0n4Rb1mF5fXPaMU4mte8JZT2O7hM+Wo+xLuL6yVFOje/YcW7Et8s48b3k
f6Xtx1c2peWr/2Kci8o8x+f8eprt/I1x9V/U51Fjfzmlnc/lH0531thLM9R/
ZVh87/tKWWYxvT/svTZ1mc64f3xXL14mruPBso+cG9dt3ljG798PJ66beUfq
9gNxXksci/8vafH1Xxy7+NCENo/6uR9cllmc03B9ec+pafv+L865eW/afn/j
WE4Rp3v1prXT9j8uNsrw15ZxI77jvJcXpMUd/526fKeso1umk8bsr5eyzMt7
YpzYd8R+6NoSZ5Ejbtsbb+r9X8o4UfNdVj7/98sy7q/LcW1en5ah/ivD4ths
1OaxP47rLGOb+Jc0/f4vw/ovat3npe3bWuwXY7s9dta4BmDtSN35B9Fn+uB5
t2UXzV/kuDNnHPfwNKi9aVvqrlH6w3m3AwBWg9SdNxR9H3G95tR7krUodddP
PLr0kUztf+q9R/23RqTu2NAvle82U++5DAC7i95xojgufv95t2cXzF+cIxnn
JMa5dGN/n3vMe9R/a0Tq3eN63m0BAAAAAAAAAAAAAAAAAAAAYO1I3e8cxB8v
Gwzf6bc1AABoX6n/ri+/0bR/b7j6DwBgDSr1X/wObPxe72t7w2+p//LjgNT9
Lmzc/zh+kzR+c3rjYDoXp+53TP+g1JLx+8rPyfYuvwMavwEbv8N90uB98Zvz
8bvZ15T3vDv76XkvFwCAtarUf+dkTyz9gIeU4f367+D43YPU/d78EdlvZj/O
HtabTtR/8Xv3v53ds/x/U6ntTi3D4jfgr8huV95zYOp+d/53s3tnR2UfyS6a
93IBAFirRvVf+fuvsreVv6ce/82PD2Wv6z2P+u+TvefrSp/eu3rD7lLONXx4
ef6fswsH0z2kjPMz8142AABr0aD+O7b069130P8Xtdwrsi9kV5a67kfZH/Wm
E/XfGwbT/mb20t7zPUpt97jyPGrIH5bp9W0bHicGAGB59Ou/8vxD5Xhwv/47
vRy3fXr2wOwe2fmD90X99weDaV+avWAwLP55Qvn7w9mflOkN7T3vZQMAsBaN
qf/uX87be22v/jtvdFy4PL9V9tVlqP9ek30lu/W8lwMAwO5iWP+VYe9K3bUg
28rz/5FtyY7J7pO9Jfv+MtR/B2WXZ3+c/Wzqri35+ezt2bp5LxsAgLVoQv13
WHZDr/67YzkmHPdwiXu0vCp7Z239V57HdcF/mrp7xsS9Zb5c6s095r1sAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6Px/CJ4vYw==
    "], {{0, 480.}, {640., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{640., 480.},
  PlotRange->{{0, 640.}, {0, 480.}}]], "Output",
 CellChangeTimes->{3.90528947891397*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"ee781724-a5f9-41ce-b8e3-4a8d410d5cf1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercise questions", "Subsection",ExpressionUUID->"7ecbd2ed-eae1-4a4e-a67f-b726dac46500"],

Cell["\<\
How does the code in this section maps on the flowchart in the section \
\"General structure of LLM-based workflows\"?\
\>", "Item",ExpressionUUID->"ea2693f7-52e8-4b62-a4cc-c0456a0e3226"],

Cell[TextData[{
 "Come",
 " ",
 "up",
 " ",
 "with",
 " ",
 "other",
 " ",
 "argument",
 " ",
 "values",
 " ",
 "for",
 " ",
 "the",
 " ",
 "three",
 " ",
 "slots",
 " ",
 "of",
 " ",
 StyleBox["&qf3", "Program"],
 " ",
 "and",
 " ",
 "execute",
 " ",
 "the",
 " ",
 "workflow."
}], "Item",ExpressionUUID->"ea9d3292-2108-427e-b7a5-4b4e7f91eb49"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"83bebae5-5e03-4834-8d04-ace2c5de7387"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Refining and adapting outputs", "Section",ExpressionUUID->"754e2a1d-f3d8-4c66-b496-ed43ee9d3216"],

Cell[TextData[{
 StyleBox["Workflow:",
  FontWeight->"Bold"],
 " ",
 "We",
 " ",
 "want",
 " ",
 "to",
 " ",
 "transform",
 " ",
 "text",
 " ",
 "into",
 " ",
 "a",
 " ",
 "specific",
 " ",
 "format",
 " ",
 "that",
 " ",
 "is",
 " ",
 "both",
 " ",
 "expected",
 " ",
 "and",
 " ",
 "ready",
 " ",
 "for",
 " ",
 "immediate",
 " ",
 "processing.",
 " ",
 "For",
 " ",
 "example:"
}], "Text",ExpressionUUID->"674fe72a-e6c3-4d55-bee2-23e506d3fda8"],

Cell["Remove certain pesky symbols and strings from LLM results", "Item",ExpressionUUID->"532881ba-006e-4fbd-8822-767e8697c7f9"],

Cell["\<\
Put a Python (or JSON) dataset into a tabular data format suitable for \
immediate rendering\
\>", "Item",ExpressionUUID->"7c91c529-5325-4144-be55-1963b6b194c1"],

Cell["Convert a dataset into a plotting language spec", "Item",ExpressionUUID->"8709a86b-6277-4870-b411-c196ab33204b"],

Cell[CellGroupData[{

Cell["Normalizing numerical outputs", "Subsection",ExpressionUUID->"36a52536-f378-4992-b942-8613905c4a47"],

Cell[TextData[{
 "The",
 " ",
 "following",
 " ",
 StyleBox["LLM example",
  FontSlant->"Italic"],
 " ",
 "function",
 " ",
 "\"normalizes\"",
 " ",
 "outputs",
 " ",
 "that",
 " ",
 "have",
 " ",
 "numerical",
 " ",
 "values",
 " ",
 "with",
 " ",
 "certain",
 " ",
 "number",
 " ",
 "localization",
 " ",
 "or",
 " ",
 "currency",
 " ",
 "units:"
}], "Text",ExpressionUUID->"cc8eb638-c3b7-4c4c-b531-dcfb81804160"],

Cell["\<\
fNumNorm = llm_example_function({'1,034': '1_034', 
                                 '13,003,553': '13_003_553', 
                                 '9,323,003,553': '9_323_003_553',
                                 '43 thousand USD': '23E3', 
                                 '3.9 thousand' : '3.9E3',
                                 '23 million USD': '23E6', 
                                 '2.3 million': '2.3E6',
                                 '3.2343 trillion USD': '3.2343E12', 
                                 '0.3 trillion' : '0.3E12'}, e=confOpenAI)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.9052894887504807`*^9, 3.905289497615786*^9}, {
  3.905289597090234*^9, 
  3.905289600543198*^9}},ExpressionUUID->"061d6d72-1427-4ff7-8aa6-\
e634911e85e2"],

Cell["\<\
This LLM function can be useful to transform outputs of other LLM functions \
(before utilizing those outputs further.)\
\>", "Text",ExpressionUUID->"7099ae66-2f29-495e-a747-bc2fe2b5106e"],

Cell["\<\
Here is an example of normalizing the results of countries GDP query output:\
\>", "Text",ExpressionUUID->"41d0b78f-7f15-4e5c-bcfc-e2c776fa79c9"],

Cell[CellGroupData[{

Cell["\<\
gdpRes = \"{Brazil : 2.6 trillion, China : 17.3 trillion, France : 2.7 \
trillion USD, Germany : 3.9 trillion, India : 8.2 trillion, Japan : 5.3 \
trillion}\"
fNumNorm(gdpRes)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[124]:=",ExpressionUUID->"b269726c-f5dc-4e2a-afe0-da4fe6b12d2c"],

Cell[BoxData["\<\" {Brazil : 2.6E12, China : 17.3E12, France : 2.7E12, \
Germany : 3.9E12, India : 8.2E12, Japan : 5.3E12}\"\>"], "Output",
 CellChangeTimes->{{3.905289483364497*^9, 3.905289500565517*^9}},
 CellLabel->
  "Out[124]=",ExpressionUUID->"14765d0c-2503-4e8f-8a37-28cbdd4bd006"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dataset into tabular format", "Subsection",ExpressionUUID->"427b0bed-d637-44bf-80aa-8c53956c6879"],

Cell["\<\
Here is an LLM function that transforms the plain text data above into a \
GitHub Markdown table:\
\>", "Text",ExpressionUUID->"bc15b3ae-4ced-44ba-b27f-c7ccfa396649"],

Cell["\<\
fgt = llm_function(lambda x: f\"Transform the plain-text table {x} into a \
GitHub table.\", e=confOpenAI)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289519937151*^9, 3.905289550672306*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"077755b1-6c49-49d2-ac9e-9e36518fc1c3"],

Cell["Here is an example application:", "Text",ExpressionUUID->"b8ecb3a6-e850-46bf-8edf-7f08a91d18c7"],

Cell[CellGroupData[{

Cell["\<\
from IPython.display import display_markdown

gdp2f = fgt(' '.join([str(x) for x in gdp1]))
#display_markdown(gdp2f)
gdp2f\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289510825965*^9, 3.905289514017379*^9}, {
  3.905289668847*^9, 3.905289689344454*^9}},
 CellLabel->
  "In[136]:=",ExpressionUUID->"a0531510-8d59-46cd-96ef-645df9eaed00"],

Cell[BoxData["\<\"\\n\\n| Country        | Percentage \
|\\n|----------------|------------|\\n| United States  | 23.4       |\\n| \
China          | 20.5       |\\n| Japan          | 6.2        |\\n| Germany   \
     | 4.8        |\\n| United Kingdom | 3.6        |\\n| India          | \
3.5        |\\n| France         | 3.4        |\\n| Italy          | 2.9       \
 |\\n| Brazil         | 2.7        |\\n| Canada         | 2.3        |\"\>"], \
"Output",
 CellChangeTimes->{3.905289691446416*^9},
 CellLabel->
  "Out[136]=",ExpressionUUID->"990a38c6-884c-43ac-a890-d98676df00e1"]
}, Open  ]],

Cell["\<\
Let us define a function that translates the dataset by converting to JSON \
format first, and then converting into a GitHub Markdown table:\
\>", "Text",ExpressionUUID->"de9c209d-e1c3-4452-913b-48ae715414c2"],

Cell["\<\
fjgt = llm_function(lambda x: f\"Transform the JSON data {x} into a GitHub \
table.\", e=confOpenAI)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.9052897081067533`*^9, 3.9052897184564047`*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"c3d945f1-bed8-4ae0-928a-ed2046bbd76d"],

Cell["Here is an example application:", "Text",ExpressionUUID->"ac7164ca-1a36-4bd3-9a88-01fc57185248"],

Cell[CellGroupData[{

Cell["\<\
#display_markdown(fjgt(json.dumps(gmd[0])), raw=True)
fjgt(json.dumps(gmd[0]))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289724170882*^9, 3.905289731138631*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"a397cf88-de0d-4a60-9d1e-8968e1a3582d"],

Cell[BoxData["\<\"\\n\\n| Country       | Medals \
|\\n|---------------|--------|\\n| United States | 274    |\\n| China         \
| 246    |\\n| Great Britain | 168    |\\n| Russia        | 148    |\\n| \
Germany       | 130    |\\n| France        | 95     |\\n| Japan         | 85  \
   |\\n| Australia     | 80     |\\n| Italy         | 62     |\\n| South \
Korea   | 59     |\"\>"], "Output",
 CellChangeTimes->{3.905289732819948*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"e4f40499-6b70-47e7-ab9b-33ef4fd3d940"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dataset into diagrams", "Subsection",ExpressionUUID->"ddd4f233-30d4-4dd7-99e9-9d6c5729062b"],

Cell["\<\
Here we define a reformatting function that translates JSON data into Python \
code for plotting different types of diagrams:\
\>", "Text",ExpressionUUID->"df76934f-d4e5-491a-bea4-933753823151"],

Cell["\<\
fjp = llm_function(lambda a, b: f\"Transform the JSON data {a} into a Python \
code to plot a {b}.\", e=confOpenAI)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289743881488*^9, 3.90528975082312*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"bcc81926-5d47-4879-bd3c-34372efa75ee"],

Cell["\<\
Here we convert the gold medals data into a pie chart Python code:\
\>", "Text",ExpressionUUID->"798239d8-2396-41b2-8a42-18a39b082083"],

Cell[CellGroupData[{

Cell["\<\
codeRes = fjp(json.dumps(gmd), 'pie chart')
print(codeRes)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[140]:=",ExpressionUUID->"1fffbc98-2677-42b4-bb24-43b607a4a103"],

Cell[CellGroupData[{

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905289755460558*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"93d7b85a-1381-4911-b00e-6ddf02d095cb"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905289755462886*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"a3d13d12-1c59-4653-9529-937c904e234d"],

Cell[BoxData["\<\"import matplotlib.pyplot as plt\"\>"], "Print",
 CellChangeTimes->{3.9052897554656553`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"315df58a-2c44-40c5-bda6-eee6069d86b2"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905289755466975*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"84636793-a015-4d5d-99b8-afd94c87c451"],

Cell[BoxData["\<\"data = [{\\\"United States\\\": 274, \\\"China\\\": 246, \\\
\"Great Britain\\\": 168, \\\"Russia\\\": 148, \\\"Germany\\\": 130, \
\\\"France\\\": 95, \\\"Japan\\\": 85, \\\"Australia\\\": 80, \\\"Italy\\\": \
62, \\\"South Korea\\\": 59}]\"\>"], "Print",
 CellChangeTimes->{3.9052897554682503`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"65409b0c-b087-4390-b103-0bcc609eab40"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.90528975546974*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"8f6cb9cd-6368-449c-a440-466738311b17"],

Cell[BoxData["\<\"# Extract the country names and medal counts from the \
data\"\>"], "Print",
 CellChangeTimes->{3.9052897554710093`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"45255f2e-a777-4be8-b70d-3334d3b88f87"],

Cell[BoxData["\<\"countries = list(data[0].keys())\"\>"], "Print",
 CellChangeTimes->{3.905289755472344*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"4d64469c-6d15-4596-991b-53a35445974f"],

Cell[BoxData["\<\"medal_counts = list(data[0].values())\"\>"], "Print",
 CellChangeTimes->{3.90528975547359*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"2d43a51b-53d0-4c05-a358-ad9b1663c9bc"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905289755474757*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"294822e5-5998-4a0e-ba84-272bbf3b4ac8"],

Cell[BoxData["\<\"# Plot the pie chart\"\>"], "Print",
 CellChangeTimes->{3.9052897554758883`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"5811aefb-edcd-4b4f-bb0e-f5fa7a7c17ff"],

Cell[BoxData["\<\"plt.pie(medal_counts, labels=countries, \
autopct='%1.1f%%')\"\>"], "Print",
 CellChangeTimes->{3.905289755477036*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"82288cd5-6d8c-498b-a832-7b8dd2f24776"],

Cell[BoxData["\<\"plt.title(\\\"Medal Counts by Country\\\")\"\>"], "Print",
 CellChangeTimes->{3.9052897554780416`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"443c46cc-0fc9-46a7-a8cc-1b4763f75218"],

Cell[BoxData["\<\"plt.show()\"\>"], "Print",
 CellChangeTimes->{3.9052897554790363`*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"41656590-f9bc-4955-991d-341bf4a04225"]
}, Open  ]]
}, Open  ]],

Cell["Here the generated code above is evaluated:", "Text",ExpressionUUID->"4f08eb46-1ae2-40fc-b77c-4c2c6f5d0033"],

Cell["exec(codeRes)", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[141]:=",ExpressionUUID->"17f6f4b6-e731-45d4-a902-bf10ea040b0b"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsfQm4XGWV7U5uBhIgM5mAcAlTAJkSEiBMl3lSJgHnWZznCae2FRXnFlQE
FEWctRW1W59Tt+2s3eLUTq1t+2ztp+3wWkUS0If3vLuq/pWzat9T91bCTSrJ
Xev7Nqdu1anzV/3nFFn/Pmuvve/Dn3zxo6ZGxNN3GfnPxQ+74pSnPe1hz7n3
vJE/Ln3S0x/76Cdd/shznvSMyx99+dOOffjAyJNXj+z7+5GYFoZhGIZhGIZh
GIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhGIZhbIdAWTAqiKeU
v6eWLf6e1rCf/h2ybz7OQNrytSnRCY/v8T2+x/f4Ht/je/wdcXzDmAjkaxeY
ml7jNczrMV/Xeo3m632KvIf76j4e3+N7fI/v8T2+x/f4Hn/0+IYx1vUzteFv
RF5njve+AXk8TR57fI/v8T2+x/f4Ht/je/yJGd/YeaHXUj7vvEb0/g6vkwF5
XY8zVZ6bMsbzHt/je3yP7/E9vsf3+B6/P+MbOwb0POt1wtf0mtD9IzqvJR6j
2xjcb2p0juPxPb7H9/ge3+N7fI/v8bev8Y3tDzyHfBzp76bzq9dRXrtxX137
5f2iy3vy+ANpHz3mNNlyX12D8vUB2S9f//k9+TN6fI/v8T2+x/f4Ht/j92P8
fvIvvtbtdaM/0HOWr4UpEjznA2n/pnMe0Xnt5LH0+tFrNv8Wpkrwmp+W9s/X
vK49uX/I63yPx/f4Ht/je3yP7/E9/s44Pp8L2V9fy/xtIvmfsXXB88Fzo+eU
2ylpv5DHvHYyT58qr+n1qtcir0Ndv+Y1Yb5u83UyEJ3Xsq5pNTy+x/f4Ht/j
e3yP7/E9/mheNyDHmSj+NzWMrQHO/dT0XMjz+ZzpNZXPta7VpkXnOdXt9HQM
HYPH4/P5mh2Q1/O1zmt8ahljmrxPtzPkWNPSGPr5p5Xj6HfVte/0GP1b8fge
3+N7fI/v8T2+x9/S8beU/0wU/9Lj6funpvdOldf1/fqaMXHgedG/uR1If+s+
U+TvbtcMr2/dh9fLtOi8Xni+9XrU34Ne+7wWOd709LweW1/T38v06Py98Fjd
fo8e3+N7fI/v8T2+x/f4O+L4EZvHv6alv6c0PA7Zh59vqoylrxE8LvfV14ze
wXMG8FxOTc9HdM419+V+ev5D9snv0WtUX9P1Ia8rHlOvT117TovOa1WvbT2e
Hn+6HLfp2vX4Ht/je3yP7/E9vsefbOMPyDGV3+VjRfp8A/J8xGgemDl/5veZ
fxrjI6+PdP0zpWGrj/O5BXhd5XOq52Rq1NeBXg+6xszHaDqWXrt8fkY61vT0
eKo8HojO38MM2WdqdP4u8njdfmMe3+N7fI/v8T2+x/f4/R4/v0f5+ebwr8z3
lJeNxf/yeyI97oV/GqMxtcvfej7yekj/1v30PPJaivSY14ped3pN8O98rXLN
OSP9rdet/s3fy1R5PCW9pr8TPYYe2+N7fI/v8T2+x/f4Hn9nHz/zL4beDxhI
+2wO/4uouR73j/Qat0380+iEzjfPHZ+PqOd9SnTOqc5/Psf5/gof8/xPlePr
9TYzOq9NPD9DjpGvaf49I+rreqZs9TrlfjOj8zcxQ8beJY2rx9PrPV//Ht/j
e3yP7/E9vsf3+Nvr+HysfG16w2fL/Et5nHL6abLl+6ZFJ/+bKmNljhmxZfxz
smOqRF7j6Nzr/roPz5/OMfeZmh7nc8NzzWtrWow+/7z2OI5et7zmZ0TnNTZd
jqvXFdcGM2RfXqsz5W/9jc2Kzutf9xtI750mj/U3pZ9FfxszU3h8j+/xPb7H
9/ge3+P3Oj7H2VL+M0Pep9yqiX8pT5uSxtA8vOZ0u+nYB1JsCf+cml6fbJiS
Hme+HdF9znSfzNvzGm16dJ7T6bKP7q/Xeb4mp8uxMufPv5sZ0Xmt7xKdv6mZ
8reuR2em7bR0nGkx+pr3+B7f43t8j+/xPb7H39HGV+41I22bcqbTJJTPKZfr
xv80j9ukf9fnu/HPzPO5z2RCnhu93wEMNLzexM2bztnUtB9jevpbz7teY1xX
6rWj19vMsi+3+brP+2noend6Os5seX5Ww+t6zFmybfo8Ht/je3yP7/E9vsf3
+NvL+Mr9lffPLMfi87tEZx612zpDn+c262oy3896eHJFcvwo+0Z08s6ITg7a
je/vzMiadX7/iE5Oz79Vr9SktRlI+/CeiubY85pN7yPNbNh/Zozm9Hq96ONd
5Bh67c+QLX8HGnhtdoldZB99n/6mZkXz73CWvI9bvofbGR7f43t8j+/xPb7H
9/jbcHzyn5kp+BnI/1UrMx7/0jws/1b+PSM66xWVayqv15x+yFZzx5nHN+Xd
M38diJ0X+bt208Qoz88amZDnp8lW76HwcdZM5XUaz6FeW8rT+TfXhHqN6bXO
3wOvx1myf9PjvN9siVkp9Heh79PfKLa7Rv17nJ2OreN6fI/v8T2+x/f4Ht/j
b43x+b7Mf3Q7o2EfXRtk/qWP9Tly9abXlf9prWTOC+fXmzTaTVxd+Wjmpzsb
tHYgc/T8PHl4RKfOKXsH6ZyrLkZrJXQ9p4+Vp+s6T69PPKfXP69VvU5npcc8
Hq/pXdPf+feC53ZLz+8mY+wW9W9jVvl7txj9m8ufa1fZV/+e5fE9vsf3+B7f
43t8jz+B4/fKf3R9wGPofQKOzdwoudcMeZ9yuKyZV77HPHzW2+dcfPYOb+Kf
Ie9rqnfdGTXxTfW7Oj9j1QnkOuJp6TnVquf8Ouddz59eA3xMnq7rP+6bObr+
PrjdPerrkNf5bNlHr1lez3Oi/g3sGvXvIq+hd03P75bG4bHyvvn3Nkve7/E9
vsf3+B7f43t8jz/R48+WsZv4D17bXcYlF9P3KJdX/s59lbvhfd108cr/lBeS
4ykXzzy9iX9qnjnkfbp/5vE7OlSbDiif11oC5ejKzwmukfS1aWnbpHtRbdY0
eUyt+mx5jPfptT9bjrdbdN6Pmi2h1/fuJfRa1793l/3nlJglz8+R/XeX8eZE
529wt/SY48yRY/C1OR7f43t8j+/xPb7H9/jbYPzMf3SdMFvGxN8z0+v8fORf
M8pzWYNDLsd9dpEgR9faxKyLJ9cHmrTXyj9VCw/kXDNfU02IvrYjQrn6lBh9
T6Gbj7vqaLL/Izl5rkNQ3q88XtdmWSfD86ycnes8vdb0WtTrmo93S8fg83yN
f8+Jzmufr8+N0b85Pr972eox8t/5M+Tfkcf3+B7f43t8j+/xPf62HH9XOebu
UfOozPv5WLU4u0XNs1Rvg/2a8vOaX88cnlw9+9Koz6D6yZDLqzeictCIzpy7
Qo+xIyPXmzZ5z+S63WnROY8633lOuW+ud+B5zPdieL71vhGf5zXBa1dz67tH
fe3pltf73Oj8DejvYnd5jdf+vBJz0r7YzpfX8v67y3auHH++vE8/B48zT/af
J/vnfXf3+B7f43t8j+/xPb7HbxifPEXXB/Maxm7iP8r/58p+5FizZT+uBXQ9
oTxN862aO1XenvPzmtfVnLzySuo01Ic8e05GdPJzzT83aeB3NB6v3115O5F9
Z7KORrVJXPtkHxnNrWdfyLw2a3qsGhheH9Ro5XWr3lfi9chrXK9Dvdb5O5nb
sP+8tC9/T/ytLUivzYn6d8XnFqQx5qRjzW84zlyP7/E9vsf3+B7f43v8rTD+
vDHGnCOhOXruQx6vnErzpd1y+aqbII/P+mdqL7KfvNa+Mi/MPL3yz6beQlnj
rXn3sfjv9oym/lVNyJw9e8jkyB6QWnecaxrI06lrz/l3zbPPkse6dsz3mPRa
y2taXv+6vuX1qr+FefK+BSX0/Quj83cxX461QEL3XVAeL4z6d7VQjr0wHYvH
43v02IvG2N/je3yP7/E9vsf3+JNv/KbPM1/GXCD78TXyn7kpdD2g9xLmR83d
VcegGhv9O+twlLdjq3WN6ldDjQ29T5p08uolOSVG59j19aa61/H47/aIps+t
NbvZQz/79WhfJq0vaNK562uzolMno7xdNVWZj2edl9Z76H0pXavmtS5/I/o7
0N/NoqivaTzeQ7b8De0Rnb8b/v72kNcWyfPzo/M3u0d0/v7mlccL5LWFcjyP
7/E9vsf3+B7f43v8iRx/PP7DY+h45P45R8rX9bnM56m50TpFamrI/9TTkryQ
nFH7RCk3VY6pz6kmRj0mu/H2Jv67PUNz5vw7+71Hepz7MKnmXeuGm3RNu8hz
eg+F50p1VOTnyuXx3LyodVyZr+t6U6/JvO7ldbkoOn8fe8hzi9J7eT0vKdvF
5fEeEovLfvraEnltcRpnsQT/3iMFx97D43t8j+/xPb7H9/gefwvGx1a5eR5n
D3lN+ZLm7BfFaI6lef+5DY9Vi6M5eM3Rz4rOvLx61mg/oF2iU3+dtdoD6bH6
qWT/xPH47/bqR9OtVjXSY/3ezLtrzWr21qceXvviZu6u66rZ0Vl7qjWo9Cxq
0qHn+zp6vfC60vtOvP7xGq/j/HtZLNv8G0Eslb+5L5/j84tk30XyXj6H9yyT
9y3tcvyl6VhLy/uWyHs8vsf3+B7f43t8j+/xu42fX9f3N71ODqQ5fV0bkOtr
vp4cf448Zp2tauqZd2VuXjU31EeTA2r/J/WeV39xcnrt68THwECKiNGeK2Px
3+1RC6/riib/e/7NdUt+vqkflurcZ8rz1DXl/kpai8z7JtTCkL/ruo3aK71P
o/oxzacvlueXRuc6U69XXst8Pv9G9ozO3w7ftyw9v7zE0rLdU46xV3m8TPZd
JuMsl9eXy5jLynv1fUvkPcvSax7f43t8j+/xPb7H9/jKYbhO4HH5mFwmv75Y
xsncnjlN8qlF8lj1DMyn4nH2CVFtjebjqaFnPpc5XHJ61c9kjxrtH4QgZ8Xj
rAXPXjQRzfyXOpPticPnvHo370tdr3Cf3H9Ja4Cb5lC9+/m36p103cVzpRp3
rZfQGgzl6rxGNKeuOXRem+TovD71t8TrX6/jPaPzt8TfhW75+8Lfe5e/l8t7
95LtsvR4r/IePrdX1L+/5fKcjr3XGMf1+B7f43t8j+/xPb7H1/32jE5uv1Re
Vz6j/Ec5UVNuk2sJ1epQG7RIgrlVrZXVHKzWyGbdND0olcPzb9Vz5J6f09OW
PFy94LMnTea/mRNvLxw+++dkb8jcM1W3Oe+ePWbUi7/JG5L6Ju3PSw6v+iiu
0VTLrloYvUayVkzXkEuj83rkta7P8drl70V/C7rNz+fg+1eMxD4N+60o232i
/k3pe1fIPk3bveRvj+/xPb7H9/ge3+N7/F7H5+t5jaDcJq8PyJHyvQPlVlmD
Q+0O86nK5ZmP15y8cj5qLLTeUXU12Z9QveHV33BaQzDnPBbnndJlG7F98Hcg
e9erhka/X67hbeqrmvsv4TXWCmvtsPZJzZ6P6i/Kemg8JldfMxL3G4nXjcSn
R+JHI/FfI7FhJG4fiT+OxG3l79+X7R/l9dvL638ssTG9l/vj7zvkeBvltT+U
v/8o++bjbEz7eXyP7/E9vsf3+B7f4+/M42f+dZscH1zth9Hmbq8diQePxNro
9LBUT0rydvJ55t3J47Wvp/pNkn+Sv2uvIa1TnS7PkburxoTIefl+e9Fkj8wm
z8v8evZ511y75t7Vbz/3UVU/SK1Z0D5KmnvnvRWc4xeNxLcWLVr0vfXr1996
0UUX//AhD3n4by6//FG3Pe5xT6jqeHxr+/jHtx+3tzkeP+o57l8/fsKox6Pf
9/iGeFwZ9/EyfvM+Grpf5+OmMfo9/ljh8T2+x/f4Ht/je/zm8RFP2A7Gv7v8
pzu3auJf4GrgbBdddNGPjjvuuK8vXrz4e+B0I3HlSBwdtb4m5+FzqMeJ5uGZ
G9aaVubalasqn1duTv4eiRfz7+xP0y/oZ8v+l6rXJ0/X+wp6/4G8nfvlWgLV
ymRvSPUDVe0T9THcPmAk3rhkyZLvXHbZ/X5+wQUXVqeddka1fv0J1bp1x1ar
Vx/diiOPXN2HOKpP0e/xHQ6Hw+FwbH70+9/vbc+VjjpqTYungbMdf/wJLQ53
8cWXVA94wIP+a4TbfXeE4103EveJTp08NdPM6eY6V/JK9adRzbZG7tWatfCq
kdF6Vebhc467X/xd1xD8/Pl5zburtl/rdsndda6Yf8dj3uvI9zxUz0RvGe25
pP2U7jsSN6xdu/Zr559/YXXqqadXRx+9ri/Xn/m7w+FwOByOuxf9/ve737yp
HeByp5xyWnXJJZeO8Ppjbh3hetcXzrcwcUHN76oWPvvGM2esWm3yUubilcer
Dr7JSzKEH2cf+H740WSv+ibtzLSG13POPT/O/bC4JlKvSNXNaF8unht6yrC+
4diReOOaNWtvPfvsc0fWbCf2/Xozf3c4HA6Hw7Hl0e9/v/vNmzrjhBNOqsDx
Coe/oXA/cnjt88qerqyR1F5P1Hcwd0yezm1+rPxVc+6Z/ypvHojRfHlbopu+
XV9TLVCT5wz1Q9TLqNcM71NQJ6P+ndo7l9796gPKeybk7y9ZvHjxd5F3P+GE
7ZG7bw+/v37/f8jhcDgcDkfv0e9/v/vNm0YH8rMXXnhxVbQ0qHVcLFyQHF5r
W5n7nS28Uj3Js1+K8lXmn8nhVSeT+W/mxcrjt3Uda5PWXT+L1uZqnWrWzPA5
+vWohoZzyF5M5O2c5yatO/t70WvouJH49vnnX/Bfp556Wt+vLfN3h8PhcDgc
dz/6/e93v3lTc0Affdll94FHzTdH4vioPeWZ21WNNbmk6mio8dBaVta2Kk8l
f9VaVj7XlI/vViu6LXPwquPRmtvsgam1q3rfgN+f6xfOQ1M/VebdVafEWmJq
ZXhPRHUz9G1/MGqTkXvfvvTu5u8Oh8PhcDi2NPr973e/eVNzgOudf/4FzME/
pPDBhdHpHb9AOKTqsOlNw5yx1rNqDl77tGqemtydevjM07XPqfLppp6nE42m
HlJNnyvrfDTfnmtW6Q/Jel/ts4q5mhN1vSrnmfydayhy9iWyRbx+9erVt552
2ul9v6bM3x0Ox1hx9NFr+/4ZHA7HjhL9/ve737ype8CXZt26dd8Y4YBXR90j
CpyQPF79aZgDzrydWg/1QFRf8xnRWcvKvzX3HlHn6HMNa9bYbG2ohmcg/U3k
vlNal5t70e4SnV7v1ByxjkBrgunrTo8Zzj8ea18u7eP1mTPPPOtHvdSsrj1q
TfWKoZOrb59/TnX7Jee3Ao/xHF7b3Otn7ZrV1Sseu6761nXrqz/ecnwr8BjP
4bXN5u9Hr64Oe+L66tCbT6kO/uTprcBjPIfXdszfv8MxeeKoo1Y3Bl673/3u
X910003VQx/6sL5/zm6fu+m1U045tYI2sdvrDodja0W///3uP0/vFuB897zn
vdCX83PR5u3k70uEK4I3Zm9J9n7SfqDqRTMjOjXxqp3JOnH+rbw461cyf9Z+
TxON7DXDz5XXErr+0DpcPub35Vb1RVqzSh5PjTtD64mha9LcO84T+wn/6KKL
Lv4VvELHOtdnHr22+sEF51bDl13YGHjtzFZurLdr58yT1lTff/P66i8fPaEx
8Br26fX3d8TJa6pD3jXC2z97RmPgNeyz4/3+HY7JE297283VzTe/fVScffY5
1WMf+7jW46c97el9/5yMdeuOqZ71rCs2fc4zzjhz02sXX3zv6rrrrt/02pve
9Obq/vd/QN8/s8MxeaLf/373n6d3C3A+cD9wwJFYHnVOl1yRHH6+bMkvqaEh
d1ddvGpFmINm7p18XXXxqntvqmFVDr21fSSnNGz1s2nuncHvwrz7DAnVvpPD
q5eP+u3T41193bmG4jlZLgH+/n8uvfQ+t69Z0517I7c+Fndn/Nv551brVo+f
h0dufSzuzvjBjeurdUf38Psb2Wcs7r6Jw7/7lC3Iw/f79+9wTJ4g1331q19T
vfzlr9gU0PetHvl/y7nnnrfdaGiGhk6pXv/6N3SsM84886zWayeeeFJrLYK4
4opnV89+9nM2rU1OOunkvn92h2NyRL///e4/T+8W4HyXXXbf20c44K8KF9xL
uCF4/OIS4JGqpZkvvJN6D3LTzN+1n1Ou6yQnz31L9TXl8duin1Pm6ln/Ts7e
1J+JeXddp2jOnX4zqjtivSrnUvXuzLtTM0ONE87P3iOxYiT+eL/7PaDVs6vb
eX750MnjcncG9h3vunn5Y44Zl7szsO94v7/DnnjcuNydgX13rN+/wzF5gjz4
5JOHRr32kIc8tLr66muqRz3q0a2/jz32uBYvvvbaN1avfe3V1SMfeXnr9Ze9
7OWt17HF3+TLl112n9bfT3nKU1t/P+xhD2/9jXw+9kV+HP65GPv5z/+rVu78
DW+4tsW/jz322FGfB/n1t7zlrdXDH/6I6s1vvrGDv1944UXVi1/8kk2fFfGK
V7yytQ/e1+95djgmR/T73+/+8/RugR6tuB84wgE3jMQ+hReCw+8ZNXdfIo8X
RZ0fJt9kzaX2aKU3Ih9Pl23WiKsGJYQXE1o3uq08aLQ+VXP+eW2hnJ3fgY/p
NaM5ePV41zkjf2eNAdZJzLnzHHBdhfMD3g7+vm8U/j7WeYbGvVf+jn3Hu26g
ce+Vv2Pf8X5/Lb17j/wd++5Yv3+HY/KE6mWOO259K8idqZ8h/77yyhdv0qWA
fzO//cY3Xtd6ndqVti/uUdWDHvTg1t/g5vj7cY97/Kbxrr/+hupVr3p1a1/m
1F/4whe2ODgeg3vnzwqejxw8HuMzKH9noH/5fe5z3+oJT3hiddNNb6uuueZ1
1THHjF4LOByOrRH9/ve7/zx9rCj8fWO0+fuKEtRmkMfvEbXv+EIJ5e/qXc5g
7pl+56orGZCt6uHVYz17vqvny9ZCU69V9aRR3X7TY/W+5/dXn0jVvLNOlX2Z
yN3J37FF3p3cHbl3niOcrxZ/b2syu5/jP116Qc/8/c6Rfce7Zu78SG/cHXHH
h48f9/d38D+c1jN/P+QfT9/Bfv8Ox+SJJu07OC9eU/4O3Tn5Ojkz8ulbwt/B
26nJufe9L2k9d+ONb6nOOefcll6Hn4NcvSm68Xfk4fn+t771puqBD3yQ61gd
jm0W/f73u/8cvQf+fttIDAo3XBF1jSS1NEuEUy4QvsnH2RuefVnVV5J5adW+
Zz9GrV/NfZI0Hz7R0OM2jZM9Z1S7n73tyeFZx8ut+s1Qf0QOz1pV1how747A
/CPvvneJwWhz9/1H4vbx8u+bw9/hSTOR/B2eNBPJ3+FJs2P9/h2OyRPkuqgJ
ffKTn9KKyy9/VOs15e+nn37GJk7M9yJnvyX8nfl8xKMf/ZjGNQTi0ksv6/q5
u/F3rAswPnLw+FzYBzqefs+zwzE5ot//fvefo48V4H7ggCNxQOGFg1Frq5n3
XSyhOXjq4KmnYf6d+WX6zyiPnZ5C9TS5D1KuVc08f6J4fJPOfmCcLR+rrr+p
bpWemrw/wbnhmof1BFwXkbtT6877IDwn4O2DI7Ey2vx9g/Uz2/Pv3+GYPDGW
/l35+5o1R7e4O3k1ctp4Xvk7dPH4+6KLLm79Tb6e+TvWCBwD3BrPXXXVyzbp
d+D/iPXCWHWzmb/D4/JFL7qyesADHrhpH/rUQE/f73l2OCZH9Pvf7/5z9B74
O/TvBxQ+SH5I/r5XdNZNqpZG8+/ZT5L5eETW0ag/eubxyo8jOnm8+tQ0+Ure
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
/H151BruxVH3JFK9iOrAlcczb635bOa+GczBq26mKQ9/d6DrhIjOtULu2cT8
O3m88nZ8J/re63fGc/SLpOc7PWfYq4ncHfML3g69EuYc3J1+M0eWWFviuJHY
uGbNGpxDh8PhcDgcDsckiML9oJ8Bfz+mhGrhWccKDo88vPZlpR888/ALo67J
JHen7zl1JNSV5FpPcnV6wqtuJaJTF5/9HicCelz1gyd/57pCfXPYd5XfRdcm
1M7w+7NnEzVG4O+qfcdcYk4xv/ScAY/HPRCuo3BewNuxzgJ3P2EkbqsMwzAM
wzCMSYVo59/XF04I/o78O/n7YVF7SYJP7l94JiP70IC7s451jgT5LL1oGOoV
ST15k+eLesGQb09ULavm35XHa76dz+u9AfJ2cnft18T1itasNnnOUPeOuUQO
Hvw9e87gXgg9I6l7x7k6cSQ29vv6MQzDMAzDMLYdhoeHwd83FC4IDn9s4Yhr
hDeCQ64qnJI5eHL3PUtQR6P8nX1Z5xVOO0u2ynmZy6aOhvxY61a1/+lE6t4H
0jb3deXj/Nn4eal3J4/XvrOzo/biIX+nzmhJCcwhOPxgtOeUfVYPitrvHWso
nA/o3pF7B39H7h3nbMNdd93V78vIMAzDMAzD2IYY4YB3Fi6InO76qDU0zPmS
v5NT7l/4Jr3K6aFCbkqNiNav0ktSNfCau6amfKY8jujMfWtOfCL8Z/S9uYcT
1wvK2bW+Vtcb2XuG2nd+d2pnqC/iPHHdg+1gdHpGst8qa1bJ33FusMbC+Tpp
JG7v9/VjGIZhGIZhbFtE23/m5JE4PmoNDXPwh5dQDc1+UXvRMH+sdazkqdmH
Jmvg1buFunKtW23KwWtuvIl/9wpdAyhfJz/XMdRTUvPw+My5dpX8nT2bVPvO
+xKqfWft6mDUuneskQ6O2jOSNcWsWcV5An8fGok7+339GIZhGIZhGNsOf/nL
X6ifARc8JWoNzdElVENzcNQ9QelFk/3g2dMJXJXaGXrQUFvCGk/mq6mfUR/4
3O9Ute/K5TP/3hxoraquC+g/k73fZ5R9VO+j3u+8t8DvunvUvZvoO7NE5oi9
bAej5u8I9s0Cdz+iBM4F11bk7jhf1r8bhmEYhmFMMkSbv59SQnPwyt/hf0I/
ePWCZ79Q7eMEjsp883zhsXOE3yqHVy6cdSpapzogz4/Fv8dDtxw+X9Mx83pC
+8XSA1N7ymbfd82/s3eT9mziGojeM9S+U/dO7Qz93nFuoJvB/ZIzwvzdMAzD
MAxj0iHa+plTCycEN1xfApyRXjTg7+wlxDpWcE5w+Jx7Z28i1rCyhpP6d2po
uNX+TerPqByauXatZW3i370g6+fVN1Lz7U2eM8y/qwaeXjr0nsH3pHck54A1
AfScYdDHh74znGN6vmPtRN37cSV4nk4fidtRg2wYhmEYhmFMHkTb/x1cEPl3
aDPgbcJ+TuDw7BuE3Dty8KxhJX+nhkZ18OzDOle2u0ftrZj7HlGTQo05ded8
rJoWcusm/t0Ln2+qfW3yfdexlK9Tr0//SN5LUN8Z1uxSPwT+Tu/IpVH7RmLe
cP+CuiTWCYO/494H1k+oJQZ/x70RnBucJ6y3Wvl3aKAMwzAMwzCMyYNo+8+c
XgK5XXrBUwdPDbb60JBvsm8o+7EuK1yVAe5OHcncqHXh9JGkBn56eax8PWto
1IemG//uRUOTa2GnpJgmr02Xv/l56Bu5i2xVP0Puzu+tdavk7tS+Yw00GJ3a
mXtE7ftOz0iso3BewOGHRuK0kTh7JDb0+/oxDMMwDMMwti2irZ9BLveUwg2h
zUCeFzlf+haylxPrWA8snJMaePJ36kOYb6YGXnn7rrJl/Sd5MrkxNSpTovaQ
HJDoxr+3BMzt6xj6Nz+DavRVO0MPeK3P5XqF2nd682jfpuVl7vYv8wj+jrlV
/o7cO84B+60OlcBa68yRuKPf149hGIZhGIax7VD6N6H/6tmFD55aeCLyvNTQ
UMNBH8kDhXMORpvHL5dAjpk5Z/ZhpY6EvVipOSH/ZR0oeXvWnGsufiz+3Uv+
XY+VfWu0nxPHJ38nt58Ro/Uz2KpvJHPwC8t3Z18r8HesdfYuMRjt+WP+nTXC
4O5cOyGYe4e+Cbl3rLfOGokN1s8YhmEYhmFMLkRbP3Nm1Px9KGofGnB48nd6
0LCWdb/COwejzr+rD3z2kWT9qnpIkv8yt838O/mz5t4jcekm/j0ef8+9VbUu
VnP7mt/Punzydmr4GdTP7Br1WoX1u5yPpTJP9J3B/GnPJswve2cx9w7+flLU
davg7ueMxB2uXzUMwzAMw5g8KPl31K+eXXjhacIT6SNJDYf6SIJvIge/Muo+
rHtHnX8nd6eP5Nzo9IGnhobcN3Nk1cFTe05erVw+82/1lukG5e/aq4mv5XpY
9Y/UvqvMwWffd2pnELj/AP5O73fEniX2LvPHdRDz79TOYN2k3jM4J1hfUTsD
/n678++GYRiGYRiTC9HOv4MLksPTS5K9nFaXOLJwSwQ1NNTRgI8yrwyOSv5O
/8Q5EuxTimD+nTlt8mLVw5NPay1rN/69ORp47QfVVBurvVj5efiZZkpQy4/v
Q5976mjYt4m6d/ZexXwh9079O2tXyd8x1+DuqFuFhgmaJvD3oWifI5yv80Zi
g/PvhmEYhmEYkwvRzr/fMzo1NNDP0IdmXeGS5O+sX0XsG6NrWJWrqn6G3D1r
aKg9mRa1NyO5ufJm5e3d+Pd4/F1z6vk4qsnJPaPUn57rDK4/tB6X3u+ae2cd
AHuv0ndmRdlyHXRICdQJI/fOvk04B9C9Y02F+yM4R9DPnB/WvxuGYRiGYUw6
RDv/Dv7OGlb1oaGH5JGFUx4WtQ8Ncsbg7qqhYR8ncFXWbNKDhfl39YHfJer6
T3Jj9aHR/HruidrEvyPG5vDK8VWXQ6j+PaKTu1MLrz7wWQdP/czuUWuHNP/O
3Lt6zzDoHUntOwLaGayjmH+ndgbnCufM/pGGYRiGYRiTDNH2n4EW46zCDU8v
XPHEwh3BIcnhwS2pnzkgah/JvaP2NF9WuCq1I/RgobaEuXfm37V3Ex9Ts6L5
99x7tYl/j6d/z/p2fW6sWlb9HPyM9Hwnb1cPSfrtaP9VzMnyMk/Mve8j84j6
1YPLHFP7jvw71lDUzuDeCM7TudHOv2/s9/VjGIZhGIZhbFtE2//9gmhrqs8q
HBE5eOR81xceuaZwSvZxUg/4lYWHgsMvi5q/7xG1hoQ9WMlv6dOSezjlOlbt
pdTkD9PEv8fLv0d09llV3TvHUf191s+oFzw+N7Uz/G7av4ke+Mi/s7/VMpkv
zB1z7+Dv7Luq2hl6z+CcwDeStavg7/afMQzDMAzDmEQQ/xnwd+bgTy9c8fgS
xxQuyT5OrLFk3SV94JF7pzZkWeGs5PDk76ztnC1BDk8NjepVlMczLz8W/+7F
Az77z+TjaGjun5+FfWKpf9caVupnqHvn/Qfq35fIPFH7Dv8Z8Hf2bgJ/Z/0q
cu84B1hL4ZxgbXVuiQvD+hnDMAzDMIxJh2jrZ5DLBX9XD5qhaGto6CGp+nfw
Ta1hHYxaQ0PuvqgEezgx/84eTtS/U/eu2nLtkaQ9lXTbxL/Hq2HN+01Jr+Va
VuXuur7geoPcnZHz7/ju4O+sXaV+ht7vzL+zfpXzq31XEahdpfYdayxo37Hm
sv+MYRiGYRjGJEPU+XfkdJW/sw8r+Pu6wiePLPwSuWJweObfkVNeUbgp88zg
7si/Uz/DHHyT/4zyd+pVmP/WPLh6vDfx7178Z8j7VUujx1T9jvpIqh6f+nfV
AWntKj13FpQ5oCf+8jJXgxLUzrB3U9a+4xzQ+519V7HWQv79TvvPGIZhGIZh
TB6A+0Xbfwb593sVXqge8OzDCg4P7g5tx2GFZ4J3QvtBD3jyd/WRZP6d/YyY
e6fehKH1oKo3V8911bd049/8uxsyv8+1rOoxz3FmRs3fucZQvxxqgGZH7bGz
QIL3IZZFnX+nfgb59wOj1s8cXuYY+Xfyd5wH8nf2XWX+/Xbn3w3DMAzDMCYX
op1/p34GOXhoNJDnHYo2f6eHJPPv5O70oAGHH4y2JoQ1rMg37xG1dyL9WBDI
T1MDT/5LbkxvdWrMmQNXLYty8CYvmfGgfD97R/IYWi/LHLzm3anZ52N+p12j
XqfMLXNAH3zWrtJ7BnNG/Tu2mFf2bgJ/xz0PrJ1wDsDhyd9xnsDdLwrr3w3D
MAzDMCYdou0/c3G08+9nRe1BA+37SYU/gruDwx8RtQcNOTxy73sXPpp7sDL/
Tv935fDUv2svVnJk9VufXng1vWiUxzfx7178Z/Q9WUfPXHv2oqGOhjl5etdz
y56rWsNK/xmsZ5h/Xx61/v2AEtDOqHfk2ujs3TQU7XOCeyM4PzhXOGd39Pv6
MQzDMAzDMLYdiv/MhmhrqZv0M9DAHxudfZzuEbX+nRoaesCrBw3z7wjyd+re
swaeuXdqVabJVv3Xc3498+9e/GcG0j6qy8nH5L65xpbrCn5+emJS+87eTQzq
Z8Dj1fud+hnMJ9ZE1L8joFli/p3ad9Qn4B4JzhVy8ObvhmEYhmEYkwjC35HL
PT/qGtYzos7Bg7urf+SRUeffqZ/Zt/BR6rsXR51/J5dl/Sr7r1IzTh2K8mM+
1lz7tMKvM4/P/Hs8/q71q9n7XX0jqd9RHQ99aPiZWbua/d/nRZ1/Z+8m8net
X6V3JDg8e6+yflW935v0Mzhnd/b7GjIMwzAMwzC2HUr9KvQzF0Xdw4k9WMEZ
2YOV+fcjCsdEDeuqwjuh3WZOmbWr5KrMv4PLzpHQPk7UzlDznvs3qf6cPLsb
/x7PPzLn3hXZ/13H1t5S1MBzjaH1uOTvrGGlfmhx1Nx97zJfg9HOv7P/6qFR
83folTDnmHucA+bfcW6Uv//R9auGYRiGYRiTC9GuXwV/hyaD9aunljip8Eho
OVjDCg4PvTbz7+y/qvxdPSTZv2h+4bYM+s7Mjk5NSvZrVC0LX+vGv8fj77pv
yHGVu6vHpOpnyN35mDl46oCwpW+k6mcwB0uj1sDTe2awzN+qqHuv8v4G6lcx
5+Dv0M+cVgLrq/NK3HskNto/0jAMwzAMY3JhhAP+Kdr8nR6S4PBnFL7I/Du0
HMy/0yeFvuXagxW5ZXpHZv2M1q7SL53aE2pmso5Gubzy9m78ezzunnP3OX/f
1Pd1enRq8Pk56UFD3xnNvWv9KtYu4O3svcq1DuZs/6jrCDCv4O7Iv8N7Bvyd
3jPs38TeTahXaPF3598NwzAMwzAmF6Lt/w4tBjQZ7MHK/qvMv4O/ry5B/Tv1
M+DvgyXAS+lvDr7KGlbmpclv6T+jGnjtb6r59inRmYfnc038W33huyFr57nN
x9H6WV1PsM6WvjNcg1DXj++HNQt7N7F/k/pHUj9D/0jm37V/E3s3oYYYa6nc
e9X6d8MwDMMwjEmGUr9K/0jkdM8uQQ3NUIzOv4O/Uz9D/0jm31m/ynzz4uis
XyV/p/Z916h1KLtEZ58kbrNupikPr/x7PP/IpnpX9a/Jmp2syVePeupmuKXO
n71X+d1VO0OvTeiOWL+K9RD9IzHPWCdR/47c+ylR69/vVQL5d/dfNQzDMAzD
mEQo/B36GebfEeo/Q/9I8nfkhqmhAYenf/l+UftHIrdM/Tvz7/MLp6U3eu6/
ypz2rKh179St0HuGWnSNzL8j6jrXJijHH0h/63PT5G9+Dtatag+nGVHfQ9C1
CT0kF0Vn/p3+mvuUOWPtKv0jqX2H3w80NKqfAXeHton6mUtG4vZ+X0OGYRiG
YRjGtkV05t/vFbX/zCmFN4JDkr+jfvWwwjWpoVH/yBXR6f+u+hlyeNavgueq
5p3baRLZh0bz5E38ezwNfFONq/J/7b3KMWfIc+r/Tt7O3DvXJtTPzIuav9M/
kvl31q9SO8P5xNpoddT+kZj7oRKsXwV/R60C+Lv1M4ZhGIZhGJMIJf9+R+GC
yL3fK2oPSeXv9I9cHXX+XfXv4KErCjelfmZp1Bx+rnBbes+ofyQ9JLV2NXuv
a/69G//u1T9S61/zVnX0Tbyd2hneL6DufXbUOn9+X65fFpc5oXck+Tv9N8nf
c/6d/pFYT+Gc0H8G9cat/qt33XVXvy8jwzAMwzAMYxtihAP+Oer+TezhRP/3
ocIhj4m6hxN7sIK/Q/eB3Dv5O/Pvy4S7Qgeu/Zvo06K5a9WUMwc/Jercd86J
d+PfvXjQ5Pfyffp+1b5rqHck1xuqBVLtzIKovd+Zf8d9CXL4/aLW0BxSAmsj
aJQw11gzgbvjPCD3Dk0T+DvOD/n7hn5fP4ZhGIZhGMa2RbTz76iFpP8M8+/0
j6QGfm3U+nfmi5E/Xlli76j9I1m/Sg948FjmpdWrRX0YtWZVfWhUO6N1qk38
u1fvd+X5Ws+ax1IPGvZe5efL/Ve5NqFPZhN/Xxp1/SrXPahfBXc/LOreTap/
hwfQULT5O/XvOFc4Z3/q9/VjGJMZ1157Lf4f2oqPf/zjo17HPc7BwcHW68cc
c8yEjr333ntXl1xyyRa9F5/nGc94Rk/7/u53v6ue85znVIcddlg1d+7caubM
ma2xL7vssurLX/7yFo0/0fjmN7/Z+j4/+tGPJuyYOF8HHnjghB1vLNxxxx3V
y1/+8uroo4+u5s+fX82YMaNatmxZdd5551Wf+MQntslnGA//+Z//2Zrjr371
q/3+KIYx6SH9V+9dgvwd+fcm/n5ECXBN5N6p/1gZtX/kXlHn3xH0fp8Xtf5d
89X0npkdnTnubtr3rKFR/j1Wf9VIr2uuXdcFzP1Tg09ePzM6/d+pn6EOXmtX
2cNpftT6d829713mbP8yjweXOUWwzuC4Mvfsv4q6YvhHQuO0ST/T72vIMCYz
yN/Bay+++OJRr4PT8/Udkb//4Ac/qPbZZ5/W53/sYx9b/e3f/m2LT77xjW+s
TjnllNZx/ud//meLPsNE4uabb+66htpSbCv+/t///d+ttRE4+wMf+MDqPe95
T/WpT32qestb3lKdf/751bRp06p/+Zd/2eqfYzx88YtfbM0xrnnDMPqPqOtX
EZp/P7VwR+rf10Wtn6HeQz0kB6OuzwRfRa6Z/pHUk6j/O/UzyoXVO5LcWb3Y
1UeyG//u1p81YrRnfN6Xr3McriO41Rw8vd/5PXYt3425d35n9rJaEp3+kftE
XT9AD0n4R7J/E+Yc/H0o2ucC5wQcHhon5N8vC/N3w+gryN/vd7/7Vbvuumsr
V60Ap1+9enWLB+5o/B21NatWrarmzZtXff3rX2/c54Mf/GB1++39t8Hakfn7
0NBQNX369OpjH/tY4+tf+MIXqv/4j//Y6p9jPGwuf98ergvD2JkRnfoZcMNz
ou7hdFLhkNC/IyfM+tXDCudE3nhl1N4zyL0vL0H/d/WPZA2ramhYuzojbZVD
k6tn78ixuHoTcu4+927V3DufU/275uG57tB7CfSApwae9yC0/yrrV8nfqZ9h
7ybtv4oc/FB09m9in1zUHG9w/1XD6B/I38G9wN9f85rXbHoNeWk8d/XVVzfy
9zvvvLN69rOfXe23334tTcqiRYuqSy+9tPrlL3/Zsd+f/vSn6nGPe1y1ZMmS
1vGgsfj85z8/ir/jfQ9+8IOrAw44oJozZ061xx57VMcdd1wrl5sRPfD3t7/9
7a39nv/85/c8H5/+9Ker9evXt/L1+KxYuyBnr8C4OG4G51I1MPiOp556anXL
LbdUhx56aDV79uzWfL3uda8b9b4c5Jlf+cpXWsfAfGCely5d2rp38L//9/8e
87uQv2P+jjzyyNbY0LQ89alPregbgP//7rvvvtWJJ5446v1/+MMfWmufhzzk
IV3H+NKXvtT6rMi79wqspc4444yWzmbWrFnVwQcf3LofomiaS4D3g3Sdw++J
dcLatWtb523FihWt887+InxfDl5DuA5xzd16663VCSec0Dr/Rx11VHXFFVe0
7h/85Cc/GfU9oL9auHBhtXHjxp6/u2EYNaLdfxVcEP6R0FZDY03/d3jQIP+O
GtY1JVi/Sv5O/Qw5Kfk7uDu0M6p/Z/6dmnHqZsiFmd9mrl19aLSutBv/7oXP
d6tf1ferbkf1M9S9U0OD78H+TbyvsHvU/ZsWRd2/aWmMrl/FvLF+9R5lbhHQ
KtE/UvUzWFthnUX/9zvcv8kw+gfyJOQm733ve1dHHHHEptde/epXtzjN73//
+1H8Hb/bk08+ufX6s571rOrv//7vq2uuuaZavnx5i39v2FCXpoMbTZkypcXh
P/KRj1QvfvGLW/uBGyp//853vtPi729961tbGhfw5vve977V1KlTR+Wlowf+
/oAHPKC137e//e2e5gJjQgMCLchNN93U0oGA1+Kz4zMRm8vfOSfXX3999eEP
f7ilCcd+n/zkJ1v7YN3yvOc9r/XcK1/5yuqzn/1sK/D8bbfd1loXHX744dXb
3va21nvw2R70oAdV3/rWt8b8PjhfeC84+8te9rLW2I94xCNa4zz0oQ/dtN9V
V13V+o7f+973Ot6Pz4J9oc3vBn5urE96Ac4xuDFqKjAfH/jAB6oLLrigdYwX
vOAFY84l0I2/43tiHYL1J65FrDmw33XXXdfaB/eVeEysXzjHXAPhOsS5x/kC
78d6FvP1i1/8orXGeMpTntLxOX7961+31gm4pg3D2DJEu38T8u/QzyCvixwv
61dPLjwy929i/eoBUdevMge/LDr9I1VLwtpOekdSd0L9jGrfme/O+fBu9av6
Wjdo/l55v4bqdrSPFD8P7w9w3TFbQrk7vzPvQ4C7M/8+GG3NEbUzWAeBv7P/
Kv3fwd2HSjD/jnME/g79jBMXhtFHKH8nN/rGN77Reg1cHvl0IPN3aJux7zve
8Y6O41Gj8KpXvar1N7gz/n7Uox7Vsd+b3/zm1vNj6WeQI/7zn/9cHX/88dVZ
Z53V8Vr0wN+xvsB+qK3sBci3Ll68uJV31s9w0EEHtTg47xVuLn9H3lv1I8jX
Im+rOetu+hnmt7GW2FzgfOG9733vezuev//9799aE/EzYX0GTv3IRz6yYz+s
OXD/YyxgHYExwMt7AfTw4MM5nw0Nzm677bapFmFz+Tuewz2d/PlPOumkTX+P
pZ/BdYjX3vCGNzS+husC95sIrDUwhxNZb2wYkw1R62eoy0D+nfqZE0tQ/878
O+tX4SG5f9T9m8BPkV9eGp09WFnTqb2bsFXvd2rf6cuovi/ZG6Yb/47YfE0N
+7Xm/L7Ww/Kz7RL1PQLl8Nq7iRye+hnk4OkdiYAGnhweOXjWETD/zvscmHPm
37GWAndHfQL7r+KcuX+TYfQRyt/pNfPoRz+6pSPA89SuZP5+0UUXtfQP0MaA
Y2tAJ3PPe96ztR94PI4DHqrAftBMZ/6OnD90JuB4ITqH/fffv2O/mGD+jjw3
ctBNWhFwtZA8/ubyd6wLMvAcPh/Rjb+Dzy5YsKClucHcjJULz8D5Ai/PIAe+
4YYbNj2HvDzOJ+YBQP45GtZnGZvL38GDof3JwD2FkDz+5vJ3XHMZWCvoddML
f8/1HwD0S3jtTW96U+tv3HvCeT399NN7+s6GYYxG6d+0YSQujdoDnvl38Peh
aGtnwCPB35F/Z/9V1q4eFHU9JjXwzDkz/8589PyodeI5904en2tGNffd5A+p
/Fu18d2gHvJ5/wHZR2to+Zg6Gga5O/s4kbtT/04NEdczy6POvVM7syrqHqyY
X3B4ekfSf4b+79S/k79vtH7GMPoH5e8AfBbBscBjV65cuWm/zN+hEY4GPTED
GnIA+nj8/dOf/nTU2OBcyt+vvPLK1r7ghNDOfO5zn2t9LvBc8CVFTLB+BjoK
7IvPmwGei9f+4R/+ofX3lujfMzCXOp9j1a9iLXWve92rxeOxD/TvT3/601tr
p7GA40NTksF7Ii996Us3Pff973+/lU/+m7/5m9bfuN+Bew7j9dfbXP0MtOTQ
RGWg7iCEI2+J/j0D15ZeN+Pxd+T/uwG6etRCALifgeNAX2MYxpYj2voZcHd4
EjL/rvp36Diof6c/OXQezL8fUPgo+zcx17ys8Ffy97lR69/J36mDZ25ba1ep
VdG6UtaTduPf43F31dhozl59bjTvPjVqTQ+35O3UzlAHRP0MgvW61L9TU8Tc
O4L+kdS/03uG/VePLfOOc4BzcVbU/B3nCvr3O12/ahj9Q+bv4NngcQit+8z8
HblNaI7xvqZgPnZz8u/Iux977LGjPiPqXbeEvyN3HD3WryLvjO88Vv6d3wnH
i4a8/gtf+MKtwt8J/L8SPoyXX355T99rc/LvAD4nakmhbQHPxlpuPMA/Pzaj
fnW8/PuHPvSh1t/UZ+W8ftM8TRR/Ry1HN3BcfF+sXbG29b9dhrHlKPl31K+q
foY8EbyR+vfjC6dcXTgmcsXg7wcVHgodCDk8+6/Se0Y9JNU/kr4ts6NTP6N1
q+Tt5Ozk1t34dy/9V5W/Z7/4qel5rWPN/ZuYg+daRPPv6v0O/s7c+/Lo5O+4
f7Eqag+aI6Oz/yrmHecA5wL3RLC2wjli/6YNzr8bRv+Q+TvwhCc8oTrzzDOr
n/3sZ5uey/wdeVK8DznysYAay+hR/36Pe9yjQ68MfO1rX2vx6i3h7734R4Iv
0icQ+VXcE9DaW/z/CcdQ/Tu5JfxOFOvWrdti/v6+972v9V74WfYCaF1QBzsW
etW/E6gtxv7QvMPnBrWbvWA8/0hcWxwLtaqoB0AvJQXmSPXvqC3FZ0HNrgI1
1rGF/J2aMNZm5H3H4u+4lvbaa6/W+hI6K713YRjGliHq+lXNv4O/Uz/D+lXq
Z5S/I5A/HozR/Vepn1kUde8m7d9E7Tg1NJp/1zpW7YOqHjFN/LuX/qtE7uOU
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
Ye0q+Dty0Aui05eFfZzUg3GmcGRydfL6iGYe38S/e/Gf0fdkHT1z7cy/670A
9YHX3lOzo+7fpDWs1L+zpxXnhxwevB1roENjtP8M8+9DUfN3auBxrwT8/c5+
Xz+GYRiGYRjGtkPxn9kYtX6G/ZvAFamfOT7qGlb6z4BrUvexfwnWr9J/hvl3
9mCdW7gtuS7z1dq7idxd897q55jz65l/9+I/M5D2UV1OPqauI7T3KoP8nd+H
/ZuofWdQP7Msau6OgO6I/pFYE2Fu15Rg/h31q+TuWF9RP4McvPm7YRiGYRjG
JILwd/WPPC9qDk/+Tv0M/Q3BNcHfkT+mfyT4KPXdS6LOv5PLsn5Va1fJ3+lD
k3ky+Tvz7hGjeXzm3+Pxd61fzd7v6hup3u/0nufn42em/yW9Z5iDx/dk/p3+
7+Tv9I6k/wx1SPSfWV3mGvPe1H8VayzqZ/7U72vIMAzDMAzD2HYo9avQz1xS
OCG8Cen/rvWr9J+hvyHrV6l/H4w2f2ftKrkq8+/sv0rtjPZwoo5ca1ez/wuD
PLsb/x7PPzLn3hXZ/13HpfeM9m6iZ45yePJ3BGtXsV0SNXdHjQBz8Fj3UEOT
/d8x5/R/B3eHpyfODdZYOFc4Z7e7ftUwDMMwDGNyIdr1q9DPQJNB/n56iaHC
I6HlWFt4JTTw1M/Qe2Ywav9I6t+XRu0/Aw5LDs8+pfSdofZdvSMHotNHkvlv
5uO78e/x+LvuG3Jc5e7qMan6GWrz+ZjrDtbiYkvdu2rfMQfLJPaMer2D+aOP
PvPvmN8m/QyC+hnk4Fv1q/aPNAzDMAzDmFyI0f6R4PBnRa2foX8k+zch945c
MfXv4KAro86/I/fepJ/RHk7UjFODQs2M5rXJk1XDMh7/Ho+759x9zt9rr9W8
huBj1c9o/ybtv4p1Cjk81i70f4e2iF75qp9BgL+vLkH/d3D3oej0f1f9jPs3
GYZhGIZhTDJE3b+J+ndorJF7p34G+Xf6v9MDXvs3QT/DekxwU3qsgK+yhpXe
kdSWUD+j/Zu0NlTz7eTOmhPvxr/VF74bsnae23wc9aHR3lK61mD9KvXv+Js5
+IXy/XEvgvl31c+w9pf5d3J4rJXI35l/p34G/J39V12/ahiGYRiGMYkg9avU
v59bAlwRHB55X+rfmX9X/cxBUXuZY0uPROab2X+VPZzI3+k9w/pVBmtEVWuu
fjQRzXl45d/j+Uc21buqf01eK0xP25nlMfm76mfU+52+mdiSv2v/1f1KrCrz
CQ8aeOtjnlU/MxRt/0jk31FXDP6O+yQt/m79jGEYhmEYxuRB4e+qn4EG/tzC
FcHfkftdHzV/Z//VwwrfhHYG+XfkkJFX3qtsVT9DDQ21M3OirvdkMKeNXLbq
4LWWdCA660ub+HdEXefaBOX4A+nv3HeVnjeag99FtvysvIfA70YNzQL5/uTv
9NYcLHPG3k3Iv+OeBv31USsMDQ35O9ZRWFNB28T6Vehnbu/3NWQYhmEYhmFs
W0Tt/w5OqP7vpxXuqPl35IWpf2cOHjnklYWTrojaf2YPCfopzo+6fhX5aupQ
dJt9XzT/rnnyJv49nga+qcZV+X/uvYqYIc+p9zt5u/rZ02OH35Xfn/4zzL9j
rpiDZ/6d/Zuon6H/DPto0T+S/u/u32QYhmEYhjHJUPLvd0Tt/35+1PoZ6N+H
Coek/wzz76xf1fw7+zdRP0P/GWhoqH1nDyfWe9IHnv7vWQNP/k7urh4xTfy7
V/9IrX/NW9XRq++76nq41pgVte6d2ndqaOaW776obNU/cjBq/xnMHfk78++Y
a+TfUXeA/rfUv+PcIAePtRbWXHfcdddd/b6MDMMwDMMwjG2IEQ7458IFLyhx
XuGLQ9HO+4JDHhud/pHqP8M6zH2izr/T+53+K9S/g9PSp0Vz16opZw5+StQ8
XnPiWqOa+XcvHjT5vXyfvl95u3rSU4+vPWNVC6QekgujrmFl/h33JfYuc8W+
V1j/HFKC9QWsXwV3H4p27h2aJvB3nB/y9w39vn4MwzAMwzCMbYuo+zfR/13r
V8EfT4w6/35U4ZjMF9M7Ejx0RdT+kaxfpQYePJZ5afVqUR9GrVnl4wHZqk9k
N/7dq/e78nytZ9VcP/Xv6oGj9wfoHUn/Ga5NmHtv4u9Lo65f5byhBhjcnd4z
0Cgx/87+TfSPpP87zhXOmfuvGoZhGIZhTCKU/qv0n0GQvyP/3sTf4Y/C+lV6
vzOPTP/IvaKz9ypy7/MkqJ9hvpreM7OjM8fdxN8jRmtolH+P1V810uuaa9d1
QVPtKn1nuFX9DHXw9NWhhmZB1DWs4O/Mva8osV/U3pH0j0RtAe5xgMOvj9o/
ErUIZ0ftP7NJP9Pva8gwDMMwDMPYtoi6fhVB/n5m4YzgjtS/r4taP0O9B3LH
2r+J9Zngq8g10z+SoR4t1M8oFyZ/p+5dc+LZR7Ib/+7WnzVitGd83pevcxzq
ZqZFZ/+mGVF7v/N77Bq1xp/fl/l35uDVP3Iw6voBzCPuZxxR5hdzrf2b6B9J
/3fk3y8L83fDMAzDMIxJh2jrZ+5dOCHrV88unJH5d+jf2buJ+XdwTuSN6T3D
3PvyqHuwsn8R/SPp/64aGtauzkhb5dDk6tk7ciyu3oScu8+9WzX3zn1V/655
eK479F6CesAvkO+v/VdZv4o4MGr9DGoKML/k75hz5OCHota/M/+OwP2SDe6/
ahiGYRiGMbkQnf1XkX9n/Sr4O/s3af9V1q+Sv1M/Az4KDk/+Du66MDr178y/
UzNO3Qy5MPPb6t3I3LfWlXbj373w+W71q/p+zferfoa6d2po8D3Yv4n3FXaP
un8T63eXlsj1q1j7sH6V/u9YH6l/pOpnsLZCjTH7r97h/k2GYRiGYRiTC1H3
b0Lcq/BE9m86Oer+TUfH6PrVA6KuwxyMdm55WXT6R6p+hrWd9I6k7kR7N6lW
Rfmz5uC78e+xtO/cT3Pw3GpwLPWfYR6eawr6znD9wSB31+/M+xDg7sy/s36V
2hn2bzqizDNC/WdYv4pzg3ME/g79zMZ+Xz+GYRiGYRjGtkXU+pkLCjc8L2r9
zImFQ0LLAU0H8++sX4WHJPPIg4WfIr+8NDr9Z7R2lb2bsFXvd2rf6ctIHs3+
SdkHvol/R2y+pob9WnN+X9cN/Gy7RH2PQDk8ezcxB08Oz/pdekcioIHfp8wX
1j2sI2D+nfc5MOfMv2Mtxf6rCPB3nDP3bzIMwzAMw5hEKP2bNkS7fxP4IPuv
sn51KNraGcS6wi/hkXJo1LWrB0Wt50ZuGRw+a9+hIWFPUurEc+6dPF77rqoH
DbXpY/Fv1cZ3g3rI5/0HZB/eA9DcO3U0DHJ39nEid1f9O/Uz9KDBPK2MOv++
KuoerLy/gbnGnNN/Bvwdmibq38nfN1o/YxiGYRiGMbkQbf3MxSWYf1f9O/Uz
zL1jCw7P/Ds4KL0jqZ+hBzz9ZxZG3XuVPousXQWHZ25ba1epVWEenDl2cvom
/j0ed1eNjebsqZfRXlGqoVEtPnk7tTPUAVE/g+Bahfp3aor2LHOEuQJ/3z9q
/fvh0dl/Ffl3cHicA5wL5N/VPxL69ztdv2oYhmEYhjF5UPLvqF9V/czZhSue
GrX+/fjCKemPglwx+PtBUevfV0Zn/9XFhb+Sw8+PTv9I+rbMjk79DLkya0iZ
/1ZO3Y1/99J/Vfl79oufmp5Xz8rcv4k5eK5FNP8+P2r9DPg7c+/Lo5O/4/7F
qqg9aLT/KvUzOAc4F7l/U6v/qvPvhmEYhmEYkwtR169q/h38nfoZ8Hf6vx8V
nfwdgfzxYIzuv0r9zKLCZ3P/JmrHqaHR/LvWsZKbMwev/D3z7176rxK5j1Pu
4aT1s9NT7CJB70h60PA7zi/ff3F03pOAvgj8nWueVVHXrx4ZnfoZ1b/T/x36
d+bfNzr/bhiTDyO//epd73pX19c//vGPt/b57W9/uw0/lWEYhrGtEO38O/Tv
yL9DmwH+Du6OnO9Q4Y/Uv4NbwiMF/B354gOi9qAZjDZ/V66q+nf6v7N2FbyX
/Y/Yu4k5bXL27L0e0Zlzz/x7PP5Ozq9aevWz0bpV9ZDU3k3av4n6d3J41rCq
dmZRCa1dJXcnf0ccXuZ2ddT9m5h/J3/HudH+Tda/G8ZOiJ///OfVwx72sGrF
ihXVzJkzq+XLl1ennXZa9dGPfrT1eozD3++8887WMby+NwzD2DkR7fw7/d/B
DZHjRf4dGnh4z5C7ryvccnXhmcy9U/8OLrpX4ajs38T8O/k7OTz7N6kPPLkx
dTTU0GhNqWpamvh3xNgcXjm+ekUSWaOja4eB6NTPaA4++0fOidr7Hvl31K9S
/441zooyX9DN5PpV6t8x39p/FRxe9TOt/Hu/rx/DMCYWP/rRj6ply5ZVBxxw
QHXzzTdX3/3ud6tvfOMb1ZVXXlntt99+rX1iHP5uGIZh7NyItv9M9o88vcRQ
4ZDro9a/IweP3PvBUefgtX6V+ndq35mDV20Jte/0nMn+kU25d3Jr1a9n/j2e
/j37TupzTbWsHFM/Cz8jPXPI27kmYf5dc/DU0NBfk+udrJ85PGr+jvw7PWhU
P0P/d9wzuaPf149hGBOLoaGhVr79tttuG/Ua9TAjv/3q6quvrs4888xq1113
rfbdd9/qve9976b9sn7m2muvrebPn1996EMfqvbff/9qzpw51UknnVT97Gc/
2/SeL3zhC9UJJ5xQLVq0qJo3b161bt266stf/vJW/raGYRjGliDa/u/QYlxY
uCHz71q/emzhlPCeAX+n/3vWz+wZNX9fUvhr1s/Q/109aGZHndcmR9b61ewP
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
7j73btXcO/dV/bvm4bnu0HsJ6gG/QL6/9l9l/SriwKj1M6gpwPySv2POkYMf
ilr/zvw7AvdLNrj/qmEYdwvwY//qje0+SdsBn51s8bXXP2JM/s7Y54nvrS6+
5jPV+7/20+rOP7vvh2FMdkRn/1Xk31m/Cv7O/k3af5X1q+Tv1M+Aj4LDk7+D
uy6MTv078+/UjFM3Qy7M/LZ6NzL3rXWl3fh3L3y+W/2qvl/z/aqfoe6dGhp8
D/Zv4n2F3aPu38T63aUlcv0q1j6sX6X/O9ZH6h+p+hmsrVBjzP6rd7h/k2EY
W4Qff67d3/S5B/edw07meNbLXt0Tf9e4xxW3VFe8/+vV93/hvlGGMVkRdf8m
xL0KT2T/ppOj7t90dIyuXz0g6jrMwWjnlpdFp3+k6mdY20nvSOpOtHeTalWU
P2sOvhv/Hkv7zv00B8+tBsdS/xnm4bmmoO8M1x8Mcnf9zrwPAe7O/DvrV6md
Yf+mI8o8I9R/hvWrODc4R+Dv0M9s7Pf1YxjGDoS/3NX2e4R3zHbAXSd7/OX5
96j2e9K7N5u/a5zzqk9XN33xx9WGO/9fv68uwzC2IaLWz1xQuOF5UetnTiwc
EloOaDqYf2f9KjwkmUceLPwU+eWl0ek/o7Wr7N2ErXq/U/tOX0byaPZPyj7w
Tfw7YvM1NezXmvP7um7gZ9sl6nsEyuHZu4k5eHJ41u/SOxIBDfw+Zb6w7mEd
AfPvvM+BOWf+HWsp9l9FgL/jnLl/k2EY4+POP1bVZ6+uhl+6tu+c1VHHT665
9G5x91zz+rK//071u422JTOMnR2lf9OGaPdvAh9k/1XWrw5FWzuDWFf4JTxS
Do26dvWgqPXcyC2Dw2ftOzQk7ElKnXjOvZPHa99V9aChNn0s/q3a+G5QD/m8
/4Dsw3sAmnunjoZB7s4+TuTuqn+nfoYeNJinlVHn31dF3YOV9zcw15hz+s+A
v0PTRP07+ftG62cMw+iK3/+favjvn1sN/9U9+s5VHaPj2te8aML4O2PVMz5Q
vfBD36p+c5vTO4axMyPa+pmLSzD/rvp36meYe8cWHJ75d3BQekdSP0MPePrP
LIy69yp9Flm7Cg7P3LbWrlKrwjw4c+zk9E38ezzurhobzdlTL6O9olRDo1p8
8nZqZ6gDon4GwbUK9e/UFO1Z5ghzBf6+f9T698Ojs/8q8u/g8DgHOBfIv6t/
JPTvd7p+1TCMUfjFv1bD7768Gn72qr5zVEdz/OWKg6qjn3HzhPN3xkFP+9vq
eR/4RvXL39umzDB2NpT8O+pXVT9zduGKp0atfz++cEr6oyBXDP5+UNT695XR
2X91ceGv5PDzo9M/kr4ts6NTP0OuzBpS5r+VU3fj3730X1X+nv3ip6bn1bMy
929iDp5rEc2/z49aPwP+ztz78ujk77h/sSpqDxrtv0r9DM4BzkXu39Tqv+r8
u2EYm/CbH7drUrcDfuoYO/7vq8/catxdY/+nvr/VF+rn/+N23YaxMyHq+lXN
v4O/Uz8D/k7/96Oik78jkD8ejNH9V6mfWVT4bO7fRO04NTSaf9c6VnJz5uCV
v2f+3Uv/VSL3cco9nLR+dnqKXSToHUkPGn7H+eX7L47OexLQF4G/c82zKur6
1SOjUz+j+nf6v0P/zvz7RuffDcOobvt1NXzL05xv34Hiw9c8fZvwd8Z+T3l/
9aR3/rN95A1jJ0G08+/QvyP/Dm0G+Du4O3K+Q4U/Uv8ObgmPFPB35IsPiNqD
ZjDa/F25qurf6f/O2lXwXvY/Yu8m5rTJ2bP3ekRnzj3z7/H4Ozm/aunVz0br
VtVDUns3af8m6t/J4VnDqtqZRSW0dpXcnfwdcXiZ29VR929i/p38HedG+zdZ
/24Ykxl33l4Nf/Kl1fDzD+07H3VsXlz4VzdsU/7OWPnk91XPfN+trnM1jB0c
0c6/0/8d3BA5XuTfoYGH9wy5+7rCLVcXnsncO/Xv4KJ7FY7K/k3Mv5O/k8Oz
f5P6wJMbU0dDDY3WlKqmpYl/R4zN4ZXjq1ckkTU6unYYiE79jObgs3/knKi9
75F/R/0q9e9Y46wo8wXdTK5fpf4d8639V8HhVT/Tyr/3+/oxDKMPgA/kl26o
hq9c3Xce6tj8uOOlx/aFu2sc/uxbqpu+8OPK93ANY8dEtP1nsn/k6SWGCodc
H7X+HTl45N4PjjoHr/Wr1L9T+84cvGpLqH2n50z2j2zKvZNbq3498+/x9O/Z
d1Kfa6pl5Zj6WfgZ6ZlD3s41CfPvmoOnhob+mlzvZP3M4VHzd+Tf6UGj+hn6
v+OeiQuTDGOy4V9vqYZfcXzfOahjy+Orr7u87/ydccYrPln9809+2++r2jCM
zUS0/d+hxbiwcEPm37V+9djCKeE9A/5O//esn9kzav6+pPDXrJ+h/7t60MyO
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
zt9rr9W8huBj1c9o/ybtv4p1Cjn8/2fvPOCrLM/3/0AYMkoIhL3CDrI3MsNG
hsh01lFXrUVxMZQiCorsoSJanAioP/dAFK11oa0DWkfVv9vW0VarVgEVev9z
vee98t7nyTkZkORJwnN/PvfnhOTk5Jw38fh9r/e6rxvnLsx/h7cI2nuGiffP
oMHvPcJm/jvYPctE+1dxbqX9M35/ky9fZaW++6f874bJzjnSd8n3vvldJGPG
ZuecXZx90g3Pyg97f3b9X5kvX4dMmWh/k96/Cu2d/hno78x/Zwa83t8E/wzn
McGmzFgBr3KGldmR9JbQP6P3N+nZUK23k521Jp6Mv3UufLKyvfO8tR9H59Do
3VL6XIPzq/S/49/U4Ouq149rEdTftX+Gs7/U38nwOFciv1N/p38G/I7fFX5n
fn7Vl6+yUJ+9Lv9b1Ns5R/p20++sOc45X5dED7vqMfn439+7/q/Nl69yX2p+
lf73sWGDFcHw0H3pf6f+rv0z7U2UZY5bZiRSb+b+Ve5wIr8ze4bzq2zOiGqv
uc6jMSaxDq/5O7/8yETzrjq/xj5XqGzdVg0/Jr9r/4zOfmduJm7J79y/Su97
6/A44ngigwbZ+jjO2j+TZWL5kdDfMVcMfsd1koDfvX/Gl69SXm8/Lv+b18k5
Q/p218uXLXTO1iXVXefeLzve/6fr/+p8+SrXFfK79s/AAz82ZEXwO7Tf/ibi
d+5f7RzyJrwz0N+hIUNXbhreav8MPTT0ztQy0bwnm5o2tGztg9ezpCkmfr40
EX8bE825JirN+CnWv+29q8y80Rr8YeqWz5XXEPja6KGpo14/+Z3ZmhnhMePu
JujvuKbBfH3MCsNDQ37HeRTOqeBt4vwq/DNe6PDlqzTXSxu81/0Q7/1zMqXr
BRudc3VJduuZd8sdO953/V+fL1/lukyU/w4m1Pnvw0N21Po7dGH636nBQ0Nu
FTJpcxPlz9RTzTzFNBPNr0Kvpg9F39q5L1p/1zp5Iv7OzwOfaMZV87+9exVd
RX1OZ7+T23WePTN2+Fr5+pk/Q/0dx4oaPPV37m+if4b5M9yjxfxI5r/7/U2+
fJXWwpzqw5c4Z0ff7vvLFWOd87SrvvTe12T/fj+j5ctXUVeov+8xUf77USby
z8D/nhUyJPNnqL9zflXr79zfRP8M82fgoaH3nTucOO/JHHjmv9seePI72V1n
xCTi74LmR+r5V/tW++h17rv29fBco5qJfO/0vtNDkxq+9vTwVudHZpgofwbH
jvxO/R3HGvo75g6w/5b+d/xuoMHjXAvnXHv27dvn+s/Ily9fun7aI/+7/STn
3Oi7dPRdq+c452iXfdx1f5Rv9/zk+r9KX77KXWUz4E8hC04Me1zIi1kmpvuC
IfuZ+PxInT/DOcwWJtLfmf3O/BX638G0zGnR2rX2lFODr2AijteauJ5Rtfm7
IBk09vfy+/T3a27XmfT04+udsdoLpDMk65pohpX6O65LNAuPFfde4fzn8LA5
X8D5VbB7lolp7/A0gd/x+yG//+D678eXL1+qkDGzdrRzZvRdenrMpRucM7Tr
HrJoq3z2jf/flS9fRVkm2t/E/Hc9vwp+HGQi/b17yJjUi5kdCQ5tbqL8SM6v
0gMPjqUurbNadA6jnlnlxynqVudEJuPvgma/a87X86xa66f/XWfg6OsDzI5k
/gzPTai9J+L3hiaaX+Vxwwww2J3ZM/AoUX/n/ibmRzL/Hb8r/M78/lVfvkpL
ffm2/G9xX+e86Lv09A9XD3TOzqWl+y94RD792jO8L19FUeH+VebPoMnv0N8T
8TvyUTi/yux36sjMj2xq4nevQnuvrZr+GerVzJ6pbuI17kT8bkxuD43m77z2
qxrr61pr1+cFiWZXmTvDW+2foQ+euTr00NQx0Qwr+J3ae/OwW5soO5L5kZgt
wDUOMHx/E+VHYhZhjInyZ3L8M67/hnz58iWxfMgF3Zzzou/S1c+sPds5N5em
7jP/YfnwX/91/V+rL1/lokw0v4omv48KmRHsSP97HxP5Z+j3gHas9zdxPhO8
Cq2Z+ZFsndFC/4xmYfI7fe9aE7dzJJPxd7L9rMbkzoy378uv8+fQN1PJxO9v
qmKi7He+jhom8vjz9VJ/pwav8yMzTDQ/gOOI6xldw+OLY633NzE/kvnv0N+n
G8/vvny5r4DduzpnRd+lr3+9aK1zZi5t3WveQ/Lel9+5/q/Wl68yXybmn5kS
MiHnV8eEzEj9Hf537m6i/g7mhG7M7Blq741NtIOV+4uYH8n8d+2h4exqFetW
MzRZ3c6OzIvVE5Wt3du7W7X2zvtq/7vW4Xneoa8l6Az4Our16/2rnF9FtzOR
fwYzBTi+5Hccc2jwWSbyv1N/R+N6yQ9+/6ovXw7rs796dvedsH9e0E1azNji
nJdLY3e/5EH52+ffuv6v15evMl0mfv8q9HfOr4Lfub9J71/l/Cr5nf4Z8CgY
nvwOdq1r4v3v1N/pGadvhixMfVtnN1L71nOlyfi7IDyfbH5Vf7/W+7V/hr53
emjwOri/idcVfmGi/U2c320Ytj2/inMfzq8y/x3nRzo/UvtncG6FGWPuX93j
9zf58uWo/vEX+d9lnt19J+631pzgnJNLc2PP0xt//4/r/4p9+SqzZaL9TegJ
ISdyf9MQE+1v6mVyz6+2NdEcZoaJacuNTHx+pPbPcLaT2ZH0nejdTdqrovlZ
a/DJ+Dsv7zvvpzV43urmz9L5M9TheU7B3Bmef7DJ7vo18zoE2J36O+dX6Z3h
/qau4XFG6/wZzq/id4PfEfgd/pndrv9+fPk6JOsfuzy7+86zFy+9yjkjl/bu
PPs++csnX7v+r/mAqm/fvnL66acXy2M3a9ZMFi1aVCyP7av8lIn8MxNDNhxn
Iv/MoJAh4eWAp4P6O+dXkSFJHTkj5FPoyw1NfP6Mnl3l7ibc6ux3et+Zy0iO
5v4kOwc+EX8bU3hPDfe12vq+Pm/gczvMRNcINMNzdxM1eDI853eZHYmGB75F
eLxw3sM5AurvvM6BY079HedS3L+KBr/jd+b3N/nyVdL16c5sdu/inA99l97e
PzdTOp5/h3M+Lgvdcda98sqHX5XIf7rJmHvTpk1goUI91j//+U/55ptvcv5d
lMyd32N99913cs4550jz5s2lWrVqkp6eHry2u++++6CfT3Gel/gqugr3N/1g
YvubwIPcv8r51SwT886g+4R8iYyUjiaaXW1vIj83tGUwvO19h4eEO0npE7e1
d3K83ruqM2joTc+Lv7U3PlnpDHn7/inqPrwGoLV3+mjYZHfucSK7a/87/TPM
oMFxamUi/T3TRDtYeX0DxxrHnPkz4Hd4muh/J7/v9v4ZX75KsDy7+y5Af75q
vHMuLkudedE98vKH/y72/3yLkt/tKkl+nzx5srRq1Uruueceeffdd+WFF16Q
xYsXy7p16w76+Xh+LztlYv6ZyWFTf9f+d/pnqL3jFgxP/R0MyuxI+meYAc/8
mbom2r3KnEXOroLhqW3r2VV6VaiDU2Mn0yfi7/zYXXtstGZPv4zeFaU9NNqL
T26nd4Y+IPpn0DxXof+dnqIm4THCsQK/tzGR/72Lid+/Cv0dDI/fAX4X0N91
fiT873v9/KovXyVUn78h/5vf2Tkb+i79vWn1XOdMXNa6y5z75P0vizdbsqD8
ftFFF0mHDh1k/fr1AQfXrl1bJkyYEKe368fCx/h+3aynnnpKevfuLdWrV5fG
jRvLr371q0A/Z3322WcyfPjw4Ov4WTfeeGO+7J2WlhbH6oleZ6Ln8+WXX8pR
Rx0VPI8aNWpI+/btZcOGDTnfN3Xq1Fzfh/MD1M6dOyUrK0tq1aol9evXD84h
vvjii5zvve2224LHw+uoW7euDBgwIO51+iraCvV3zK9q/8yYkBWHmcj/PiBk
SuajQCsGv7c3kf+9lYnfv1o/5FcyfJqJz49kbkt1E++fIStzhpT6t2bqZPxd
kP2rmt/tvPiK1ud1ZqW9v4kaPM9FtP6eZiL/DPid2ntjE8/vuH6RaaIMGr1/
lf4Z/A7wu7D3NwX7V73+7stXCdR/PpH/LerlnAt9l40ePvcm5zxcFhs7nv71
XfHZQgvD76mpqTJmzBh59dVX5YknnpAGDRrIeeedl/Cx4KUBE8+ePVs+/fTT
oFGvvPJK8Dhg8TfffDNg+Y4dO8q0adNyHgdMDO59+umnAx29Z8+eAVvnxe+t
W7eW8ePHx51P6Er2fD766CNZsGCBvPTSS/L2228Hmn2lSpXkmWeeCb7+9ddf
S48ePeT444/P+b59+/bJJ598Enh0zj33XPnLX/4iL774ogwcOFCOOOKI4Pvw
9cqVK8vChQsD3sfrXrp0qXz7rc8YKs4y0fyq1t/B7/TPgN+Z/97dxPM7Gvpx
hsm9f5X+mfSQZ+39TfSO00Oj9Xc9x0o2pwav+d3m74LsX2XZe5zsHU56fray
1YepZnYkM2j4GtPC11/fxF+TgL8I/M5znkwTza92M/H+Ge1/Z/47/O/U33d7
/d2Xr2Ku3V/L/5YNds6EvstGf3/1YOccXJZ77LLtsvvHn4vlP+XC8HvNmjXj
+Pg3v/mNdOvWLeljJdLMp0yZIieccELc57Zv3y4VK1aU3bt3yxtvvBH8XPIz
CnyMz+XF748//njA51WqVJEuXbrIGWecIU8++WTcfQrqnxk6dKj8+te/Tvq6
UBdccIEMGjQo7nMffvhh8DzxGnbs2BF8/N577+X783wVXZmY/g7/O/R3eDPA
72B3aL5ZIT/S/w62REYK+B16cVsTZdBkmBi/a1bV/nfmv3N2FdzL/Ufc3URN
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
nfOr3L8K/za0Y+rv1JebmPj8Gea/U3sn99JLo3ea6plV7T3X/pZk/M1/Jyub
7+1ZVj6u3t+k52l5jaCqap6H4LZW+BrrqqYHnvmReoYV+jvnV5k/Y+9vGmZy
72/CtZJgf5PX3335Kpqauf2ifNld9+JN050zY0n2tulNZXirGtIwtWJwXX3T
hEZxX//mvNZyStfa0ij769UrG2mTXkmWDa2f52NuzH6Mzg0rS1q1ClKzipEO
DSrL9aMbxN3nhjENpXHtilKnegX5dY+0uK+9e0aGtKxbSb4+t7Xz43Pbykud
M2557/M3vez6bcKXr1JTJqa/g92h6SI/EhovGB6ejcEhQ0IPZn4ksyO5N5Tz
q8yfsfc3gePt/U3UrDkDqneacjZUa+A6a0YzeKIsmfxK876dHcnH0DujtA7P
8wxmz/D58zXVMNF5Su3wGHAGgPtXea2ilYnmf3EOxLkC+t+pv+N3gHMp+JnA
7zjHArtDf/f+d1++iqDuf+fBQrE7e8aWabJ3Tnvn7FgSfc/RjeW8PnUC5jYJ
+P24jqmSUSdFtk5rGnD1yuH1pVIFI5ut++nGfe/I/vrOU1rIW6dlyKIh9YLv
uX9Sk+Drn5/TKjgXuGlsQ3n2+GZSr2ZFuXti45zvH9KyWvB8XB+b/Xguc252
zreHQm956UPXbxe+fJWKMlH+zKSQD8eZyPs+NORH5r8zn5z5M5kmYnfcMl+F
s6vgd3pnyLT0mNQ08RmMVRUjk9XJ9cYk5vhE/F2Q/Bn9PbaPnlo79Xd9LUDn
wOvdU9VNtL/JnmHl7Cr1d+5wAsOD23EO1NHkzp+h/p5lIn6HBx7nV8yPLL5F
0758HSL19+/+Lr03DDggfkcfs2mifPW7Ts4ZsiTbJOD3dvUqy6x+deM+16lh
ZZmZzfyFeeyODaLveSab2evXqpjztfHtfiHzB6YHH994ZEMZ0bqG82OB/m5p
lnOuPVS6/QX/J2999k3+/2H78lWOK8yf2W1iei73N40JWZH5kQNMtMOJ+TNg
Tfo+2oRt589Qf2f+e2rItmRd6tV6dxPZXeveOs/R1tdt/i5I/kyKdR/ty7Ef
U59H6N2rbPI7Xw/3N9H7zqZ/ppGJ2B0N3xHzI3FOhGPbM2zq7/Avkd31/iZc
M/H87svXQdT+/+2XY+478YDZnT3qtlHywVW9nHOkS34/sXNt6dKoinx4VkvZ
f1FbeXRqE0mtauSJY5oW6DHxPQ9PaRL4aB6cHNPf//nbVsFj7DixuXyZ/XHz
tJRAm8fH0PrfP7Ol82OB3r52hnOuPZR68MKtsvvHn12/ffjy5awUv0PLZf7M
OBMxPPmd/hnmG4I1we/Qj5kfCR6lv7uBifR3siznV/XsKvmdOTQ2J5Pfqbsb
k5vjbf7Oj9/1/Kqd/c7Wujt9PCnq+fE5M/+S2TPU4PE6qb8z/538rudX6X9v
b6L8mR7hscZxp/6Ocyn4maC94xwL7B7Mr7r+G/LlqyzXmleuPWh2Z/e/abC8
snqwc5Z0xe97LmgjUw5PDb5WuaKRqpVMLi97ov5qRmupVSX2PdWyv2ftyPjv
gb+mff3KAa9fGOr70zumBl4bePIPb1A50P5vG+/OR3PS5dc6Z9pDrb0X3teh
XOH8KvwzU0MmRDYh51epvzP/nfyu51fpf88wUf5ME8Wq1N/TTDTbae9woo9c
z67a+S9scnYy/s4vP9LW3nXZ+e/65zJ7Ru9uYmaOZnjyO5qzq7htYCJ2x4wA
NXic99BDY+e/45gzfwbsjkxP7l9lfuT3fn7Vl68Dq9e+2Cmdr+9dZPyO7r6+
nzx641jnfO2C3y8blC6t0ivJnUc1lj+f1FyuHlo/0M4fmtIkz8fad1FbefO0
DHnpl81lQfZjYJYVvvhk98fXoPN/N7N1MEv7WPa//3pqC6md/X3/+E2rEj8W
P17ewznLHqr9YBHudvLlq6yVic2vwj8DTwb5fUTYWSFHwsvRO+RKeODpn9HZ
MxkmPv+9oYnyZ8CwZHjuKWXuDL3vOjsyxcTnSFL/ph6fjL/z43d9X6MeV7O7
zpjU/hl68/kxzzs4i4tb+t619x3HoJHqJiY638HxY44+9Xcc30T+Gc6vgt+h
wQfzqz4/0pevwheyIkfeMbZI2Z3daV1PufH2Kc4ZuyT5/fuZbaRKRRM3W4o+
tmOqDM6oVqjHxvcMSvI9u89vE+TavHBi8+AcAfOs/BqYHucOJX0s/rL2ZOcc
e6h2x1n3yqdf/+D67cSXLydlovxI+GeQbQKG5/4m6u/wcnB/E7R3aMX0v4NB
W5lIf4f2nsg/w/lV7m2i9k6O1xmSeneT9rDkx9/5sbut3dv6vd61ap9D8GPt
n9H7m/T+VZynkOFx7sL8d3iLoL1nmHj/DBr83iNs5r+D3bNMtH8V51baP+P3
N/nydQB18VNzioXddf9u83TZN6udc9YuCX5HfiM+h4wafb8TOqXKwBaF4/dj
svm9b7PDEn4N+Tdndo9lSMITj0xJfg3Zk/Y1gZLoy5Yscc6xh3JPXPmU7N/v
/z/o69ArE+1v0vtXob3TPwP9nfnvzIDX+5vgn+E8JtiUGSvgVc6wMjuS3hL6
Z/T+Jj0bqvV2srPWxJPxt86FT1a2d5639uPoHBq9W0qfa3B+lf53/JsafF31
+nEtgvq79s9w9pf6Oxke50rkd+rv9M+A3/G7wu/Mz6/68lXIeuT/bS12dmef
uWWq/DA30zlvF0Uj3x0eF3T2e49cMbhe8PF74QwpmBs+dPhb3j49Q64d1SDI
ftQZ8JM7pMpve0V5NJf0Tw9mVf+Wff+/nNpCLs9+TPjgV4/I7Zt/9eTmklG3
knx7XizrHZp/eo2Ksib7vtD94Z3H7GxJHpP9lx4u7Wducs6wh3pf++TfXL+t
+PJVoqXmV+l/Hxs2WBEMD92X/nfq79o/095EWea4ZUYi9WbuX+UOJ/I7s2c4
v8rmjKj2mus8GmMS6/Cav/PLj0w076rza+xzhcrWbdXwY/K79s/o7HfmZuKW
/M79q/S+tw6PI44nMmiQrY/jrP0zWSaWHwn9HXPF4HdcJwn43ftnfPkqeH32
38+k702DS4zf0ZPuGC9fXtbFOX8fbIPLs99zcvXUw1ODr39ydkuZ1jE1Z39T
6/RKAY8jV4aPAcbn/dHQ08HkuD+09B6NqwZZ77k4OfsxejapKndZ/hz8u2la
SpAxmYj5i7s/XX20c3b1fae0v/Ae76PxdUhVyO/aPwMP/NiQFcHv0H77m4jf
uX+1c8ib8M5Af4eGDF25aXir/TP00NA7U8tE855satrQsrUPXs+Sppj4+dJE
/G1MNOeaqDTjp1j/tveuMvNGa/CHqVs+V15D4Gujh6aOev3kd2ZrZoTHjLub
oL/jmgbz9TErDA8N+R3nUTingreJ86vwz3zv+m/Il6+yUni/O+GBk0uU3dlD
bx0h7y7t65zBfRdt37Tyd87Z1XesT1z/jOu3GF++SrRMlP8OJtT578NDdtT6
O3Rh+t+pwUNDbhUyaXMT5c/UU808xTQTza9Cr6YPRd/auS9af9c6eSL+zs8D
n2jGVfO/vXsVXUV9Tme/k9t1nj0zdvha+fqZP0P9HceKGjz1d+5von+G+TPc
o8X8SOa/+/1NvnwVom7Y+Xsn7M7us2Gg7LhmmHPm9F00vX9WOxkw6xbn3Oo7
6od2fur6bcaXrxKpUH/fY6L896NM5J+B/z0rZEjmz1B/5/yq1t+5v4n+GebP
wEND7zt3OHHekznwzH+3PfDkd7K7zohJxN8FzY/U86/2rfbR69x37evhuUY1
E/ne6X2nhyY1fO3p4a3Oj8wwUf4Mjh35nfo7jjX0d8wdYP8t/e/43UCDx7kW
zrn27Nu3z/WfkS9fpb4+/+/n0uOGI5zyO7rr9X3kvg0TnLOn74Pvb5YOc86r
vuO756UPynd7fnL9duPLV4lUNgP+FLLgxLDHhbyYZWK6Lxiyn4nPj9T5M5zD
bGEi/Z3Z78xfof8dTMucFq1da085NfgKJuJ4rYnrGVWbvwuSQWN/L79Pf7/m
dp1JTz++3hmrvUA6Q7KuiWZYqb/jukSz8Fhx7xXOfw4Pm/MFnF8Fu2eZmPYO
TxP4Hb8f8rs3/PnyVYA6f/tFztmd3fG6nrJm41Tn/On74Hrb2vOc86rv3D37
7lddv9348lUiZaL9Tcx/1/Or4MdBJtLfu4eMSb2Y2ZHg0OYmyo/k/Co98OBY
6tI6q0XnMOqZVX6com51TmQy/i5o9rvmfD3PqrV++t91Bo6+PsDsSObP8NyE
2nsifm9oovlVHjfMAIPdmT0DjxL1d+5vYn4k89/xu8LvzO9f9eUrn3rty50B
M7vmdrtnbZkuP5fTfMlDoY9fsM45q/rO3Rnn3iWvfvSV67cdX76KtcL9q8yf
QZPfob8n4nfko3B+ldnv1JGZH9nUxO9ehfZeWzX9M9SrmT1T3cRr3In43Zjc
HhrN33ntVzXW17XWrs8LEs2uMneGt9o/Qx88c3XooaljohlW8Du19+ZhtzZR
diTzIzFbgGscYPj+JsqPxCzCGBPlz+T4Z1z/DfnyVdpr2r3HO2f1ZH3S5kny
30sPd86ivgvXPy7s5ZxTfSfvEYu3yT6fCe+rnJeJ5lfR5PdRITOCHel/72Mi
/wz9HtCO9f4mzmeCV6E1Mz+SrTNa6J/RLEx+p+9da+J2jmQy/k62n9WY3Jnx
9n35df4c+mYqmfj9TVVMlP3O11HDRB5/vl7q79TgdX5khonmB3AccT2ja3h8
caz1/ibmRzL/Hfr7dOP53ZevPOv+dx50zuj59YSNY+UfC7s7Z1LfBe+da091
zqi+8+5rtvtMeF/lu0zMPzMlZELOr44JmZH6O/zv3N1E/R3MCd2Y2TPU3hub
aAcr9xcxP5L579pDw9nVKtatZmiyup0dmRerJypbu7d3t2rtnffV/netw/O8
Q19L0BnwddTr1/tXOb+Kbmci/wxmCnB8ye845tDgs0zkf6f+jsb1kh/8/lVf
vhLXnn17JOu2kc75vCA9+Jah8vry/s651HfB+tKrlznnU995NzLhP/naRyz7
Kr9l4vevQn/n/Cr4nfub9P5Vzq+S3+mfAY+C4cnvYNe6Jt7/Tv2dnnH6ZsjC
1Ld1diO1bz1Xmoy/C8LzyeZX9fdrvV/7Z+h7p4cGr4P7m3hd4Rcm2t/E+d2G
Ydvzqzj34fwq899xfqTzI7V/BudWmDHm/tU9fn+TL1+Ja+Wf1jjn8sJ0rxv7
y1PrRjpnU9959/55HaXteX7nalnoM27e4fptyJevYisT7W9CTwg5kfubhpho
f1Mvk3t+ta2J5jAzTExbbmTi8yO1f4azncyOpO9E727SXhXNz1qDT8bfeXnf
eT+twfNWN3+Wzp+hDs9zCubO8PyDTXbXr5nXIcDu1N85v0rvDPc3dQ2PM1rn
z3B+Fb8b/I7A7/DP7Hb99+PLV2ks7FntfkM/50xe2O58fW+545ajnTOq7+T9
0eopzrnUd8E6Y8ad8sbf/+P67ciXr2IpE/lnJoZsOM5E/plBIUPCywFPB/V3
zq8iQ5I6ckbIp9CXG5r4/Bk9u8rdTbjV2e/0vjOXkRzN/Ul2Dnwi/jam8J4a
7mu19X193sDndpiJrhFohufuJmrwZHjO7zI7Eg0PfIvweOG8h3ME1N95nQPH
nPo7zqW4fxUNfsfvzO9v8uUrQc0sRXmRB9JLNk13zqm+E/eNK+c751LfBe9f
rn/W9duRL19FXuH+ph9MbH8TeJD7Vzm/mmVi3hl0n5AvkZHS0USzq+1N5OeG
tgyGt73v8JBwJyl94rb2To7Xe1d1Bg296Xnxt/bGJyudIW/fP0Xdh9cAtPZO
Hw2b7M49TmR37X+nf4YZNDhOrUykv2eaaAcrr2/gWOOYM38G/A5PE/3v5Pfd
3j/jy1d8vfrFa6UyL7Kwfd6WabJ3TnvnvOo7auxc7XPxrc6Z1Hfh+pUPfZ6k
r/JXJuafmRw29Xftf6d/hto7bsHw1N/BoMyOpH+GGfDMn6lrot2rzFnk7CoY
ntq2nl2lV4U6ODV2Mn0i/s6P3bXHRmv29MvoXVHaQ6O9+OR2emfoA6J/Bs1z
Ffrf6SlqEh4jHCvwexsT+d+7mPj9q9DfwfD4HeB3Af1d50fC/77Xz6/68hVf
U+451jl7F1Uft2mifP27js651Xesv142wjmL+i58T137tOu3JV++irRC/R3z
q9o/MyZkxWEm8r8PCJmS+SjQisHv7U3kf29l4vev1g/5lQyfZuLzI5nbUt3E
+2fIypwhpf6tmToZfxdk/6rmdzsvvqL1eZ1Zae9vogbPcxGtv6eZyD8Dfqf2
3tjE8zuuX2SaKING71+lfwa/A/wu7P1Nwf5Vr7/78hXVvW/f55y5i7pH3z5a
Prqyl3N29d1WHll7vnMW9X1g/dy7X7p+e/Llq0jLRPOrWn8Hv9M/A35n/nt3
E8/vaOjHGSb3/lX6Z9JDnrX3N9E7Tg+N1t/1HCvZnBq85nebvwuyf5Vl73Gy
dzjp+dnKVh+mmtmRzKDha0wLX399E39NAv4i8DvPeTJNNL/azcT7Z7T/nfnv
8L9Tf9/t9XdfvmK1b/8+ybp9lHPeLo7uf9MQeW3VIOf8eqj3tPnXO+dQ3wfW
41c86fotypevIi0T09/hf4f+Dm8G+B3sDs03K+RH+t/BlshIAb9DL25rogya
DBPjd82q2v/O/HfOroJ7uf+Iu5uoaZPZ7ex1Y+I1d5u/8+N3Mr/20us8Gz23
qjMk9e4mvb+J/ncyPGdYtXcmPWw9u0p2J7+ju4THtoeJ9jdRfye/43ej9zd5
/7svX2Hd/27p39V0MI08nW03HOmcYQ/V3ruoj3MG9X1w/fgbn7l+m/Llq8jK
xPR35r+DDaHxQn+HBx7ZM2T3PiFb9gg5k9o7/e9g0aYho3J/E/V38jsZnvub
dA482Zg+Gnpo9Eyp9rQk4m9j8mZ4zfg6K5Jle3T0uUOKiffPaA3ezo+sZaLs
e+jvmF+l/x3nOM3D4wXfjD2/Sv87jrfevwqG1/6ZQH93/ffjy1dpqUn/N805
Yxd3d17XSzbcNtk5yx6K/fLaXznnT98H1yOv3ub6bcqXryIrE8ufsfMjR4Sd
FTJkfxP536HBQ3vvYCINXs+v0v9O7zs1eO0tofedmTN2fmQi7Z1srf3rNn/n
53+3cyf15xLNsvJn6ufC58jMHHI7z0mov2sNnh4a5mvyfMf2z3QxEb9Df2cG
jfbPMP8d10z2uP778eWrNNSOv7/onK1Lshdsni77SwHTHko9a/Fy5/zp++D7
wdc+cf125ctXkZSJ5b/Di3F0yIbU3/X8ar+QKZE9A35n/rvtn2liIn5vEPKr
7Z9h/rvOoKluIl2bjKznV+18mLz4Oz/93ZhIX7f3Pmnfjr3/lf4ZnQXP/Bl6
gtCpJrrWUC9s6O+8NtFEHS/ub8J5UMfw2OIY9zWx447rH7Z/Bv536u8+f8aX
r+w67ZGznDN1SfdZW6bK7rmZzrn2UOj98zpJ63M3O2dP3wffQxZtdf125cvX
QZfKn4GWy/nVsSErIrcwy8Q82GR4aMNdwqb3AxmI8HNDf2+mOJWZ57Z/hn5x
nT9TzUTzq4l2nuosybz4u6A7WHnfRI+j255hraSeJ/3veoaV/E7tXc/wMkOy
uYn8M+3CBr9zfhXHuFd4vKG9g9/1/lVcJ8nxv7v+G/Lly3W995/3pdO6sp/3
fiA95Y4J8s/LOjvn2/LeH6yZ5pw7fRdd/+Gtz12/bfnyddBlYv4Z+t/J7/S/
gxvB7/Bi9zZRviH9M+jWYWeYGL+T3eubKENSZ8+kmnj/O7NntLdcN+dWU6zb
RPyd3wyrfb8K1tfsWVZ9HqF9Pnb+DJv+Gb5ezq7ieGAmgP4ZHCvmv5PhcU2D
+TM41tDg9f4msDv1d58/48tXWHOfnueco1328FtHyv+7uo9zxi3Pfd2Ky50z
p++i6xPXP+P6bcuXr4MuE9PfwYLaP0P9HdovPNjQ38Hw9M9AK2b+O7X3libK
n2H2jN7fVMdE+rudP2Nr7+RmOwdGZ7wn4u+C5M+Q+7WXRj+m3vtq57/rfHrO
3ur8d5ybkN/xeqnB00/E+dVWqjlHgGOKuWBo72B3nT/D/HecW4Hh8bvCNZMf
ff6Mr0O5vtr9lXRf3885Q7vuvhsGyUtrhzrn3PLY+2e3l14X3eacOX0XXWec
e5d8/O/vXb99+fJ1wAX2M/H57/BmkN+Hh+zI/EiwO+dXuX8V/m1ox9TfqS83
MfH5M8x/p/ZO7qWXRu801TOr2nuu/S3J+Jv/TlY239uzrHxcvb9Jz9PyGkFV
1TwPwW2t8DXWVU0PPPMj9Qwr9HfOrzJ/xt7fNMzk3t+EayXB/iavv/s6lGvl
n9Y4Z+fS0t3W95X7N4x3zrvlrb9aPso5b9bpM1kOa9BSKlStISk1a0vNlt2k
8XHL4u7T7JwtktZrglRKrSsVKleVak3aSaNjrs7zceuPmpH9uBlSodovpEKV
w6RK/eaSPuyMuPukDz8z+zHTJaV6LanddXTc15r8crVUrtNQmp5xk/NjVNie
f99O129fvnwdVJmY/g52h6aL/EhovGB4eDYGhwwJPZj5kcyO5N5Qzq8yf8be
3wSOt/c3UbPmDKjeacrZUK2B66wZzeCJsmTyK837dnYkH0PvjNI6PM8zmD3D
58/XVMNE5ym1w2PAGQDuX+W1ilYmmv/FORDnCuh/p/6O3wHOpeBnAr/jHAvs
Dv3d+999HVS9++67eA+Ql156qVQ8TmFq77690v/mLOfcXJq643U95dqNU50z
b3nqB9dc6Jw1qzfvKOlDTwt4vNH0K6VmRhepVLueND3zlojx+04N+B5M3uiY
xfKLNr0Dls+LrRtOnCP1R8+QxsculcYnrJS6A44VU6GiNBgXe81Nf7U+OBeo
N/JsaThlQXDuUH/s+ep5dQp+nuvjcyDdefZ9suenn0vs/cqXr6IuE+XPTAr5
cJyJvO9DQ35k/jvzyZk/k2kidsct81U4uwp+p3eGTEuPSU0Tn8FYVTEyWZ1c
b0xijk/E3wXJn9HfY/voqbVTf9fXAnQOvN49Vd1E+5vsGVbOrlJ/5w4nMDy4
HedAHU3u/Bnq71km4nd44HF+xfzIva7/fspzffrpp3LaaadJRkaGVKtWTerX
ry+9evWS5cuXy/ffF/+11+uuu07S0tIKdL/sv4WcrlWrlnTq1Ek2btyY7/fu
27cveJ0//fRT8O/HHnsseIx///vfhXqu9uOURG16c4tzXi6tPWfLdPl5Vjvn
7Fse+ujf3eCcNe0GV+O/04ZHXxL8G9p7pVp1AobnfZr9+vZAV08ffFKhHvuw
+i0krce4GN9PvkxSaqXlfA3nBHX6xWZ56404K/s8oqvzY3EwvfGF90vs/cqX
r6KsMH9mt4npudzfNCZkReZHDjDRDifmz4A16ftoE7adP0P9nfnvqSHbknWp
V+vdTWR3rXvrPEdbX7f5uyD5MynWfbQvx35MfR6hd6+yye98PdzfRO87m/6Z
RiZidzR8R8yPxDkRjm3PsKm/w79Edtf7m3DNxPN7MdXbb78tDRo0kDZt2sgt
t9wiu3btkldeeUVuv/12GTp0qNx5551Jv/fHH38skudQGH6vXbt2wM/oN998
U84991ypVKmSvP7660m/b+/e3H8+B8rvLmrM5qOcc3Jp7lM2T5b/XtLBOf+W
5d5zZT/njJmoG5+wIvjvFDp78O8TV8X+PW1h3P3A17XaH1Ggx8Q5QIMJswIf
TYPxF8fOE07/faDp43GbnnajVE6rH2jzsY8bSpOT1jo/FgfTI5c87vptzJev
AyrF79BymT8zzkQMT36nf4b5hmBN8Dv0Y+ZHgkfp725gIv2dLMv5VT27Sn5n
Do3NyeR36u7G5OZ4m7/z43c9v2pnv7O17k4fT4p6fnzOzL9k9gw1eLxO6u/M
fye/6/lV+t/bmyh/pkd4rHHcqb/jXAp+JmjvOMcCuwfzq67/hsprDR48WBo3
bizfffddwq/ruYPs30OgyY8cOVJq1qwpF154YfD5u+66K9DBod03b95cLr74
4jh9+oorrpD27dsH34OfddJJJ8m3334bfI0crfuiiy5K+FwScT5mW6pUqSK3
3nprzueaNWsmc+bMkalTpwa8P2XKlDjfCz/Wjfui7rvvvuDaA35O3bp1Zdiw
YfK3v/0t57Ft/wyf/yOPPCKdO3eWGjVqSI8ePfI8nyhMPfnRU875uCz0hI1j
5bMrujnn4LLaL609wzljJuJscHm1xm1zPtdw0u+C/96anHxt3H1TOwyS6s0O
z/Pxmp6xIZvZq4upWElMpSqSnnVq3Nfhr6mS3jTgdfjr8blamQMCrw30f3jm
q6Q3kXojz3F+bA6k//xB6dcqfPmyK5xfhX9masiEyCbk/Cr1d+a/k9/1/Cr9
7xkmyp9poliV+nuaiWY77R1O9JHr2VU7/4VNzk7G3/nlR9rauy47/13/XGbP
6N1NzMzRDE9+R3N2FbcNTMTumBGgBo/zHnpo7Px3HHPmz4DdkenJ/avMj/ze
z68WfX355ZdSoUIFmTdvXoHun/17CLw1a9euDXT79957T+6///6AkdetWxd8
7sEHHwz4GQzPWrRokWzdulXeeecdefTRR6V169YBw6OgjV955ZVxujrZ3i6b
3+FlufbaawN+14yNn4/HW7Bggbz11ltBa+7G98Fzg3+/8cYbwc/8+uuvg+/F
dQd8Ddo+7jtixAjJzMwU5h8l4/du3brJtm3bZOfOndK7d2/p2bNnIX4Tyeuk
h37lnI3LSg+5Zai8uby/cxYui33BVauc86XdqR2HBt73Jiddk5vfT7nO4veB
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
mOuTTz6RU089NfB8I8sFWji4FfktmqVNAn5HgeGhwyM7EXyN7121alXO1xcu
XBjMs+Lr8LqA4Y3FvL/85S8Ddjb55EcapclhdrVVq1ZyySWXBJkyrILwO2r2
7NnBOQo4nvmRDz/8cOChwWN36NAhyJQxDvh9xB1jnXNveeoxt4+Rj6/s6ZyX
S1vfu+Zi5zzpu2TbZ8H7KksV6u97TJT/fpSJ/DPwv2eFDMn8GervnF/V+jv3
N9E/w/wZeGjofecOJ857Mgee+e+2B578TnbXGTGJ+Lug+ZF6/tW+1T56nfuu
fT0816hmIt87ve/00KSGrz09vNX5kRkmyp/BsSO/U3/HsYb+jrkD7L+l/x2/
G2jwONfCOdcezWe+fJXneu3Lnc55tzz2gJuHyK6VA50zc2nq8fNudM6Tvku+
P/yX99D4KjuVzYA/hSw4MexxIS9mmZjuC4bsZ+LzI3X+DOcwW5hIf2f2O/NX
6H8H0zKnRWvX2lNODb6CiThea+J6RtXm74Jk0Njfy+/T36+5XWfS04+vd8Zq
L5DOkKxrohlW6u+4LtEsPFbce4Xzn8PD5nwB51fB7lkmpr3D0wR+x++H/P6D
678fX75KqhbvWOqcdctr97jhCHl8/Rjn3FwaevdV/Z1zpG83vfrxt1y/zfny
VeAy0f4m5r/r+VXw4yAT6e/dQ8akXszsSHBocxPlR3J+lR54cCx1aZ3VonMY
9cwqP05RtzonMhl/FzT7XXO+nmfVWj/97zoDR18fYHYk82d4bkLtPRG/NzTR
/CqPG2aAwe7MnoFHifo79zcxP5L57/hd4Xfm96/6OmRq1KZxzjm3PDcy9W+5
bZJzfnbdO645yzlH+nbTo5c+kf8bkS9fpaDC/avMn0GT36G/J+J35KNwfpXZ
79SRmR/Z1MTvXoX2Xls1/TPUq5k9U93Ea9yJ+N2Y3B4azd957Vc11te11q7P
CxLNrjJ3hrfaP0MfPHN16KGpY6IZVvA7tffmYbc2UXYk8yMxW4BrHGD4/ibK
j8QswhgT5c/k+Gdc/w358lUS9fbX7zjn20Olr9g8XfaXAo521TOuLH07V32X
TLeYcad8/G8fC+GrbJSJ5lfR5PdRITOCHel/72Mi/wz9HtCO9f4mzmeCV6E1
Mz+SrTNa6J/RLEx+p+9da+J2jmQy/k62n9WY3Jnx9n35df4c+mYqqY+pwTP7
na+jhok8/ny91N+pwev8yAwTzQ/gOOJ6Rtfw+OJY6/1NzI9k/jv09+nG87uv
Q6TWvHKtc649lPrsLVNlz5xM5yxd0r1vfhfJmLHZOUf6dtdrnvAeGl9lo0zM
PzMlZELOr44JmZH6O/zv3N1E/R3MCd2Y2TPU3hubaAcr9xcxP5L579pDw9nV
KtatZmiyup0dmRerJypbu7d3t2rtnffV/netw/O8Q19L0BnwddTr1/tXOb+K
bmci/wxmCnB8ye845tDgs0zkf6f+jsb1kh/8/lVfh0L5nU0l31M3HSX/nt/Z
OVOXZL+z5jjn/OjbbR+5bLvrtztfvgpUJn7/KvR3zq+C37m/Se9f5fwq+Z3+
GfAoGJ78Dnata+L979Tf6Rmnb4YsTH1bZzdS+9Zzpcn4uyA8n2x+VX+/1vu1
f4a+d3po8Dq4v4nXFX5hov1NnN9tGLY9v4pzH86vMv8d50c6P1L7Z3BuhRlj
7l/d4/c3+Srv9ffv/u6cZQ/VHnnbSHl/cW/nXF1SvXzZQuf86Nttw0Pzj//4
aAhfpb9MtL8JPSHkRO5vGmKi/U29TO751bYmmsPMMDFtuZGJz4/U/hnOdjI7
kr4TvbtJe1U0P2sNPhl/5+V95/20Bs9b3fxZOn+GOjzPKZg7w/MPNtldv2Ze
hwC7U3/n/Cq9M9zf1DU8zmidP8P5Vfxu8DsCv8M/s9v1348vX8Vdt72+0TnH
Hsrdb8MgeWltlnO2Lu7ePydTul6w0Tk/+nbfW1760PXbni9f+ZaJ/DMTQzYc
ZyL/zKCQIeHlgKeD+jvnV5EhSR05I+RT6MsNTXz+jJ5d5e4m3Orsd3rfmctI
jub+JDsHPhF/G1N4Tw33tdr6vj5v4HM7zETXCDTDc3cTNXgyPOd3mR2Jhge+
RXi8cN7DOQLq77zOgWNO/R3nUty/iga/43fm9zf5Kvd13hMXOmfYQ727re8r
D/5+nHPGLs7+cuVY59zou3T0jI1/cv2258tXnhXub/rBxPY3gQe5f5Xzq1km
5p1B9wn5EhkpHU00u9reRH5uaMtgeNv7Dg8Jd5LSJ25r7+R4vXdVZ9DQm54X
f2tvfLLSGfL2/VPUfXgNQGvv9NGwye7c40R21/53+meYQYPj1MpE+numiXaw
8voGjjWOOfNnwO/wNNH/Tn7f7f0zvsp7Db19tHN+9d1DOq3rKes2TnXO2cXV
d6+e7ZwbfZeO7n/5I67f9nz5yrdMzD8zOWzq79r/Tv8MtXfcguGpv4NBmR1J
/wwz4Jk/U9dEu1eZs8jZVTA8tW09u0qvCnVwauxk+kT8nR+7a4+N1uzpl9G7
orSHRnvxye30ztAHRP8Mmucq9L/TU9QkPEY4VuD3Nibyv3cx8ftXob+D4fE7
wO8C+rvOj4T/fa+fX/VVnuuLH750zq2+4/uSzdPl51ntnPN2UfeYSzc450bf
pac//8bHu/kqvRXq75hf1f6ZMSErDjOR/31AyJTMR4FWDH5vbyL/eysTv3+1
fsivZPg0E58fydyW6ibeP0NW5gwp9W/N1Mn4uyD7VzW/23nxFa3P68xKe38T
NXiei2j9Pc1E/hnwO7X3xiae33H9ItNEGTR6/yr9M/gd4Hdh728K9q96/d1X
ea6H/t8jznnVd+7+1ZbJ8v0lHZwzd1H1D1cPdM6LvktX/9/LH7t++/PlK88y
0fyq1t/B7/TPgN+Z/97dxPM7Gvpxhsm9f5X+mfSQZ+39TfSO00Oj9Xc9x0o2
pwav+d3m74LsX2XZe5zsHU56fray1YepZnYkM2j4GtPC11/fxF+TgL8I/M5z
nkwTza92M/H+Ge1/Z/47/O/U33d7/d1Xea4Fzy10zqq+E/fEO8bJ5wu6Omfv
ouhn1p7tnBd9l66+YMvLrt/+fPnKs0xMf4f/Hfo7vBngd7A7NN+skB/pfwdb
IiMF/A69uK2JMmgyTIzfNatq/zvz3zm7Cu7l/iPubqKmTWa3s9eNidfcbf7O
j9/J/NpLr/Ns9NyqzpDUu5v0/ib638nwnGHV3pn0sPXsKtmd/I7uEh7bHiba
30T9nfyO343e3+T9777KdU3+v+nOOTVZZ8xoJ7U7pEnltCp4H5Xmv2qV87UO
a7pLvaENpVrjGlKhasXgPnV6pku7hZ3yfMwmx7YIHsvuzFXdcu7T9IQMqVy3
ilSqVUnqDWkY9/1tL+soh9WvJpnLu5bIMci6dbi8vayfc/4+2P71orXOedF3
6eohi7a6fvvz5SvPMjH9nfnvYENovNDf4YFH9gzZvU/Ilj1CzqT2Tv87WLRp
yKjc30T9nfxOhuf+Jp0DTzamj4YeGj1Tqj0tifjbmLwZXjO+zopk2R4dfe6Q
YuL9M1qDt/Mja5ko+x76O+ZX6X/HOU7z8HjBN2PPr9L/juOt96+C4bV/JtDf
Xf/9+PJVXLX7p93S+frezjk9Wbc4s43UH95Imp3aKhe/Zy7rKrXa1ZZmJ7eU
NpceLi1ntpeaLWpJjWY18+X3lBop0u7KznHNr7e/uotUqFJBmp3UUlpe0F4q
pVaSFme0zvl6amZa8HxK8jj0vnGAPHvdCOcMfqD984Ju0mLGFue86Lt0NXLg
v/qvj3jzVXrLxPJn7PzIEWFnhQzZ30T+d2jw0N47mEiD1/Or9L/T+04NXntL
6H1n5oydH5lIeydba/+6zd/5+d/t3En9uUSzrPyZ+rnwOTIzh9zOcxLq71qD
p4eG+Zo837H9M11MxO/Q35lBo/0zzH/HNRM/YOOr3Nbzn+5wzugFbWPxe6IG
b+N+bS9PrsGT3/N6jMq1q+T8O61rXWk4vknwcdMTM6R2xzpOXn+X7POsu24+
yjmLH0i/vfYE56zou3T2g6994vpt0JevpGVi+e/wYhwdsiH1dz2/2i9kSmTP
gN+Z/277Z5qYiN8bhPxq+2eY/64zaKqbSNcmI+v5VTsfJi/+zk9/NybS1+29
T9q3Y+9/pX9GZ8Ezf4aeIHSqia411Asb+juvTTRRx4v7m3Ae1DE8tjjGfU3s
uOP6h+2fgf+d+rvPn/FVbmvNK9c65/Ki5PeMs9tK9rtNnt6WwD9T0UiV9KpS
uU6VwJ/T6uLMnK+3X9pVUqqnBJ9rv6SLVK1XVVqc1Sb4GL6ZvM4NSqJX3DHN
OY8Xtq9edqVzTvRdOnv23a+6fhv05SthqfwZaLmcXx0bsiJyC7NMzINNhoc2
3CVsej+QgQg/N/T3ZopTmXlu+2foF9f5M9VMNL+aaOepzpLMi78LuoOV9030
OLrtGdZK6nnS/65nWMnv1N71DC8zJJubyD/TLmzwO+dXcYx7hccb2jv4Xe9f
xXWSHP+7678hX76Kq055+AznXF5U/A7/OrwzdXqk5/k48NnA395qVmbgr0/r
Ujfwz7eZd3jOffBz4KsHr9cf2Sj4XJ3e9aTR0c2C76netKZUa1Rdmp1Ssj4a
9oVbpsmPs8tGvuT+uZnS8fw7nHOi79LZwxc/5vpt0JevpGVi/hn638nv9L+D
G8Hv8GL3NlG+If0z6NZhZ5gYv5Pd65soQ1Jnz6SaeP87s2e0t1w351ZTrNtE
/J3fDKt9vwrW1+xZVn0eoX0+dv4Mm/4Zvl7OruJ4YCaA/hkcK+a/k+FxTYP5
MzjW0OD1/iawO/V3nz/jq1wX/q773DTIOZcXBb9jlhW+lurZ/F7YudIO13SX
6k1qSvqA+knvk3FOW6nZvJZkruwWzMlm/LZd4LmHD6f94i5OjseJm4+Wb+Z1
dM7n+fXnq8Y7Z0TfpbdbnnuX/LjPZ0T4Kp1lYvo7WFD7Z6i/Q/uFBxv6Oxie
/hloxcx/p/be0kT5M8ye0fub6phIf7fzZ2ztndxs58DojPdE/F2Q/Blyv/bS
6MfUe1/t/HedT8/ZW53/jnMT8jteLzV4+ok4v9pKNecIcEwxFwztHeyu82eY
/45zKzA8fle4ZvKjz5/xVR7r7X+/45zJi4LfA3bvVCdgcHhcDuSx6/apF8yl
Jvpa5upugdbe6qJMaT27QzDPyq+B6Zuf3vqAfmZR9Njbj5RPF/Vwzuh59abV
c50zou/S3W/+/T+u3w59+cpVYD8Tn/8Obwb5fXjIjsyPBLtzfpX7V+HfhnZM
/Z36chMTnz/D/Hdq7+Reemn0TlM9s6q959rfkoy/+e9kZfO9PcvKx9X7m/Q8
La8RVFXN8xDc1gpfY13V9MAzP1LPsEJ/5/wq82fs/U3DTO79TbhWEuxv8vq7
r/JYG1/f5JzJD5bfye7g6wPVwTtc2z3gcPhjEn0d+Tf1BjcIPoYnHpmS/BrO
GfLz5Bd3D7w5S/6ycqBzTk/Ww+fe5JwPfZfuvucVv8fJV+ksE9Pfwe7QdJEf
CY0XDA/PxuCQIaEHMz+S2ZHcG8r5VebP2PubwPH2/iZq1pwB1TtNORuqNXCd
NaMZPFGWTH6led/OjuRj6J1RWofneQazZ/j8+ZpqmOg8pXZ4DDgDwP2rvFbR
ykTzvzgH4lwB/e/U3/E7wLkU/Ezgd5xjgd2hv3v/u69yWbP+MNc5k+fXmSu6
BsyMzv5vURpNbBp8jBnSDmtjnhnktMPLrrMgO6yJstyRCV9vWJTh3mBU42Ae
te38jsFjgduz33mC3Bn757ee2yGW9b4y9njw2EN/bzy9RZApWaFyhXzz5kui
e95whGxfP9o5q9v9/ZLBztnQd+nvxQ+/7vrt0JevhGWi/JlJIR+OM5H3fWjI
j8x/Zz4582cyTcTuuGW+CmdXwe/0zpBp6TGpaeIzGKsqRiark+uNSczxifi7
IPkz+ntsHz21durv+lqAzoHXu6eqm2h/kz3DytlV6u/c4QSGB7fjHKijyZ0/
Q/09y0T8Dg88zq+YH+nDaX2Vyzr+gZOcc2d+Dd+5SbBrqU6v9GCPUqKvofF9
fIxftE4N7s9/1xvUIMieAXuDxVPbpwUzrfbPhi7/i4xUaX5GvD8G/w6ya2pX
CTje9TFid17XW267dZJzZtf99NpznLOh79Lfp214wfXboS9fuSrMn9ltYnou
9zeNCVmR+ZEDTLTDifkzYE36PtqEbefPUH9n/ntqyLZkXerVencT2V3r3jrP
0dbXbf4uSP5MinUf7cuxH1OfR+jdq2zyO18P9zfR+86mf6aRidgdDd8R8yNx
ToRj2zNs6u/wL5Hd9f4mXDPx/O6rXNbQ20c7Z07fRd+LNk+X/aWA3dGnL/Q7
V33n31lX+gwaX6WvFL9Dy2X+zDgTMTz5nf4Z5huCNcHv0I+ZHwkepb+7gYn0
d7Is51f17Cr5nTk0NieT36m7G5Ob423+zo/f9fyqnf3O1ro7fTwp6vnxOTP/
ktkz1ODxOqm/M/+d/K7nV+l/b2+i/Jke4bHGcaf+jnMp+JmgveMcC+wezK+6
/hvy5auoa9/+fYFe65o1fRdPn7NlmuyZk+mU3X9e0N3vXPVdoG49827Zv9/P
mfkqXRXOr8I/MzVkQmQTcn6V+jvz38nven6V/vcME+XPNFGsSv09zUSznfYO
J/rI9eyqnf/CJmcn4+/88iNt7V2Xnf+ufy6zZ/TuJmbmaIYnv6M5u4rbBiZi
d8wIUIPHeQ89NHb+O44582fA7sj05P5V5kd+7+dXfZW3+vjbT5wzpu/i7Wmb
jpKv5ndyxu9vrP2lcy70XXb6/S//6/pt0ZevXGVi86vwz8CTQX4fEXZWyJHw
cvQOuRIeePpndPZMhonPf29oovwZMCwZnntKmTtD77vOjkwx8TmS1L+pxyfj
7/z4Xd/XqMfV7K4zJrV/ht58fszzDs7i4pa+d+19xzFopLqJic53cPyYo0/9
Hcc3kX+G86vgd2jwwfyqz4/0Vd7quU9fcM6Xvou/R942Sj64qpcTfl+0dLFz
JvRddvqRXZ+6flv05StXmSg/Ev4ZZJuA4bm/ifo7vBzc3wTtHVox/e9g0FYm
0t+hvSfyz3B+lXubqL2T43WGpN7dpD0s+fF3fuxua/e2fq93rdrnEPxY+2f0
/ia9fxXnKWR4nLsw/x3eImjvGSbeP4MGv/cIm/nvYPcsE+1fxbmV9s/4/U2+
yl1tenOLc7b0XTJ9xE2D5c9rhpQou++/pINkzvQ7V30XvFdue9P126IvX7nK
RPub9P5VaO/0z0B/Z/47M+D1/ib4ZziPCTZlxgp4lTOszI6kt4T+Gb2/Sc+G
ar2d7Kw18WT8rXPhk5Xtneet/Tg6h0bvltLnGpxfpf8d/6YGX1e9flyLoP6u
/TOc/aX+TobHuRL5nfo7/TPgd/yu8Dvz86u+yl0teXG5c670XXLdfX1fefjG
sSXG7/9YNdE5D/ouW/3rW190/bboy1dcqflV+t/Hhg1WBMND96X/nfq79s+0
N1GWOW6ZkUi9mftXucOJ/M7sGc6vsjkjqr3mOo/GmMQ6vObv/PIjE8276vwa
+1yhsnVbNfyY/K79Mzr7nbmZuCW/c/8qve+tw+OI44kMGmTr4zhr/0yWieVH
Qn/HXDH4HddJAn73/hlf5a3OfeIC50zpu2S707qecsPtU0qE329fdYlzHvRd
tnr00idcvy368hVXIb9r/ww88GNDVgS/Q/vtbyJ+5/7VziFvwjsD/R0aMnTl
puGt9s/QQ0PvTC0TzXuyqWlDy9Y+eD1LmmLi50sT8bcx0ZxrotKMn2L92967
yswbrcEfpm75XHkNga+NHpo66vWT35mtmREeM+5ugv6OaxrM18esMDw05Hec
R+GcCt4mzq/CP/O9678hXyVTP/30kzz88MOyYsUK+eabb4LPffzxx/Ltt986
fmZFX1PvPc45T/p20/M2T5N9s9oVn3cmu4fMudk5D/ouW91r3kOu3xZ9+cpV
Jsp/BxPq/PfhITtq/R26MP3v1OChIbcKmbS5ifJn6qlmnmKaieZXoVfTh6Jv
7dwXrb9rnTwRf+fngU8046r53969iq6iPqez38ntOs+eGTt8rXz9zJ+h/o5j
RQ2e+jv3N9E/w/wZ7tFifiTz3/3+pkOk3nvvPWnTpo3UrFlTKlWqJG+//Xbw
+dNPP11OPPFEx8+u6GvgLcOcc6Rvd336liny/SUdioXfv12S5ZwFfZe9bnfB
/7l+W/TlK65C/X2PifLfjzKRfwb+96yQIZk/Q/2d86taf+f+JvpnmD8DDw29
79zhxHlP5sAz/932wJPfye46IyYRfxc0P1LPv9q32kevc9+1r4fnGtVM5Hun
950emtTwtaeHtzo/MsNE+TM4duR36u841tDfMXeA/bf0v+N3Aw0e51o459qz
b98+139Gvoq5Ro0aJZMnT5a9e/dKampqDr9v27ZNWrZs6fjZFW3t2bdHOl7X
0zlD+nbbR98xXr5Y0KXI+X372hnOWdB32ezdP/7s+u3Rl6+4ymbAn0IWnBj2
uJAXs0xM9wVD9jPx+ZE6f4ZzmC1MpL8z+535K/S/g2mZ06K1a+0ppwZfwUQc
rzVxPaNq83dBMmjs7+X36e/X3K4z6enH1ztjtRdIZ0jWNdEMK/V3XJdoFh4r
7r3C+c/hYXO+gPOrYPcsE9Pe4WkCv+P3Q37/wfXfj6/ir/T0dHn99deDjzW/
v/vuu1KjRg2XT63I692v33XOjr5LR2fdOlzeXtavSPn9pMuvdc6Bvstmf/Rv
b1f1VbrKRPubmP+u51fBj4NMpL93DxmTejGzI8GhzU2UH8n5VXrgwbHUpXVW
i85h1DOr/DhF3eqcyGT8XdDsd835ep5Va/30v+sMHH19gNmRzJ/huQm190T8
3tBE86s8bpgBBrszewYeJerv3N/E/Ejmv+N3hd+Z3796CFSdOnVk586dwcea
37dv3y7169d3+dSKvJ786Cnn3Oi79HTvDQPk+WuHFQm7/3h5D+cM6Lvs9qsf
feX67dGXr5wK968yfwZNfof+nojfkY/C+VVmv1NHZn5kUxO/exXae23V9M9Q
r2b2THUTr3En4ndjcntoNH/ntV/VWF/XWrs+L0g0u8rcGd5q/wx98MzVoYem
jolmWMHv1N6bh93aRNmRzI/EbAGucYDh+5soPxKzCGNMlD+T459x/Tfkq/hr
/Pjxcvzxxwcfg9/feeedYG61f//+Mm3aNMfPrmjr1r/e7pwZfZeu7np9H7nn
pgkHze9/XXuycwb0XXZ72xufuX579OUrrkw0v4omv48KmRHsSP97HxP5Z+j3
gHas9zdxPhO8Cq2Z+ZFsndFC/4xmYfI7fe9aE7dzJJPxd7L9rMbkzoy378uv
8+fQN1PJxO9vqmKi7He+jhom8vjz9VJ/pwav8yMzTDQ/gOOI6xldw+OLY633
NzE/kvnv0N+nG8/vh0QhZ6ZVq1bStm1bqVy5snTv3j3w1LRu3Vo++6x8/T/l
mlfXOedF36WvMROx+o5pB8XvC5Yscc6Avstub3rxfddvj758xZWJ+WemhEzI
+dUxITNSf4f/nbubqL+DOaEbM3uG2ntjE+1g5f4i5kcy/117aDi7WsW61QxN
VrezI/Ni9URla/f27latvfO+2v+udXied+hrCToDvo56/Xr/KudX0e1M5J/B
TAGOL/kdxxwafJaJ/O/U39G4XvKD3796aNQPP/wga9eulVNOOUVOOukkWb16
dfC58lbL/7TKOSv6Lr198ZZp8uPswudL7r/0cGk/c5NzBvRddnvt9r+5fnv0
5SuuTPz+VejvnF8Fv3N/k96/yvlV8jv9M+BRMDz5Hexa18T736m/0zNO3wxZ
mPq2zm6k9q3nSpPxd0F4Ptn8qv5+rfdr/wx97/TQ4HVwfxOvK/zCRPubOL/b
MGx7fhXnPpxfZf47zo90fqT2z+DcCjPG3L+6x+9v8lWeavGOpc4Z0Xfp7l9u
niTfZvN4Yfj901VHO+c/32W7L7t/p+u3R1++4spE+5vQE0JO5P6mISba39TL
5J5fbWuiOcwME9OWG5n4/Ejtn+FsJ7Mj6TvRu5u0V0Xzs9bgk/F3Xt533k9r
8LzVzZ+l82eow/OcgrkzPP9gk931a+Z1CLA79XfOr9I7w/1NXcPjjNb5M5xf
xe8GvyPwO/wzu13//fgq/rr++uvz7PJUC55b6JwPfZf+HrdxrPx9YfcC8/tN
K3/nnP98l+2esfEl12+PvnzFlYn8MxNDNhxnIv/MoJAh4eWAp4P6O+dXkSFJ
HTkj5FPoyw1NfP6Mnl3l7ibc6ux3et+Zy0iO5v4kOwc+EX8bU3hPDfe12vq+
Pm/gczvMRNcINMNzdxM1eDI853eZHYmGB75FeLxw3sM5AurvvM6BY079HedS
3L+KBr/jd+b3Nx0ClZaWFte1atWSChUqSLVq1YJsmvJUc5+e55wNfZeNHnTL
UPnrigH5e2dmtZMBs25xzn++y3afuP4Z12+PvnzlVLi/6QcT298EHuT+Vc6v
ZpmYdwbdJ+RLZKR0NNHsansT+bmhLYPhbe87PCTcSUqfuK29k+P13lWdQUNv
el78rb3xyUpnyNv3T1H34TUArb3TR8Mmu3OPE9ld+9/pn2EGDY5TKxPp75km
2sHK6xs41jjmzJ8Bv8PTRP87+X23988cmvXmm2/KgAED5P7773f9VIq0Lnxy
lnMu9F12uteN/eWp60flye/fLB3mnP18l/0ev+JJ12+PvnzFlYn5ZyaHTf1d
+9/pn6H2jlswPPV3MCizI+mfYQY882fqmmj3KnMWObsKhqe2rWdX6VWhDk6N
nUyfiL/zY3ftsdGaPf0yeleU9tBoLz65nd4Z+oDon0HzXIX+d3qKmoTHCMcK
/N7GRP73LiZ+/yr0dzA8fgf4XUB/1/mR8L/v9fOrh249//zzQQZNearfPj7T
ORP6LlvdeV1vueOWo5Py+7a15zlnP99lv8csfcL126MvXzkV6u+YX9X+mTEh
Kw4zkf99QMiUzEeBVgx+b28i/3srE79/tX7Ir2T4NBOfH8ncluom3j9DVuYM
KfVvzdTJ+Lsg+1c1v9t58RWtz+vMSnt/EzV4noto/T3NRP4Z8Du198Ymnt9x
/SLTRBk0ev8q/TP4HeB3Ye9vCvavev390K0XX3wxyIMvT3Xmo79xzoO+y2Yv
3jQ9Ib+fsGCdc/bzXfZ75JLHXb89+vIVVyaaX9X6O/id/hnwO/Pfu5t4fkdD
P84wufev0j+THvKsvb+J3nF6aLT+rudYyebU4DW/2/xdkP2rLHuPk73DSc/P
Vrb6MNXMjmQGDV9jWvj665v4axLwF4Hfec6TaaL51W4m3j+j/e/Mf4f/nfr7
bq+/l/+6884743rLli2yfPlyadeunQwZMsT10yvSOuXhM5xzoO+y2zO2TJO9
c9pHO1cX9nLOfb7LR49YvM3126MvX3FlYvo7/O/Q3+HNAL+D3aH5ZoX8SP87
2BIZKeB36MVtTZRBk2Fi/K5ZVfvfmf/O2VVwL/cfcXcTNW0yu529bky85m7z
d378TubXXnqdZ6PnVnWGpN7dpPc30f9OhucMq/bOpIetZ1fJ7uR3dJfw2PYw
0f4m6u/kd/xu9P4m738/BAqzqrorVqwoDRo0kIkTJ8onn3zi+ukVaR3/wEnO
GdB32e5jNk2Ur37XKeD3nWtPdc59vstHZ135mOu3R1++4srE9Hfmv4MNofFC
f4cHHtkzZPc+IVv2CDmT2jv972DRpiGjcn8T9XfyOxme+5t0DjzZmD4aemj0
TKn2tCTib2PyZnjN+DorkmV7dPS5Q4qJ989oDd7Oj6xloux76O+YX6X/Hec4
zcPjBd+MPb9K/zuOt96/CobX/plAf3f99+PLV1HW1HuPc85/vst+j759tHx4
VS+59OplzrnPd/nowQu3un579OUrrkwsf8bOjxwRdlbIkP1N5H+HBg/tvYOJ
NHg9v0r/O73v1OC1t4Ted2bO2PmRibR3srX2r9v8nZ//3c6d1J9LNMvKn6mf
C58jM3PI7Twnof6uNXh6aJivyfMd2z/TxUT8Dv2dGTTaP8P8d1wz2eP678eX
r6Kso+6a4pz9fJeN7nFNbxm1ZpAct3KEzFgyTi5bNElWzZ8qt8yeLveeN13u
XzBLlt6zWU594ikZ88ROGfP4a759H3Cf+PTrrt8effmKKxPLf4cX4+iQDam/
6/nVfiFTInsG/M78d9s/08RE/N4g5FfbP8P8d51BU91EujYZWc+v2vkwefF3
fvq7MZG+bu990r4de/8r/TM6C575M/QEoVNNdK2hXtjQ33ltook6XtzfhPOg
juGxxTHua2LHHdc/bP8M/O/U333+TDmtM888s8BdnmrM5qOcc6HvkuvO1/aU
oWsGyrRVw+XXS8fKpVdNlGULpsjv50yTu86fLo+cPU3+cMpk2TH9KHllwhjZ
OXSo7OrbT3Z16iI722Um7Rcmn57N8bfL86vvk7vuulju/sOxcvkLa2TqC3+Q
9o//SZo9+qJv34Xq/s/scv326MtXTqn8GWi5nF8dG7IicguzTMyDTYaHNtwl
bHo/kIEIPzf092aKU5l5bvtn6BfX+TPVTDS/mmjnqc6SzIu/C7qDlfdN9Di6
7RnWSup50v+uZ1jJ79Te9QwvMySbm8g/0y5s8DvnV3GMe4XHG9o7+F3vX8V1
khz/u+u/IV/FU/369StQH3HEEa6fapHW8I1HOmdK34Xrjtf2kIHXHCFHrxoq
py8bI7MXT5SrL58s6y+ZJpsvnC4PnTNdnvrVFHn+uIny8sSxsnPEcNnVv7/s
6totm7U75MnhB9LPH3uurPjVw3Lr3JXyypV3ykNr75TLLrtYnth+ijzyaC95
eGsfuf6Pv5UZO+6SwX90z4W+y0YPetbzu6/SVSbmn6H/nfxO/zu4EfwOL3Zv
E+Ub0j+Dbh12honxO9m9vokyJHX2TKqJ978ze0Z7y3VzbjXFuk3E3/nNsNr3
q2B9zZ5l1ecR2udj58+w6Z/h6+XsKo4HZgLon8GxYv47GR7XNJg/g2MNDV7v
bwK7U3/3+TO+ymV5fnfXfa/pK+NWD5GTV4yWCxaPl0ULJ8u186bJxoumywMz
psvjp0+V5044Wv48eby8NnqE7Bo4SHZ17yk72x9e5Ax+oP3sSbNl+SkPyZIT
H5QNF86S+y64TN4/d6usW3GNXHTRRbJhwyzZvn1UwPHsux4fLVc+v1yOeeFJ
6fCE1+Z9J+4hz/7F9dujL19xZWL6O1hQ+2eov0P7hQcb+jsYnv4ZaMXMf6f2
3tJE+TPMntH7m+qYSH+382ds7Z3cbOfA6Iz3RPxdkPwZcr/20ujH1Htf7fx3
nU/P2Vud/45zE/I7Xi81ePqJOL/aSjXnCHBMMRcM7R3srvNnmP+OcyswPH5X
uGbyo8+f8VWeasKdk51zbFlueMJHrxksJ6wYKecuGScLFk2S1fOnyq2zpgWe
8MfOmibP/HKSvDhlvLx65CjZNWSw7OrVW3Z26OicvQ+2nz79cll2Uozd0atO
PlYWZ59rfDDzcXlr9lZZcNllAcPPmXORPLr17OzuE8fx6Ice7S2/f/pMmblj
swx9Zoe0KAXc6Lt09NDn/+r67dGXr5wC+5n4/Hd4M8jvw0N2ZH4k2J3zq9y/
Cv82tGPq79SXm5j4/Bnmv1N7J/fSS6N3muqZVe091/6WZPzNfycrm+/tWVY+
rt7fpOdpeY2gqmqeh+C2Vvga66qmB575kXqGFfo751eZP2Pvbxpmcu9vwrWS
YH+T198PjXruuefkN7/5jUyYMEFGjx4d1+Wppt93gnMGdt1dr+0lw9YMlOkr
R8hvlo6TeVdOlOWXTZENc6YHnvBHfz1NnqYnfDw84Vmyq0/+nvDy3E+dvUyW
nvRgDruvPOMeWTB+eNAfXPGkfDDjMdmx5CG5+OKLA4ZHr1o1S556amIuhtf9
f9uGy9XPXyUnvPC4dNrutflDuUe+4OdXfZWuMjH9HewOTRf5kdB4wfDwbAwO
GRJ6MPMjmR3JvaGcX2X+jL2/CRxv72+iZs0ZUL3TlLOhWgPXWTOawRNlyeRX
mvft7Eg+ht4ZpXV4nmcwe4bPn6+phonOU2qHx4AzANy/ymsVrUw0/4tzIM4V
0P9O/R2/A5xLwc8Efsc5Ftgd+rv3vx8CddNNN0mVKlVk2LBhUrVqVRk+fLi0
bt1a0tLSZNq0aa6fXpFWednfBE/4oLVHyCR4wpePkdlXHSVLLp8iN1wyXTZf
MF0epif8WOUJP+II2dWlm3MWLmv9+LnX5nA7+6aLb87h912L7wn4HX3P2o05
/B7rC+Xe+2bKY9v658nx7Jv/cIpctOM2GfnMC5Lx2EvOmdJ3yfXkP/3N9duj
L19xZaL8mUkhH44zkfd9aMiPzH9nPjnzZzJNxO64Zb4KZ1fB7/TOkGnpMalp
4jMYqypGJquT641JzPGJ+Lsg+TP6e2wfPbV26u/6WoDOgde7p6qbaH+TPcPK
2VXq79zhBIYHt+McqKPJnT9D/T3LRPwODzzOr5gfudf134+v4q/MzExZsmRJ
8HFqaqq8/fbbwez58ccfLxdeeKHjZ1e0dc6285yzt+5+a/vJhNVZcury0XLh
1RPkyismy3XKE76dnvBJ42Ke8AEDZVe30uUJL8/96AUbcrE7+ta5S3P4/eFZ
V+Xw+3vnbZVVS1daDH+RXHnlbNn+5PEFYnj2PY8NkWXPLZCTd2yVbk+WfW0+
7bhTwAOSOmZige7fYPE1YipWkioZreI+X++yZVKpcVOpUCtVag4aJk0feCbn
a03ufDz4WuOb7nH+egvbp+581/Xboy9fORXmz+w2MT2X+5vGhKzI/MgBJtrh
xPwZsCZ9H23CtvNnqL8z/z01ZFuyLvVqvbuJ7K51b53naOvrNn8XJH8mxbqP
9uXYj6nPI/TuVTb5na+H+5vofWfTP9PIROyOhu+I+ZE4J8Kx7Rk29Xf4l8ju
en8Trpl4fj8EqmbNmvLuu7H/d6Snp8srr7wSfLxr165gD2t5qoufmlPkDN7r
2j4yZvVgOXHFKDlvyXi5fOEkWfO7yBO+7cyYJ/xP9IQPHiy7evYqF57w8twP
XbQxIbujbzjvvBx+XzZ9knxw7rYchn/90q0yb968XAyP3rjxYnn8iaGF4nj2
rU+dIHN23CRjn31OWpYxbb7BshskpUEjqdKiZYH4PeDwho2lWpcecfze9OHn
pUJaHUk76UxpuPY2qdS0udQ57bc5X6814sjga65f74H0zNc/cP326MtXTil+
h5bL/JlxJmJ48jv9M8w3BGuC36EfMz8SPEp/dwMT6e9kWc6v6tlV8jtzaGxO
Jr9TdzcmN8fb/J0fv+v5VTv7na11d/p4UtTz43Nm/iWzZ6jB43VSf2f+O/ld
z6/S/97eRPkzPcJjjeNO/R3nUvAzQXvHORbYPZhfdf035Kv4q3HjxjnM3qFD
B9mwYUPw8dNPPy21a9d2+dSKvBY8tzCpJ3z4moFyjPKEr7hsitw0Z7rcPXO6
bKUnfNoEeWXcmJgnvHdf2dWxs3PO9F20/Vr7w+W+WXcnZXf00uMm5/B74IFf
8FQOv6P/uPz+hPyO/t38bIZ//PRsJu99QByPvm/rQFn13KVy+o6HpedTpVub
b3LPk4EmXn/BMqnaoXOB+L3GEYOk9qRjpfaUE+L4vcnGhwMNv+n9Twf/Tj1q
mtQaOS52jrD4GqnSqo00feg556/5QPqydz52/fboy1dOhfOr8M9MDZkQ2YSc
X6X+zvx38rueX6X/PcNE+TNNFKtSf08z0WynvcOJPnI9u2rnv7DJ2cn4O7/8
SFt712Xnv+ufy+wZvbuJmTma4cnvaM6u4raBidgdMwLU4HHeQw+Nnf+OY878
GbA7Mj25f5X5kd/7+dXyWy+99FJwO3HiRLniiiuCj+fOnSv16tWT4447Tpo1
a1bu5ld3bVkvLxx7lLx8FDzhw2RXvyNkV2fvCfcd61czO8lds+7Lk93Xnn1X
HLujX1/8QBy/o+9Ye0tShkevXw9PzZEHzPC6Nz45VebtWC8Tnn9GWm8rXdo8
PC6pRx4dfFwQfq979kVSpXXbbA5/Nhe/N31kh6Skp0u92Qul6X1/kKptM6XO
mecFHhpo+w2W3+D89R5or/7gM9dvj758xZWJza/CPwNPBvl9RNhZIUfCy9E7
5Ep44Omf0dkzGSY+/72hifJnwLBkeO4pZe4Mve86OzLFxOdIUv+mHp+Mv/Pj
d31fox5Xs7vOmNT+GXrz+THPOziLi1v63rX3HcegkeomJjrfwfFjjj71dxzf
RP4Zzq+C36HBB/OrPj+y/FaFChWkU6dOMnv2bPnkk0+Cz+H3PX/+fBkxYkSw
e/Vf//qX42dZtPXl7zc4Z0TfpbNf7dRNNs96KE92R98y+8Zc/L7tkhW5+P2d
87fK0quW5Mnws2dfJI88MkO2PtavSDge/eDWI2TtMxfLWTvul75Pu2X59JmX
SpXmGTl6eX783uj6TZJSp640Wrcp+LfN7+j6V60N+B5+HGjvTR98RmpPOzE4
R4Cnpmq7DoHeX+dX5zhn8sL0bZ9+6frt0ZevuDJRfiT8M8g2AcNzfxP1d3g5
uL8J2ju0YvrfwaCtTKS/Q3tP5J/h/Cr3NlF7J8frDEm9u0l7WPLj7/zY3dbu
bf1e71q1zyH4sfbP6P1Nev8qzlPI8Dh3Yf47vEXQ3jNMvH8GDX7vETbz38Hu
WSbav4pzK+2f8fubynHBHwOdHR6ZGjVqyKRJk2Tr1q2un1ax1tf3P+CcE32X
vn61a0/ZePEj+bJ7MLs658pc/L76+GNz8Tt61/xHg2taeTE8evlyZE1OKTKG
1715+0S5bMc1Mvn5p6Xt4yXntWl8870BizdcfVPO5/Lid/hewOV1zjg353OJ
+D0X82ezfqVGTQKfTpWM1lJ3xqzAZwOffMPVNzvn8oL2g1985frt0ZevuDLR
/ia9fxXaO/0z0N+Z/84MeL2/Cf4ZzmOCTZmxAl7lDCuzI+ktoX9G72/Ss6Fa
byc7a008GX/rXPhkZXvneWs/js6h0bul9LkG51fpf8e/qcHXVa8f1yKov2v/
DGd/qb//f/bOAz6qMnv/L11AgdA7IUjvvUNAVIQFVFBRFEQFC0pPqNJ7VVRQ
UEARFaQpkFDt4Nr1p1hBdtfdta6u/AXUdff957m5T+6Zm5lkkszkDeE9n8/5
TJKZTGZuwvC9zzznOWR4nCuR36m/0z8DfsfvCr8zO796HtTp06f16tWrdfv2
7XXBggV1rVq1HOY4efKk6YcW8Tr1yivGWdF23uq3W3fUGybsDYvd0WtG3ZmO
39EnZxwOyvAH7tuWKb+ztz47Xu/b3yUqHJ+qzXfQD708Vo86uk13fjG6PFo+
cY7jVUeGTFrj8wIFnI/9PnXMrKa7PW7rfq3irOXpmX/PUeecAH6aalsPpHrj
tx92rivZrrMuO/wu41webr/64ynTL4+2bKWVmF+l/72P22BFMDx0X/rfqb9L
/0x95WWZ45IZidSbuX+VO5zI78ye4fwqmzOi0msu82iUCq7DS/7OLD8y2Lyr
zK/xnysU8V0Wcz8mv0v/jMx+Z24mLsnv3L9K73sd9zjieCKDBtn6OM7SPxOv
UvMjob9jrhj8jvdJHH63/pnzqz755BM9duxYXa1aNV2kSBEdHx9v+iFFtM5+
/LFxXrSdd/rt9vF63diksNl98Y279IJBfYPy+7FFu4PyO3r9fY+EzfBz5iTo
g4eGRo3hZT9z4Ao998gKfe2Rw7rBgchq89WePagrr9oY0NDXL+zcw/k4HYvv
fi3d7Uv16qMLV6vhfFx92+F031P2jnG6ZNuOqT/v6WSH33EegM9LtOmgY4bd
YZzLw+1jp06bfnm0ZSutXH6X/hl44Pu4rAh+h/bbSXn8zv2rTV3ehHcG+js0
ZOjK1d1L6Z+hh4bemVLKm/dkU9OGli198HKWtJAKnC8Nxt9KeXOuwUoyfiHf
5/69q8y8kRr8BeKSj5XvIfC50UNTVjx/8juzNWPdY8bdTdDf8Z4G8/UxKwwP
Dfkd51E4p4K3ifOr8M/8YvpvyFbu188//6yXL1+uy5Ur5+jx+al+/+4748xo
O2/0W10u1Q+PTs4Cuz+nH7rnqaDsjj587wMh+f3TCcl6/tx5YTM8esOGRH3g
YK9c4Xj07qR2+uGX7tJjjj6ju7/0uq4ZBUb1+2dKD7hWX9ilR8jbZ+SfgUem
UMXKuuqGnWlfK1yjpi4z6EZdadGDukDJC3WlJWuMc3m4/fWvNu7NVt4q5eW/
gwll/vslLjtK/R26MP3v1OChIce5TFpTefkzFUQzTzFGefOr0KvpQ5GX/twX
qb9LnTwYf2fmgQ824yr53797FV1UfE1mv5PbZZ49M3b4XPn8mT9D/R3Hiho8
9Xfub6J/hvkz3KPF/Ejmv9v9TedZ7du3Tw8cOFCXKlXK8cTDG//SSy+ZflgR
rf/997/6vQZ299H53m/26KcfGpU1dk/1vj8Ukt9XD7s5JL+j35q7WycmJmaJ
4adNS9DJ+27Xe3OQNZnd3rr/Ur3gyGJ9/ZEDutHByGjzfn6/qNslzteyw+8l
O3ZLN6MKXkcmfIEyMc5Mq2kmD7fj9v1Zn6uzZsnJqe97/PDDD6Yfiq0Ilqu/
n1Ve/nt/5fln4H+PdxmS+TPU3zm/KvV37m+if4b5M/DQ0PvOHU6c92QOPPPf
/R548jvZXWbEBOPvcPMj5fyr/1L66GXuu/T18FyjuPJ87/S+00NT2n3u5d1L
mR8Zq7z8GRw78jv1dxxr6O+YO8D+W/rf8buBBo9zLZxznf3jjz9M/xnZimJ9
+eWXTv4MPO/Io2nTpo1+8MEH9alT+deLeaxrd+P8aNtcv9H7Gv3AnVnxzIjs
mcSZIfnd8cBPO5Qhw+++/5ks8Tv7wQcn6cOH++U6w6dp8yn96Iu36glHN+le
Lx/VtfIA8+anbv/Sezl6TfvnP/+phwwZ4vgeixUr5uzd69q1q5NREMnCjNRt
t90W8LXs8ju+Z/PmzWmf//bbb7pfv37OY3/rrbci8nht5axSfke/uyw4wO2+
Li/Gq1TdFwzZQQXmR8r8Gc5h1lKe/s7sd+av0P8OpmVOi9SupaecGnwB5XG8
1MTljKqfv8PJoPF/L79Pfr/kdplJTz++3BkrvUAyQ7Kc8mZYqb/jfYka7rHi
3iuc/zRym/MFnF8Fu8erVO0dnibwO34/5HdryMvH1aVLF124cGHn9XLUqFH6
ww8/NP2QcqWO33iTcYa0baZf7zdU3z8y/FlVfz9w+60Z8vsni5Iy5PcTo5P0
muUPZovhExIm6F27xuik5I7GOJ69bV8Pvfi1efqmo8m66aG8vT/qXOgr3/g4
R69pbdu21S1atHDyw44fP65feeUVPW3aNP3ss89G6FUztaLF77/88ovu3r27
oyNhBis7Bb34999/z9b32gpeytvfxPx3Ob8KfuyqPP29pcuY1IuZHQkOram8
/EjOr9IDD46lLi2zWmQOo5xZ5ceFxKXMiQzF3+Fmv0vOl/OsUuun/11m4Mj3
B5gdyfwZnptQew/G75WVN7/K44YZYLA7s2fgUaL+zv1NzI9k/jt+V/idWUNe
Pi5kvD/99NP6fHuP5e/T7jXOkbZzv48MvF2vvC28jMigO1eH7dRzr7w8Q35/
eeYjGfI7+uPEZD175qxsMTx60SJkTV5nnOFlr3/hJp14dIO+/JXXdO3kvLU/
6lzoUf93ItuvZ+DmlP+rHf9jRnXixAl96aWXOv7I0qVL6759++q///3vadcP
GjRIX3bZZQHfA1YHs/N6/BzZn3/+eRq/79mzRzdt2tTJIm7VqlWmepBy+R2P
H+/7NmjQIG0PCers2bP6lltucfYJFi9e3LnNq6++mnY9f+7OnTudn1u0aFHn
/AUcjx0mNWvW1CVKlHB2ij/++ONp34f/76677jpnPyGuj4uL0/Pnz8/8QJ9n
5e5fZf4MmvwO/T0YvyMfhfOrzH6njsz8yOoqcPcqtPcyoumfoV7N7JkSKlDj
DsbvSqX30Ej+zmi/qvJdL7V2eV4QbHaVuTO8lP4Z+uCZq0MPTVnlzbCC36m9
13S7jvKyI5kfidkCvMcBhu+kvPxIzCL0Vl7+TJp/xvTfkC1bka7vN2w0zpK2
c7dfvWGcXn7L7myzO/rhsZsyZHf0YyPuzJTf0a8vfF4nJCRkm+HRTz89Qe8/
0N04u/t7R3I3vfy1GfqWo3t0y8NWmw+nF3/xVbZfz6A5g8dHjBjhMG+wAtM2
btzY0emPHDmiX375ZWd3H9kclRm///jjjw6X33DDDfqrr75yGixMjob+j3OI
9957z/k5rVu3zvBx43uWLVvm8DXu178r8NZbb9VVqlTR27dvd+4Tj69s2bL6
u+++c67nz8X3P/fcc45u/+233+oxY8boiy++2OH6Tz/9VD/00EMO//P8Bj6d
CRMmOOcCn332mV67dq2+8MIL9YYNG7J03M+HUt78Kpr8fpnLjGBH+t/bKc8/
Q78HtGO5v4nzmeBVaM3Mj2TLjBb6ZyQLk9/pe5eauD9HMhR/h9rPqlT6zHj/
bXk9fw59M4XFx9Tgmf3O51FSeR5/Pl/q79TgZX5krPLmB3Ac8X5Gc/f44ljL
/U3Mj2T+O/T3a5Xld1v5sP5fyuu2aZ60nXv98s1T9dJhme9VzXR2dcp9mfK7
44GfnLEHnr191ZM54nf0zJkJ+sCB4caZPaN+4vB1eurRtfpPr73izGmaZuW8
2Nu/ztns5xNPPOGwLfRkcPPo0aMDPOTgW3glMe/EAhOn/B+fpmlnxu+ojPwz
0N9Z27Ztc7525syZkI8Z18OrD9aGf0YW5q+gp69bty7ta+Bu8PzMmTMDfi7e
Q5bfh2Pg9/0PHjxYDxgwIORjGTZsmL7iiitCXn++lkr1zwx0mZDzq71dZqT+
Dv87dzdRfwdzQjdm9gy196rK28HK/UXMj2T+u/TQcHa1qO9SMjRZ3Z8dmRGr
Byu/du/f3Sq1d95W+t+lDs/zDvlegsyALyuev9y/yvlVdD3l+WcwU4DjS37H
MYcGH688/zv1dzTeLzl9rs7E27IVqn7/5hvjTGk7d/rFEXP1kqE543b2YxOn
hMXvny/cFxa/Hx+TpO9bsiLHDI9ety5RHzx0uXFWz6x3JXXS9706WY84+pxu
+4LV5tkfRiD7HawMTkfGEfRs8Dq0Z9SCBQscv4i/YmJi9Jo1a5yPc8rvX3/9
ddrXXn/9dedr8OyEKlwPZkZG8dy5cwOuw7kHroeXXxYe37XXXhvwc//yl7+k
XY9zEXwNHiHZOBdo3rx52u2g+8NzU758+aDX20otFbh/Ffo751fB79zfJPev
cn6V/E7/DHgUDE9+B7uWU4H+d+rv9IzTN0MWpr4tsxupfcu50lD8HQ7Ph5pf
ld8v9X7pn6HvnR4aPA/ub+L7Chcpb38T53cru+2fX8W5D+dXmf+O8yOZHyn9
Mzi3wowx96+etfubbOXH+qBlG+NsaTu6feiu5XpxhNgdfd/wIWHx+5E5G8Li
d/RHU5P0vdPvjQjDT548Ue/de5fem9TOOKeH208eulrPOLpaD3jtJX3x/vNT
m0fO/q9R+H8WmnP16tWdj+Hvhh/cX+D3hx9+2PkYXAx/vCzo0uHyu5xf/fOf
/5zmjw9VyvW/4/wB5xqzZs1Ku+7NN98Myv/gd3jXQ/1c+IKUOwvw8ccfBzTf
e4BPBhr9kiVLnPMMXIfsHvhwbAWW8vY3ofu5nMj9Td2Vt7+pjUo/v1pXeXOY
sSpVW66iAvMjpX+Gs53MjqTvRO5ukl4Vyc9Sgw/F3xl533k7qcHzUjZ/lsyf
oQ7PcwrmzvD8g012l8+Z70OA3am/c36V3hnub2ruHme0zJ/h/Cp+N/gdgd/h
nwn95pctW+dwfdZvgHG+tB293jdmdcS4Hb3ilu16Vr9eYfH7prvGhc3v6JeX
7YoIv7NXrkTW5JXG2Tyr/VxSB/3AyxP0nUe3644vnj8s3+qFd6PyGjdnzhxH
X0Zl5J957bXXnM+RQebXoOHFkfyOzLLhw4cH3Can/I6CBx2PD3OnKPhg4K3x
+2eqVq2axvnBfu6///1vx+vOc5JghcffqVOngK917tzZ8nuQUp5/ZoDLhn2V
55/p6jIkvBzwdFB/5/wqMiSpI8e6fAp9ubIKzJ+Rs6vc3YRLmf1O7ztzGcnR
3J/kz4EPxt9KZd1Tw32tfn1fnjfwsV2gvPcIJMNzdxM1eDI853eZHYmGB76W
e7xw3sM5AurvfJ8Dx5z6O86luH8VDX7H78zub7KVL+sv94w2zpi2o9N7JmyI
KLuj107cEBa7o2f3u1SfTDiYJYZ/atWGiDL8xIkT9PbtY3Xyvs7GuTy7/fTB
P+nZR+7Xg468oOvtz79em5xmR2Jms2PHjvqRRx5xfCeYydy4caOTC0ytWs6v
Hj161MmXhH9EsjnmPbEDBHr4sWPHnBlP7PGTt8HsKhgfXP7NN984GSWR4HfU
o48+6jD89OnTnc+h88PvvmPHjoD5Vc65hsqtHDt2rHPesnr1amemFRr74sWL
nc9ReC8CzwvP96OPPtLjxo1zPrf8Hlju/qbTKnV/E3iQ+1c5vxqvUr0z6HYu
XyIjpbHyZlfrK8/PDW0ZDO/3vsNDwp2k9In7tXdyvNy7KjNo6E3PiL+lNz5U
yQx5/+0LidvwPQCpvdNHwya7c48T2V363+mfYQYNjlOc8vT3Bsrbwcr3N3Cs
ccyZPwN+h6eJ/nfy+xnrn7GVH+vrlfcZ50zbke136zXUzyU8FXF2T51dXRY2
v6OPLziQJX7/YlyyXrJwcYQZfqKeNy9RHz40xDiL57SfT2qvV790t77n6Bbd
7SXzzB3Jnv7pX3P0WobMmXvuucfJk4EfBlkqderUcbj09GnPV59ZfiQKzA7u
x/2MHDnS0aolv4N3W7Zs6WREKl9+ZE75HQVvS5EiRfTUqVMdPz/yI8HiGeVH
+vkd3Am/P44BfO3In+zWrZvev39/2vG65pprnOeIHjp0qHP8LL+nL5Xqn7na
berv0v9O/wy1d1yC4am/g0GZHUn/DDPgmT9TTnm7V5mzyNlVMDy1bTm7Sq8K
dXBq7GT6YPydGbtLj43U7OmXkbuipIdGevHJ7fTO0AdE/wya5yr0v9NTVM09
RjhW4PeLled/b6YC969CfwfD43eA3wX0d5kfCf/7r3Z+1VZ+rJ927zbOm7Yj
yO4NGuvtic9Ghd3R68ZNyBK/vzFvU5b4Hf3BzL16ypQpEWd49BObEvT+Az2M
c3ikesv+y/X815bp644c0g0PnNva/M6v/2X65dCWrXTl6u+YX5X+md4uK/ZU
nv+9s8uUzEeBVgx+r688/3ucCty/WtHlVzJ8jArMj2RuSwkV6J8hK3OGlPq3
ZOpQ/B3O/lXJ7/68+IK+r8vMSv/+JmrwPBeR+nuM8vwz4Hdq71VVIL/j/YsG
ysugkftX6Z/B7wC/C//+Jmf/qtXfbeXHOvvJJ8aZ03Zk+p1GTfWWxJ1RY3f0
shuvyRK/PzNmcpb5HX1w5bao8Dt6+vSJev/+ESn829Y4f0dUm095PuteHKnH
HX1K93j5qDMPaprJs9L/OGvXJNrKm6W8+VWpv4Pf6Z8BvzP/vaUK5Hc09ONY
lX7/Kv0z5V2e9e9vonecHhqpv8s5VrI5NXjJ737+Dmf/Ksu/x8m/w0nOzxbx
9QWimR3JDBo+xxj3+VdUge9JwF8Efuc5TwPlza+2UIH+Gel/Z/47/O/U389Y
/d1Wfqz//fabfr9xU+PsaTuH7N6khd6cmPNs94z6/tufzRK7o+cO6K2/HJ81
Dw17w31ro8bw6DVrJumDh/oY5+5o9bP7LtGLXlughxzdrxsfzNvafLPDb5t+
KbRlK2SpVP0d/nfo7/BmgN/B7tB8411+pP8dbImMFPA79OK6ysugiVWp/C5Z
Vfrfmf/O2VVwL/cfcXcTNW0yuz97XalAzd3P35nxO5lfeullno2cW5UZknJ3
k9zfRP87GZ4zrNI7U95tObtKdie/o5u5x7aV8vY3UX8nv+N3I/c3Wf+7rXxb
Xwy6xjh/httratTSHUqV1hUKF3E8nwuqVg+4fn7K560vKq1jChd2rn+iVu2w
7nde1Wq61gUX6KIFCjiX/vu9t0pVXalIEV2mUCF9bbnyAdc9X7uOrl60mH6l
Tl0z7N6inX5i4t6osjv6scRHs8zv6BPzsjbDyv5sfLJeMHd+VBl+0qSJevfz
d+uk5A7GeTuavTulH3vhZj3x6OP60peP6NjkvJVrM/itT02/DNqyFbJUqv7O
/HewITRe6O/wwCN7huzezmXLVi5nUnun/x0sWt1lVO5vov5OfifDc3+TzIEn
G9NHQw+NnCmVnpZg/K1UxgwvGV9mRbL8Hh157lBIBfpnpAbvz48spbzse+jv
mF+l/x3nODXd4wXfjH9+lf53HG+5fxUML/0zjv5u+u/Hlq1o1T8XLTbO5eH2
8mo19I3lKzicroLw+/QUzr65QkWdWLlK2Py+rmasTnnh0bdVqKS31opzLlNe
jPSjKV/H9Yfi6uriKVw/u0o1vT7la+VSzg2WpjwOfn+blPOJ+b7HkVv9dptO
ev34pKizuzO7Onlhtvj9nflbssXv6Lfn7klh7ElRZXj0smXImhwUMV6+bnA1
5++vd+9KGd5u+45W+sorq+iKFYvpokWVrly5mL7jzlpp18+YUVdXrXqBvrBU
Qd21S3m9Y2ertOuefqaFc926R5tm+fFtS+6ul746S998NEm3OGRem1/4xVem
XwZt2QpZKjV/xp8f2cvteJchOynP/w4NHtp7Q+Vp8HJ+lf53et+pwUtvCb3v
zJzx50cG097J1tK/7ufvzPzv/txJ+bVgs6z8mfKx8DEyM4fcznMS6u9Sg6eH
hvmaPN/x+2eaKY/fob8zg0b6Z5j/jvdMzpr++7FlK1p16qWXjXN5dloF4Xc2
NHEVJr93L1PGYXD5tTYXldY9Ur6Ojx9zmV3e/vaKlZyPZ6ScL3QsXTrLjz0S
/VaHeL12bHKusDv64dF3Z4vfd0yYlW1+R++5f0vU+Z29det4vW9/1xyx++Il
DXSlSsV0rVolM+X3Vq3L6ovrXqRnzKyr165r6nzvgoUNnOuef761jokprG+6
qbpetaqxrl69uL7llppp33vJJRWd6yJxvrHx8BA9+eh6fcUrr+raBrT5g9/9
ZPpl0JatkKVS89/hxbjSZUPq73J+tYPLlMieAb8z/93vn6mmPH6v5PKr3z/D
/HeZQVNCebo2GVnOr/rzYTLi78z0d6U8fd2/90n6dvz7X+mfkVnwzJ+hJwhd
WnnvNVRwG/o735uoJo4X9zfhPKixe2xxjNur1OOO9z/8/hn436m/2/wZW/m2
/nvmjH6/YRPjPG6K3+GLGVWxcsDX8HnllK/j4xfr1NWlChXSj6fc1wspH1ct
WkyvrF7D+bhaysd7Un5Wbj/3N7tdrtfck3vsjl50Xf9s8fvCq/+kvxy7P0cM
/8iKh3KN4WfPSdAHDw7LFgdvfbalo4mDxxs2LJ0hv0+bnvJ3VaqQ3ry5RdDr
H3+iufM3DI0en/frV1lfemlF5+P5CxrouLiS+rnnWkfUZ4PekdRFr3h1ur7t
6G7d+nDuaPM//f4f0y+DtmwFLZE/Ay2X86t9XFZEbmG8SvVgk+GhDTdzm94P
ZCDCzw39vYbgVGae+/0z9IvL/JniyptfDbbzVGZJZsTf4e5g5W2D3Y9s/wxr
YfE46X+XM6zkd2rvcoaXGZI1leefqec2+J3zqzjGbdzjDe0d/C73r+J9kjT/
u+m/IVu2olmfXXm1cR43xe/wykBHl1/D5/DC83P8nNoXFHd4fWiFCs7XLo8p
q++pVNnx5F9cvLiOveACPbdqteize88B+qFRueOZYT846plssTv7yzmHcsTv
nyQk6dmzZucaw6PXr0/UBw72yhL7wuPS+4pUZs+M33ulsHjjJmV0v/6Vdfny
RRzu79u3st62vaVz/e7drZ2vT5pcx/la3bql9IgRtRwPTc2aJfWSpQ0jzu7B
etOhQXr60Yf1n157RdfZF3ltvv1L75l++bNlK8NSqf4Z+t/J7/S/gxvB7/Bi
t1VeviH9M+g6bseqVH4nu1dUXoakzJ4prQL978yekd5y2ZxbLeS7DMbfmc2w
+m9XwHedf5ZVnkdIn48/f4ZN/wyfL2dXcTwwE0D/DI4V89/J8HhPg/kzONbQ
4OX+JrA79XebP2PrvKh/zJ1vnMdN8vvMKoHcjXnVYoLf/f1QjZq6fomS+sjF
9ZxZ2tUpDP9sbJwuXaiQPhB3cdSe8xu9r9MP3JG77I7eMHlNjvj9/YXbc8Tv
6D8veF4nJCTkKsNPm5agk5Pv0HuT2mXKuWPHxukaNYun6eWZ8Xuz5mV00aIF
dYsWMY5vZuq0uo7vplv38mm3mTe/vo6rc5HzdWjvO3e11oMGVXXOEeCpqVev
VAr3F9fDha8mmv1cUke96uUEffvRXbrdC5Fh+VvfD73byJatvFAqVX8HC0r/
DPV3aL/wYEN/B8PTPwOtmPnv1N5rKy9/htkzcn9TWeXp7/78Gb/2Tm7258DI
jPdg/B1O/gy5X3pp5H3Kva/+/HeZT8/ZW5n/jnMT8jueLzV4+ok4vxonmnME
OKaYC4b2DnaX+TPMf8e5FRgevyu8Z/KbzZ+xlZ/r50OHjfO4KX7PzD+TjqFT
mB0ZNfDTbE5p6Y0H0y+uFp1Z1qP9b9b3jYx+zkxQfp80O0f8vnvSwhzzO3rH
qs25yu/sBx7EfGu/kFz76GPNdExMEb1iZaO0r2XG702bltHFihV05lD5tYkJ
dXSBAipNg/f36tWNU3i9mOPTqV27pB51d6zjs4FPfqX42bnVTx0coGcefUBf
9dqLuu7+7PH8hr99a/rlz5atkAX2U4H57/BmkN8vcdmR+ZFgd86vcv8q/NvQ
jqm/U1+upgLzZ5j/Tu2d3EsvjdxpKmdWpfdc+ltC8Tc/D1V+vvfPsvJ+5f4m
OU/L9wiKieZ5CC5Luc+xnGh64JkfKWdYob9zfpX5M/79TT1V+v1NeK/E2d9k
9Xdb+bn+e+qUfq9hY+NMboLfMY/a1j+/WsqbX/U38m8GuRmSYHhkSvK6OsWL
h3xMOekjg+7UK27dbYTd0Q/dOSJH/L7suqv1l6P35Zjfj49J0quWrjTC8AkJ
E/XOXWN0cnLHdBybmJj691awoNf4HCyOj4P51OG1qVKlWMDXHnigsfN9q9c0
SXd7+GlwTgA/zTNbWjq3e3ZbKue3a1dO3zw8dzT40Np8B/3Qy2P1qKPbdKcX
w2f5v9u9TbbyeKlU/R3sDk0X+ZHQeMHw8Gx0cxkSejDzI5kdyb2hnF9l/ox/
fxM43r+/iZo1Z0DlTlPOhkoNXGbNSAYPliWTWUne92dH8j7kziipw/M8g9kz
fPx8TiWVd55Sxj0GnAHg/lW+VxGnvPlfnANxroD+d+rv+B3gXAp+JvA7zrHA
7tDfrf/dVr6vT//U3ziTZ9avXlzPYXJ0yr9LRyfHx7vdGVLMlOJz5DviemQ+
4vN9wtPSKyZGX1/ey3BfW7OWkx850s2PHOnLj5T9dMr1yHp/LeVx4POjKZfI
mp9UuYrzM+G5SaodWf/MK0PG6+XDzbH7kqG79Pyrr8gRvzse+Fk588Czj01J
0vfee68RhkcvWgQtfnAAu27Z2lLff3+jgIbvpUsKo+PjYLw7YmQtXbx4QUdL
TzsPmFTH4f1g+vvtt9fSbduWTdW9n27h/H1Tu2/duqweOqyGUX739zMH+ui5
R1boa44c1vUPBJ+D7fjS+6Zf9mzZyrSUlz9zlcuHfZXnfe/h8iPz35lPzvyZ
Bspjd1wyX4Wzq+B3emfItPSYXKgCMxiLCUYmq5PrlQrO8cH4O5z8Gfk9fh89
tXbq7/K9AJkDL3dPlVDe/ib/DCtnV6m/c4cTGB7cjnOgxip9/gz193jl8Ts8
8Di/Yn7kr6b/fmzZinb9feYs43yeWcN3nvLvMV1flsLkuH5KlapBr+fMKbrZ
hRem3Z6NudOaF1zgcDu8McHy3N+tW183LnGhXiKy39H4HF4b+GiQOx/J5/vy
8Ol66bDo7lXNrNeM3Zxjdkd/uGhXRPgd/cqyXcb4nf3U5gl6/4HuIfnV75/p
P6CKw/P8HNxeoUIRRzt/YFVjPXdefWeGNb5HhXT3BY8MPPDr1zdL+xryJOGF
X7iwgS5ZsqDjoTfN7KF6d1I7/fBLd+kxR5/R3V56Xdd0+X38R1+aftmzZSvD
cvNnzqhUPZf7m3q7rMj8yM7K2+HE/BmwJn0fF7vtz5+h/s7899Iu25J1qVfL
3U1kd6l7yzxHv77u5+9w8mcK+W4jfTn++5TnEXL3Kpv8zufD/U30vrPpn6mi
PHZHw3fE/EicE+HYtnab+jv8S2R3ub8J75lYfreV7+vfycnG+dy21y+MXKCX
DDXH7eyNUx6ICL/vm7oiYvyOfmrVBuMMP3NmQgrD3xIWv3ftWt75mrzNgw82
1k2alHF0eLB8nz6Vg2rvHTuWSzejCl4Hw5cuXcjheNOMnpXeuv9SveDIYn30
25OmX/Zs2cqwBL9Dy2X+TF/lMTz5nf4Z5huCNcHv0I+ZHwkepb+7kvL0d7Is
51fl7Cr5nTk0fk4mv1N3Vyo9x/v5OzN+l/Or/ux3ttTd6eMpJB4fHzPzL5k9
Qw0ez5P6O/Pfye9yfpX+9/rKy59p5R5rHHfq7ziXgp8J2jvOscDuzvyq6b8h
W7aiXf/597/1ew0aGedW2w30wbvv04vzALuj1ydMjwi/3z/k+ojy+xdjk/Sy
RUuNMzx67dpEffDQ5ca5+FzqpOQO+o8/rDXVVt4ud34V/plBLhMim5Dzq9Tf
mf9Ofpfzq/S/xyovf6aaYFXq7zHKm+3073Cij1zOrvrzX9jk7FD8nVl+pF97
l+XPf5c/l9kzcncTM3Mkw5Pf0ZxdxWUl5bE7ZgSoweO8hx4af/47jjnzZ8Du
yPTk/lXmR/5i51dtnQ91/LrBxtn1fO/ksQ8bZ3bZq24bFhF+R5+8NzIeePYH
M/bqqVOnGud39OTJE/XevaPCypq03Ua/8eZw0y93tmyFVSp1fhX+GXgyyO+9
3I53ORJejrYuV8IDT/+MzJ6JVYH575WVlz8DhiXDc08pc2fofZfZkYVUYI4k
9W/q8aH4OzN+l7dV4n4lu8uMSemfoTefH/O8g7O4uKTvXXrfcQyqiK6mvPMd
HD/m6FN/x/EN5p/h/Cr4HRq8M79q8yNtnQ/1/YaNxvn1fO49EzYa53XZy4bv
0LP7Xxoxfj+2aHdE+R19eOV24+wue8WKRH348FXG+Tiv98mTG0y/3NmyFVYp
Lz8S/hlkm4Dhub+J+ju8HNzfBO0dWjH972DQOOXp79Deg/lnOL/KvU3U3snx
MkNS7m6SHpbM+Dszdvdr9379Xu5a9Z9D8GPpn5H7m+T+VZynkOFx7sL8d3iL
oL3HqkD/DBr83spt5r+D3eOVt38V51bSP2P3N9k6L+r3778/53Ik80O/W6+h
3pXwtHFe9/faCY9HjN3Rh+99MOL8jt5431rj3B7YE/T27WN18r7Oxjk5r/aZ
M38z/XJny1ZYpbz9TXL/KrR3+megvzP/nRnwcn8T/DOcxwSbMmMFvMoZVmZH
0ltC/4zc3yRnQ6XeTnaWmngo/pa58KHK753npf9+ZA6N3C0lzzU4v0r/Oz6n
Bl9OPH+8F0H9XfpnOPtL/Z0Mj3Ml8jv1d/pnwO/4XeF3ZudXbZ03dfyGG43z
7PnU7zZorJ9N3Gac1YP1xikrIsrvq28eHhV+/2x8sl4wb34e4PbAnjcPvvgh
xlk5r/XLr/Q3/TJny1ZYJeZX6X/v4zZYEQwP3Zf+d+rv0j9TX3lZ5rhkRiL1
Zu5f5Q4n8juzZzi/yuaMqPSayzwapYLr8JK/M8uPDDbvKvNr/OcKRXyXxdyP
ye/SPyOz35mbiUvyO/ev0vtexz2OOJ7IoEG2Po6z9M/Eq9T8SOjvmCsGv+N9
EoffrX/G1vlSP2x60jjTni/9bqNm+pnEXcY5PVQ/Oj4hovzueOCnRtYDz35n
9h49adIk48werB9/IkEfONDTODfnlf7i81WmX+Zs2QqrXH6X/hl44Pu4rAh+
h/bbSXn8zv2rTV3ehHcG+js0ZOjK1d1L6Z+hh4bemVLKm/dkU9OGli198HKW
tJAKnC8Nxt9KeXOuwUoyfiHf5/69q8y8kRr8BeKSj5XvIfC50UNTVjx/8juz
NWPdY8bdTdDf8Z4G8/UxKwwPDfkd51E4p4K3ifOr8M/8YvpvyJat3Kr//PST
fr9hE+Nsm9/7nSYt9ZMJ5vYyhdMrhg2OOL9/sigpKvyO3nv/FuOsHqqnT0/Q
+/aPSOHXtsb52XRb74ytc6mUl/8OJpT575e47Cj1d+jC9L9Tg4eGHOcyaU3l
5c9UEM08xRjlza9Cr6YPRV76c1+k/i518mD8nZkHPtiMq+R//+5VdFHxNZn9
Tm6XefbM2OFz5fNn/gz1dxwravDU37m/if4Z5s9wjxbzI5n/bvc32Trv6sRN
w4zzbX7ud1q0149P3GuczzPqlbdtjzi7o1+etTZq/I5eu+Ih46yeUa9ZM0kf
PtTHOEOb6iNHbzD98mbLVtjl6u9nlZf/3l95/hn43+NdhmT+DPV3zq9K/Z37
m+ifYf4MPDT0vnOHE+c9mQPP/He/B578TnaXGTHB+Dvc/Eg5/+q/lD56mfsu
fT081yiuPN87ve/00JR2n3t591LmR8YqL38Gx478Tv0dxxr6O+YOsP+W/nf8
bqDB41wL51xn//jjD9N/RrZs5Vr96+mnjTNufu2323bW68cnGefzzPqxxMei
wu+Pjbwrqvz+SUKSnjN7jnFOz6gTEyfq55+/x8lAN83Tud1//euTpl/ebNnK
UqUw4O8uCw5wu6/Li/EqVfcFQ3ZQgfmRMn+Gc5i1lKe/M/ud+Sv0v4NpmdMi
tWvpKacGX0B5HC81cTmj6ufvcDJo/N/L75PfL7ldZtLTjy93xkovkMyQLKe8
GVbq73hfooZ7rLj3Cuc/jdzmfAHnV8Hu8SpVe4enCfyO3w/5/bTpvx9btnKz
/vPzz/r9Rk2Ns25+67c69dBrx+R9dkdvnLI4KvzueOAnRccDz35jwfM6ISHB
OKdn1kuXImtykHGmzq3G+crvv/9s+uXNlq0slfL2NzH/Xc6vgh+7Kk9/b+ky
JvViZkeCQ2sqLz+S86v0wINjqUvLrBaZwyhnVvlxIXEpcyJD8Xe42e+S8+U8
q9T66X+XGTjy/QFmRzJ/hucm1N6D8Xtl5c2v8rhhBhjszuwZeJSov3N/E/Mj
mf+O3xV+Z3b/qq3zrk4Mv8U47+anfqtbb70mhS1Nc3m4/ciYMVHj988X7osq
v6N3rtpsnM/D7S1bxut9+7sa5+to99vvjDL9smbLVpbK3b/K/Bk0+R36ezB+
Rz4K51eZ/U4dmfmR1VXg7lVo72VE0z9DvZrZMyVUoMYdjN+VSu+hkfyd0X5V
5bteau3yvCDY7CpzZ3gp/TP0wTNXhx6assqbYQW/U3uv6XYd5WVHMj8SswV4
jwMM30l5+ZGYReitvPyZNP+M6b8hW7Zyu/61dZtx5s0v/Uavq/SDd50bujt7
yfVXRY3fj8zZEHV+PzE6Sa9aep9xNg+3Z89J0AcODjPO2NHsb77ZZ/plzZat
LJfy5lfR5PfLXGYEO9L/3k55/hn6PaAdy/1NnM8Er0JrZn4kW2a00D8jWZj8
Tt+71MT9OZKh+DvUflal0mfG+2/L6/lz6JsprAL3NxVVXvY7n0dJ5Xn8+Xyp
v1ODl/mRscqbH8BxxPsZzd3ji2Mt9zcxP5L579Dfr1WW322dh/XfU6f0+02a
G2ffc71f73ODXnX7ucXuq+7cEjV2R28aNT7q/I7+aEqSnnHvDONsnpVevz4x
heMvNc7ake79B7rp//73P6Zf1mzZynKpVP/MQJcJOb/a22VG6u/wv3N3E/V3
MCd0Y2bPUHuvqrwdrNxfxPxI5r9LDw1nV4v6LiVDk9X92ZEZsXqw8mv3/t2t
UnvnbaX/XerwPO+Q7yXIDPiy4vnL/aucX0XXU55/BjMFOL7kdxxzaPDxyvO/
U39H4/2S03b/qq3zsf4ydqxx/j2X++iVt+j7RuTtnJlgvX7SI1Hl99n9LtUn
Jx7MFYZ/deku40ye1Z46daJOSr5D701qZ5y7I9UffjTd9MuZLVvZKhW4fxX6
O+dXwe/c3yT3r3J+lfxO/wx4FAxPfge7llOB/nfq7/SM0zdDFqa+LbMbqX3L
udJQ/B0Oz4eaX5XfL/V+6Z+h750eGjwP7m/i+woXKW9/E+d3K7vtn1/FuQ/n
V5n/jvMjmR8p/TM4t8KMMfevnrX7m2ydj3X6vfeNM/C52q9dO0qvuDVv57uH
6g2T50WV39HHFxzIFX5Hb1n1eIa83L59e/wfHdClSpXK8Hvi4+N1+fLldZEi
RZzLyy67LOD6q6++WpcrV04XL15cN2zYUI8bNy7turvvvtu5bsSIERn+jFWr
JunDh/sbZ+9I9E8/vWP65cyWrWyV8vY3ofu5nMj9Td2Vt7+pjUo/v1pXeXOY
sSpVW66iAvMjpX+Gs53MjqTvRO5ukl4Vyc9Sgw/F3xl533k7qcHzUjZ/lsyf
oQ7PcwrmzvD8g012l8+Z70OA3am/c36V3hnub2ruHme0zJ/h/Cp+N/gdgd/h
nzlj+u/Hli1T9Vn/K42z8LnWr9yUoJcNPzfZHb161B1R5/c35j2Za/z+xdgk
vXzR0gz5vUKFCvqOO+5I6zvvvDPk7Xv06KGLFSumr7jiCn3rrbc6l/i8f//+
zvUTJkzQF154oe7ataseOnSow/fgfX5/06ZNnevC0eITEibqnbvG6uTkjsYZ
PLv9yqtXm34Zs2Ur26U8/8wAlw37Ks8/09VlSHg54Omg/s75VWRIUkeOdfkU
+nJlFZg/I2dXubsJlzL7nd535jKSo7k/yZ8DH4y/lcq6p4b7Wv36vjxv4GO7
QHnvEUiG5+4mavBkeM7vMjsSDQ98Lfd44byHcwTU3/k+B4459XecS3H/Khr8
jt+Z3d9k67ytf2151jgPn0v90q0z9NJhzxtn8Oz3Lr1gUJ+o8/uWMVNyjd/R
H9y7V0+dOjUkv1eqVClsf0vVqlV1q1atAr7WokULXa1aNedjsH/K/xt67Nix
zuetW7fWzZo1cz6+9tprdeXKlfX48eOz5KlZuBBZk9cbZ/Hs9N/+9ozplzFb
trJV7v6m0yp1fxN4kPtXOb8ar1K9M+h2Ll8iI6Wx8mZX6yvPzw1tGQzv977D
Q8KdpPSJ+7V3crzcuyozaOhNz4i/pTc+VMkMef/tC4nb8D0Aqb3TR8Mmu3OP
E9ld+t/pn2EGDY5TnPL09wbK28HK9zdwrHHMmT8Dfoenif538vsZ65+xdb7W
/379VX/YtoNxLj4X+vAdi/SSoab5O2f90D1PRZ3d0XMH9NZfjs89Dw36hRU7
QvJ70aJFdenSpXVMTIyuV6+eo6uHYmnwd9u2bQO+1qZNG12wYEHHJwP9HfcF
PX7MmDEO7/fs2dO5rmLFivqGG27Itjf+qc0T9f4D3Y0zebh94GC8/u9/rQRm
69wtleqfudpt6u/S/07/DLV3XILhqb+DQZkdSf8MM+CZP1NOebtXmbPI2VUw
PLVtObtKrwp1cGrsZPpg/J0Zu0uPjdTs6ZeRu6Kkh0Z68cnt9M7QB0T/DJrn
KvS/01NUzT1GOFbg94uV539vpgL3r0J/B8Pjd4DfBfR3mR8J//uvdn7VVl6t
QYMGOd7baNY/Fy40zsZ5vQ/es0ovPsfZHb1h8oO5wu/oE3NzZ4ZV9uP3r0vH
xFdeeaXu27evvummm/TAgQN1jRo1HP/7XXfdFZShwe7gc3A4WB2XuH3K/xX6
9ttvT9PZq1Sp4pwPQHsHu3fo0MHR6eGpgVbv99WE2zNnJugDB24xzubh9Kef
Lo3qa5MtW9EsV3/H/Kr0z/R2WbGn8vzvnV2mZD4KtGLwe33l+d/jVOD+1You
v5LhY1RgfiRzW0qoQP8MWZkzpNS/JVOH4u9w9q9KfvfnxRf0fV1mVvr3N1GD
57mI1N9jlOefAb9Te6+qAvkd7180UF4Gjdy/Sv8Mfgf4Xfj3Nzn7V63+biuj
AkMrd+6tcOHCzv/NYIHvv/8+6j/7xx9/1D/88ENUf8bvX39t97Fm0Enj1hrn
7ojxe+KMXOP3d+ZvyXV+/2J8sl44b0GGfDx69GiHx0N51KGpN2rUyNHbCxQo
4LA8PDL49x/KNz98+HBnZhX3Da8OzrlxW/jk8VqRHS1+7dpJ+uCh3sYZPVTv
TWqvz579JqqvTZlVbugbtvJ3KW9+Verv4Hf6Z8DvzH9vqQL5HQ39OFal379K
/0x5l2f9+5voHaeHRurvco6VbE4NXvK7n7/D2b/K8u9x8u9wkvOzRXx9gWhm
RzKDhs8xxn3+FVXgexLwF4Hfec7TQHnzqy1UoH9G+t+Z/w7/O/X3M1Z/t5VR
4f+I7t2766+++kqfPHlS79q1y3nPHO+f55f6y9hxxjk5L/buiU8YZ+5I9gMj
b8k1ft85cXau8zv63dl79OTJkzNk41q1ajlzphndBpr6yJEjHS87Z1qhx/tv
h69B08frwT333ONwPs4BcF3dunWd147s+mkmT56o9+4d5bCyaV7393vvT8zR
a45kb3icbrvtthzdhy1b2SmVqr/D/w79Hd4M8DvYHZpvvMuP9L+DLZGRAn6H
XlxXeRk0sSqV3yWrSv878985uwru5f4j7m6ipk1m92evKxWoufv5OzN+J/NL
L73Ms5FzqzJDUu5ukvub6H8nw3OGVXpnyrstZ1fJ7uR3dDP32LZS3v4m6u/k
d/xu5P4m63+3lWEF+z8C76NDb0MF+78Ht8f3sZYsWaJr167t5M3BI4tMC9bj
jz+u69evr0uUKOHcZ+fOnfWpU6eC/uwdO3Y4Xly8b4/bwnf7ySef5Pg5nv30
0xRebWicl/NKv1u/kd6ZsMU4b0eylw7bqecMuDzX+H3RoH76y7H7jTB80v1b
QzIx5k6hqcPvEi5Hg8/xbzTYdb169XI4HR+PGjXK4XdkSOLzOnXq6G7dumWb
39krViBr8irjzC771KnPcvSaY/ndVl4olaq/M/8dbAiNF/o7PPDIniG7t3PZ
spXLmdTe6X8Hi1Z3GZX7m6i/k9/J8NzfJHPgycb00dBDI2dKpaclGH8rlTHD
S8aXWZEsv0dHnjsUUoH+GanB+/MjSykv+x76O+ZX6X/HOU5N93jBN+OfX6X/
Hcdb7l8Fw0v/jKO/m/77sZW3y/9/xKcprIv/r/E+OSozfn/ttdcc382jjz6q
jx8/rl9//XW9YMEC57q//e1vTsb03Llz9eeff67ffvtth/V//vnnoD/7iSee
0Js2bdLHjh3Tf/7znx12aNCggY7EOeiJm4YZ5+a80O80aKK3Ju4wztuR7ofH
bco1dmd/OfuQEX5Hr1ux2mFfZMng3xFmVgcPHqzj4uIcLR3/ZnE9zoeR4S69
MJdffrlzef311zvzriVLlky7vWx4ZHAuDZ2eX4PvHa8J1113nfNzcB855ffU
nqC3bRunk/d1Mc7ub741IsevN3xtk/5ENl4L//jjD+cY4twJ2gZ+b/Pnzw96
H6g1a9Y4msbZs4Er1Xv37u3MPdiyFaxUav6MPz+yl9vxLkN2Up7/HRo8tPeG
ytPg5fwq/e/0vlODl94Set+ZOePPjwymvZOtpX/dz9+Z+d/9uZPya8FmWfkz
5WPhY2RmDrmd5yTU36UGTw8N8zV5vuP3zzRTHr9Df2cGjfTPMP8d75mczfw3
bOt8LvwfAf6GZxb/jyj3/xgwNyozfgdvlylTRv/73/9Od99Hjx517gtcH+pn
Z6Qvff311873v/NOzven/L9XXzXOzqb73cbN9dOJ5lk7Gr1xyn25zu/vL9xu
jN8/mZis58ye4/A39Hb42XGJc+9hw4alcTHYHYzIz3Edzs1xXo33y6Ch33zz
zUGZGpq8f0YVvA6GB/NnReMPt+fNgy/+RqP8/q8fjub49YavbZjxwTkW5oTh
UUSD3X/77TfHm/RqyuvSZ599pteuXevME2zYsCHdfaBOnz7tnEtt3Lgx7fpv
vvnGOYdKSkrK8eO1lT9Lpea/w4txpcuG1N/l/GoHlymRPQN+Z/673z9TTXn8
XsnlV79/hvnvMoOmhPJ0bTKynF/158NkxN+Z6e9Kefq6f++T9O3497/SPyOz
4Jk/Q08QurTy3muo4Db0d743UU0cL+5vwnlQY/fY4hi3V6nHHe9/+P0z8L9T
f7f5M7YyLPwf0aVLF/3xxx/rt956S99yyy3Oe+K///67c31m/A5uh0aO/9Ox
txH/D/3yyy/Odfh/Cn4ZcEWfPn30ypUrA+Zi/fwOr8yAAQN0zZo1ne9hLsa2
bdsi8lzP531O7zRrrTclnLt7mTLrxyZOznV+3zNpkTF+R78xf7dOTEyMOEPn
hX78iUR94GDPXGf3I0cGR+S1Jjv+GZxbSe+h//UR2T84n2JBr8esg/0/3law
Evkz0HI5v9rHZUXkFsarVA82GR7acDO36f1ABiL83NDfawhOZea53z9Dv7jM
nymuvPnVYDtPZZZkRvwd7g5W3jbY/cj2z7AWFo+T/nc5w0p+p/YuZ3iZIVlT
ef6Zem6D3zm/imPcxj3e0N7B73L/Kt4nSfO/m/4bspW3K5gGDl0N822ojh07
Ou/Ny8K8m/S/g/V3797tZNbh/xN44Zkrg9eQQ4cOOVoTOB+7IqE3BfvZ0A6R
m7Fnzx79/vvv63fffdfh982bN0fkuZ565RXjHG2E3Vu21xsn7DXO2NHs+4YP
yXV+Xz54oP5y9D6jDL9r1VPGWTtaPX16gt63b0QKV7c9p7R3VDj8vmzZMmfO
GNoHtArk+Ddv3jzofaDgTcR7pX/5y1+cz/HeyqRJkyLyeG3lz1Kp/hn638nv
9L+DG8Hv8GK3VV6+If0z6Dpux6pUfie7V1RehqTMnimtAv3vzJ6R3nLZnFst
5LsMxt+ZzbD6b1fAd51/llWeR0ifjz9/hk3/DJ8vZ1dxPDATQP8MjhXz38nw
eE+D+TM41tDg5f4msDv1d5s/YyusCsbvycnJjpfmr3/9q/7Tn/7k5EuzoKlX
r149gN9lYTYV783DV+MvfC+ybebMmZPuZ3/77bcOqx84cCDt9gcPHowov6PO
Nx/822276kfHJRnn62j2ilt36Fn9euU6v6NPzjpslN9PjE7SDyy73zhrR7NX
r56kDx/qmwu+96zPmIaqzPgdPhm8xmIeCFyO9z+HDBniMHmw+2A1adJET5s2
zfEmwjP15ZdfRuwx28p/pVL1d7Cg9M9Qf4f2Cw829HcwPP0z0IqZ/07tvbby
8meYPSP3N5VVnv7uz5/xa+/kZn8OjMx4D8bf4eTPkPull0bep9z76s9/l/n0
nL2V+e84NyG/4/lSg6efiPOrcaI5R4BjirlgaO9gd5k/w/x3nFuB4fG7wnsm
v9n8GVsZVSgPOnQh+GKXL1/u+DKfffZZ/cEHHzj/x8DvTn7funWrM6+KeVP4
3JcuXer8vwLt/OWXX3b2vmPG9cSJE453E37N7du3p/vZ+DulBwf/l+3du9fR
olSE+f1syn2/16CRca7OjX6r0yX6kTHJxvk62r124gYj7I7+cNFzRvkdfWxy
kp45Y4Zxzo5mJyZO1M8/d49OSu4QJX5vq3/++aOIvc7I1zb4EzEvLAufd+rU
KeBr8Bpmxu94fcX7m3htxnuVtmyFKvyfqgLz3+HNIL9f4rIj8yPB7pxf5f5V
+LehHVN/p75cTQXmzzD/ndo7uZdeGrnTVM6sSu+59LeE4m9+Hqr8fO+fZeX9
yv1Ncp6W7xEUE83zEFyWcp9jOdH0wDM/Us6wQn/n/CrzZ/z7m3qq9Pub8F6J
s7/J6u+2MqpQ/L5u3TqHtaHvwHeJ7ANkQ06fPj3A/w6NHPpS2bJlnZk2/P/D
GSx4YOClh2cGs3LIWFi0aFHInw0PDjw0uC3uZ9++fRHnd9T5kAf/Znxfvfru
/K27szdOWWaM3w9MXWGc39GvLnnOOGPnRi9ZgqzJayLO7++9Ny6irzHytQ2z
q9AikDuDmVNwFbzr0EF27typP/roI8eviM8z4/effvrJ0VPw2rx+/fqIPmZb
+a9Uqv4Odoemi/xIaLxgeHg2urkMCT2Y+ZHMjuTeUM6vMn/Gv78JHO/f30TN
mjOgcqcpZ0OlBi6zZiSDB8uSyawk7/uzI3kfcmeU1OF5nsHsGT5+PqeSyjtP
KeMeA84AcP8q36uIU978L86BOFdA/zv1d/wOcC4FPxP4HedYYHfo79b/bsuW
r377xz/1+02aG2fsaPUblw3SD951frA7et248cb4/f4hNxhnd/bWVU8Y5+vc
6me2TND79neNCLsnJbfXZ878LaKvMZK9wectW7Z09A3l5kciB/Kaa65xMmXQ
0EiwHyszfkchLzJYlqQtW/5SXv7MVS4f9lWe972Hy4/Mf2c+OfNnGiiP3XHJ
fBXOroLf6Z0h09JjcqEKzGAsJhiZrE6uVyo4xwfj73DyZ+T3+H301Nqpv8v3
AmQOvNw9VUJ5+5v8M6ycXaX+zh1OYHhwO86BGqv0+TPU3+OVx+/wwOP8ivmR
v5r++7FlKy/WP+bON87Z0eijfxqi77/9/GF39LIhg4zxu+OBv9esB559fGyS
XrF4mXG2zq2eNStBHzx4c475/dixWaZfjrJU8OMgJ8yWrYzKzZ85o1L1XO5v
6u2yIvMjOytvhxPzZ8Ca9H1c7LY/f4b6O/PfS7tsS9alXi13N5Hdpe4t8xz9
+rqfv8PJnynku4305fjvU55HyN2rbPI7nw/3N9H7zqZ/pory2B0N3xHzI3FO
hGPb2m3q7/Avkd3l/ia8Z2L53ZatIPWfn3/WH7Zua5y3I9lHrr5Nr7xtT455
eNZ1T+kO9S/XZUtX0EULF9M1K9XVd/ZeGPL2LeK6pNtRg65UtnrabW7uOU1X
iKmiSxS7SDeP66zn3bAt7bqZ1z7pXJd45SNZfqz33/6sUXZHH1u0xzi7s/9v
epIz32iarXOzH3ssQR84eGm22H3f/s76t99+MP1yFFZ99913Kc/1MWe+6MMP
PzT9cGzl8RL8Di2X+TN9lcfw5Hf6Z5hvCNYEv0M/Zn4keJT+7krK09/Jspxf
lbOr5Hfm0Pg5mfxO3V2p9Bzv5+/M+F3Or/qz39lSd6ePp5B4fHzMzL9k9gw1
eDxP6u/Mfye/y/lV+t/rKy9/ppV7rHHcqb/jXAp+JmjvOMcCuzvzq6b/hmzZ
yqv17ZpHjDN3pPq1waP18lsik+/epFZ7h71v6zVbT+j/kI5verXD3ZOvXhf0
9uDvqQPXp/Wkq9bpC4uXdr4P1y+4cacuXSJGX95qiB7T9z5dMaaa7tvm5rTv
b123p3Nddh7rY4nrjPP7C/c+aJzbZb+4Yodxps7tnjJlok5KvlPvTWqXJX7/
4vP7TL8MhV3YwwWP/KxZ59b7BbbMlDu/Cv/MIJcJkU3I+VXq78x/J7/L+VX6
32OVlz9TTbAq9fcY5c12+nc40UcuZ1f9+S9scnYo/s4sP9Kvvcvy57/Ln8vs
Gbm7iZk5kuHJ72jOruKykvLYHTMC1OBx3kMPjT//Hcec+TNgd2R6cv8q8yN/
sfOrtmwFr//99ps+1i3eOHvntF8eNlkvu/n5iLD7nOu36oIFCuqb4icFfL1K
+Vq6W+MBYd3HDd0m6AKqQJqePm3QhtSdvtc/63zeuVFf3bbeJc7HIy6bq6uV
j9MLhuzI1uPdOHmBcX5/ePgtxpnd35tWPWacqU30ffcn6sOHB4TF7gcO9tB/
/HHa9MuQLVtRK5U6vwr/DDwZ5Pdebse7HAkvR1uXK+GBp39GZs/EqsD898rK
y58Bw5LhuaeUuTP0vsvsyEIqMEeS+jf1+FD8nRm/y9sqcb+S3WXGpPTP0JvP
j3newVlcXNL3Lr3vOAZVRFdT3vkOjh9z9Km/4/gG889wfhX8Dg3emV+1+ZG2
bIWuH7fvMM7fOekXb5utlw6NDLvTO5PyuqGH97w34Os1Kl6sYys3DOs+6ldv
oS+u2iTt84U37tJlLiynh3RPcM4P4Mfp3+5Wx0NTpVxNfecVi7L9eB++527j
/I4+OfVQAD+/cvPj+vJ6XXRMiTK6RJELdN2KsfrZa0Jn1Wy6aqFuVrW+c/vi
RYrp2HLV9fhONwfcZm2/Wbpm2aq6dLGLdJ/6XfUndz2fdt27I591rntp2Abn
8y/GJ+tF8xca52kTnZAwUe/YOVYn7+uUIb//7autpl9+bNmKaikvPxL+GWSb
gOG5v4n6O7wc3N8E7R1aMf3vYNA45env0N6D+Wc4v8q9TdTeyfEyQ1LubpIe
lsz4OzN292v3fv1e7lr1n0PwY+mfkfub5P5VnKeQ4XHuwvx3eIugvceqQP8M
Gvzeym3mv4Pd45W3fxXnVtI/Y/c32bKVQeHfx6f9+hvn8Oz04TuX6iVDI8Pt
ssHXYPXJVz/q6OIDO45y9PSKMVUz/d4pVz/m6PfXdRkT8PURl87R1SvE6fKl
Kzna+/wbtuuezQbqjg16O56aWpXqOfcvfTWZ9aKU84JF1/U3zu7oTxcmpbH0
2yO26qplKum+9bvrZwYu1S8MfUw/2n+OPnDjupD8vv3alXphr3F69+CHnNvP
v2SMLlm0hJ7e/Xbn+uN379XlL4zR4zoOc24Dvp/U9da077+qcS/nOnmf787a
oydPnmycp031woXImrw+KLsfPXqD6ZceW7aiXsrb3yT3r0J7p38G+jvz35kB
L/c3wT/DeUywKTNWwKucYWV2JL0l9M/I/U1yNlTq7WRnqYmH4m+ZCx+q/N55
XvrvR+bQyN1S8lyD86v0v+NzavDlxPPHexHU36V/hrO/1N/J8DhXIr9Tf6d/
BvyO3xV+Z3Z+1ZatTOr0hx/p9xo2Mc7jWen9ox+MOLezJ/RfncLvDRwdHixe
I4W7m9XupCvFVMv0ey9pcZ0uVaJMwHxqsB7X7wFdoUwVPXvwM7pq+Vh9dce7
HJ8NfPL39Fke1uN88O5njHM7+5VZa9O4eVjLAbpZ1QY59sB0j2ure9fr6nz8
+i2bnd/HsTt3OZ8PbdlfD2x8qfPxk1ct0g0q1dFfjEo/R7vvvq3GOdp0P/nk
RL3/QHwau+9Naq9Pnfrc9MuOLVtRLTG/Sv97H7fBimB46L70v1N/l/6Z+srL
MsclMxKpN3P/Knc4kd+ZPcP5VTZnRKXXXObRKBVch5f8nVl+ZLB5V5lf4z9X
KOK7LOZ+TH6X/hmZ/c7cTFyS37l/ld73Ou5xxPFEBg2y9XGcpX8mXqXmR0J/
x1wx+B3vkzj8bv0ztmxlXv9cssQ4k4fbe8c/GjV2lw22hp6OjzHTWq968wxv
D58MmByaema3g74PP83M61K5dM7gLc51jWu11X3aDAvr8a2fvMY4t7M3jLwr
jZlrl6+uBzfro3vWae9o5vUq1tb3dr8jS+wOPb5CqXJ6Rvydzucn7k7SFUuX
06uumKI/umOXblqlnp7WfaTjobm4Qi29ddDykPf16Mo1xhnadM+YkZDC8Lc6
/P7Jp4syf0GwZescL5ffpX8GHvg+LiuC36H9dlIev3P/alOXN+Gdgf4ODRm6
cnX3Uvpn6KGhd6aU8uY92dS0oWVLH7ycJS2kAudLg/G3Ut6ca7CSjF/I97l/
7yozb6QGf4G45GPlewh8bvTQlBXPn/zObM1Y95hxdxP0d7ynwXx9zArDQ0N+
x3kUzqngbeL8Kvwzv5j+G7Jl61wozLJ+0ruPcTbPrJ+fuClX2F32jGs36ZLF
LtL9292W4e1u6TXTYfHRfVdmeLsB7UfohjXbpN03vgcZNvi8YY1W+opWN4X1
uDZMmm2c22WfnHTQ4eXihYs5fXPLKx0OB2fD0z635z2Zcnul0hV0scJFnfc9
bm97XTqPPHT2ajGVHO3907t2p9zmWudcAZ4a+OdrlaumJ3UJnKf9ZGKynjtn
rnGGzgv99NPz9R9/2L1Hts6PUl7+O5hQ5r9f4rKj1N+hC9P/Tg0eGnKcy6Q1
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
astW9uqXt9/R7zVolKvs/laXS/XDo5ON83Fe7mXDd+jZ/S8Nys/wuVxYrKiO
r18nLM96MH4H95cpUVxf26a5w/A1ypfVVzRt4Nx35ZjS+tYubUPe39Yx04yz
eTh9fEySXrF4uXG+jmZj9+xf//pX0y8jtmwZKxW4fxX6O+dXwe/c3yT3r3J+
lfxO/wx4FAxPfge7llOB/nfq7/SM0zdDFqa+LbMbqX3LudJQ/B0Oz4eaX5Xf
L/V+6Z+h750eGjwP7m/i+woXKW9/E+d3K7vtn1/FuQ/nV5n/jvMjmR8p/TM4
t8KMMfevnrX7m2zZyn79c3Hu7XV6s0c//dAoy+6Z9doJj4fk56taNdEFCxTQ
43p1yTa/Ozp7x1SdvWypko72fm+fHrprvTopt63leGrA9PDPXyZ8Nej5V16h
vxx/wDifh9MfTturp02bZpyzo9VHjhwx/fJhy5bRUt7+JnQ/lxO5v6m78vY3
tVHp51frKm8OM1alastVVGB+pPTPcLaT2ZH0ncjdTdKrIvlZavCh+Dsj7ztv
JzV4Xsrmz5L5M9TheU7B3Bmef7DJ7vI5830IsDv1d86v0jvD/U3N3eOMlvkz
nF/F7wa/I/A7/DNnTP/92LJ1Lhfevzpx49Cos/sbva/RD9xpPTPh9MYpK0Ly
eFylCvriyhXDzowJxe/+HhXfwfHkTOnd3fHMwzsPnw188iO7tQu47Ym5B42z
ebj90vKdxjk7Gm0977ZsBfhnBrhs2Fd5/pmuLkPCywFPB/V3zq8iQ5I6cqzL
p9CXK6vA/Bk5u8rdTbiU2e/0vjOXkRzN/Un+HPhg/K1U1j013Nfq1/fleQMf
2wXKe49AMjx3N1GDJ8NzfpfZkWh44Gu5xwvnPZwjoP7O9zlwzKm/41yK+1fR
4Hf8zuz+Jlu2clj/+fe/9cfde0SN3V/vN1TfP9LOqobbj45PCDmXWqCA0te0
aRZRfoefBreDn2ZyCr+nvK7qqa43vmHVyvqyxvUCbv/O/K3GuTwrvWnVeuO8
HcletmyZ/u03G71m6/wud3/TaZW6vwk8yP2rnF+NV6neGXQ7ly+RkdJYebOr
9ZXn54a2DIb3e9/hIeFOUvrE/do7OV7uXZUZNPSmZ8Tf0hsfqmSGvP/2hcRt
+B6A1N7po2GT3bnHiewu/e/0zzCDBscpTnn6ewPl7WDl+xs41jjmzJ8Bv8PT
RP87+f2M9c/YspXzOnvsmP6gaYuIs/uRgbfrlbfZjMis9Iqh1wXl7C714nTp
EsUdr0sk+b1vs4a6QQqn4+PEy1P5HRmS+LxelUq6V6NAft81cY5xJs9KfzE+
WS9esMg4d0eip0+frr/77jvTLxe2bOWJUqn+mavdpv4u/e/0z1B7xyUYnvo7
GJTZkfTPMAOe+TPllLd7lTmLnF0Fw1PblrOr9KpQB6fGTqYPxt+Zsbv02EjN
nn4ZuStKemikF5/cTu8MfUD0z6B5rkL/Oz1F1dxjhGMFfr9Yef73Zipw/yr0
dzA8fgf4XUB/l/mR8L//audXbdmKTP24c1dE2f3VG8bp5bfsNs7D51KvHLEt
KGMj8zHmwpK648Wx6a7rlPI1ZLjLr43o2s5peNyRBY+P4Wv3fy88MsiXH3eJ
56evWKa07ppyrjC8UxtdvEhhfUvnwHnWRYP66S/H7jfO5Vnpd2fu1VOmTDHO
3zntDz74wPTLhC1beaJc/R3zq9I/09tlxZ7K8793dpmS+SjQisHv9ZXnf49T
gftXK7r8SoaPUYH5kcxtKaEC/TNkZc6QUv+WTB2Kv8PZvyr53Z8XX9D3dZlZ
6d/fRA2e5yJSf49Rnn8G/E7tvaoK5He8f9FAeRk0cv8q/TP4HeB34d/f5Oxf
tfq7LVuRq3/MnhMRdn/55ql66TC7VzWr/WjCY0H5/Yb2LRxdHD51/3XNalRz
dHb5NRVk3xM43f+9japVSTejCl5HJjxybjDTGuzxfDn7kHEmz2ofuG+bcf7O
ST/33HOmXx5s2cpTpbz5Vam/g9/pnwG/M/+9pQrkdzT041iVfv8q/TPlXZ71
72+id5weGqm/yzlWsjk1eMnvfv4OZ/8qy7/Hyb/DSc7PFvH1BaKZHckMGj7H
GPf5V1SB70nAXwR+5zlPA+XNr7ZQgf4Z6X9n/jv879Tfz1j93ZatyNX/Us6H
jw++IUfs/uKIuXrJUPMsfC72ximLw/bGmOwPFm43zuPZ6cdWPmycw7PTDz30
kLZalS1bgaVS9Xf436G/w5sBfge7Q/ONd/mR/newJTJSwO/Qi+sqL4MmVqXy
u2RV6X9n/jtnV8G93H/E3U3UtMns/ux1pQI1dz9/Z8bvZH7ppZd5NnJuVWZI
yt1Ncn8T/e9keM6wSu9Mebfl7CrZnfyObuYe21bK299E/Z38jt+N3N9k/e+2
bEW4/vOvf+ljXbpli90P3bVcL7bsnu1+ZMxo42weTu+ZtMg4i2enP52QrOfN
mWucx7PSs2fP1j///LPplwVbtvJcqVT9nfnvYENovNDf4YFH9gzZvZ3Llq1c
zqT2Tv87WLS6y6jc30T9nfxOhuf+JpkDTzamj4YeGjlTKj0twfhbqYwZXjK+
zIpk+T068tyhkAr0z0gN3p8fWUp52ffQ3zG/Sv87znFquscLvhn//Cr97zje
cv8qGF76Zxz93fTfjy1b+bFO/9//6febNM8Su+8bs9o4/57rveT6K42zeTi9
fPBA/eXofcZ5PDv95rw9OjEx0TiXh9N4nCdOnDD9cmDLVp4slZo/48+P7OV2
vMuQnZTnf4cGD+29ofI0eDm/Sv87ve/U4KW3hN53Zs748yODae9ka+lf9/N3
Zv53f+6k/FqwWVb+TPlY+BiZmUNu5zkJ9XepwdNDw3xNnu/4/TPNlMfv0N+Z
QSP9M8x/x3smZ03//diylV/rX1ueDZvd90zYYJx9z/V+4M4txrk8K31y1rnn
gWc/v+pp42weTtsdTbZshS6Vmv8OL8aVLhtSf5fzqx1cpkT2DPid+e9+/0w1
5fF7JZdf/f4Z5r/LDJoSytO1ychyftWfD5MRf2emvyvl6ev+vU/St+Pf/0r/
jMyCZ/4MPUHo0sp7r6GC29Df+d5ENXG8uL8J50GN3WOLY9xepR53vP/h98/A
/0793ebP2LIVxfrH7LkZcvu79Rrq5xKeMs6++aHXT3rEOJNnpT9a9JxxDs9u
nxidpNcsf8A4n2fUycnJpv/527KVZ0vkz0DL5fxqH5cVkVsYr1I92GR4aMPN
3Kb3AxmI8HNDf68hOJWZ537/DP3iMn+muPLmV4PtPJVZkhnxd7g7WHnbYPcj
2z/DWlg8Tvrf5Qwr+Z3au5zhZYZkTeX5Z+q5DX7n/CqOcRv3eEN7B7/L/at4
nyTN/276b8iWrfxefxk7Nji7N2istyc+a5x780tvnDzPOJNnpQ9MW2mcw3PS
Hycm61kzZxnn9GC9detW0//sbdnK86VS/TP0v5Pf6X8HN4Lf4cVuq7x8Q/pn
0HXcjlWp/E52r6i8DEmZPVNaBfrfmT0jveWyObdayHcZjL8zm2H1366A7zr/
LKs8j5A+H3/+DJv+GT5fzq7ieGAmgP4ZHCvmv5Ph8Z4G82dwrKHBy/1NYHfq
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
iyz4Y5Tgd9RHH33k5OF06dJFFytWTD/55JPO1zPi93nz5gV87aWXXnJ+Prge
/nl4YHDuI78/M36vW7eu7tq1q96zZ49+//339bvvvus8Vpxz2LLlL+Xlv4MJ
Zf77JS47Sv0dujD979TgoSHHuUxaU3n5MxVEM08xRnnzq9Cr6UORl/7cF6m/
S508GH9n5oEPNuMq+d+/exVdVHxNZr+T22WePTN2+Fz5/Jk/Q/0dx4oaPPV3
7m+if4b5M9yjxfxI5r/b/U22bOXhev+Fv+ilQ583zsh5uTdOWWqcvSPRc/pf
pk9OPGCctaPRJ0Yn6TXLH8wyu4NjwcXRKnhloHPPmTPH8ZfIjouL04sWLdLb
t2/XBQoUcGZcWWPGjEnH77L69+/v+M5R69atc3RwfwXj99mzZ+tatWoFfA25
OOHy+7fffus8rgMHDqRdf/DgQcvvtoKWq7+fVV7+e3/l+Wfgf493GZL5M9Tf
Ob8q9Xfub6J/hvkz8NDQ+84dTpz3ZA4889/9HnjyO9ldZsQE4+9w8yPl/Kv/
UvroZe679PXwXKO48nzv9L7TQ1Pafe7l3UuZHxmrvPwZHDvyO/V3HGvo75g7
wP5b+t/xu4EGj3MtnHOdjYaf0JYtW5Gpz9/+Wq+4bY9xTs6rvW7ceOPsHak+
viB/8jv648RkPXvmrLDZHTObJ0+ejOq/LTAttHJkqPsLjN6oUSMnoxIelFtv
vdWZMQWPV6lSJY3fT58+7fhtkDVz/PhxfejQIR0bG+vkyKAwi4rbQg//5ptv
9C+/pL7lHYzf4e+HD+exxx5zfDALFixwMmTC5Xd4YeHdxywtHuvevXt18+bN
Lb/bClkpfxu/uyw4wO2+Li/Gq1TdFwzZQQXmR8r8Gc5h1lKe/s7sd+av0P8O
pmVOi9SupaecGnwB5XG81MTljKqfv8PJoPF/L79Pfr/kdplJTz++3BkrvUAy
Q7Kc8mZYqb/jfYka7rHi3iuc/zRym/MFnF8Fu8erVO0dnibwO34/5PfTpv9+
bNmylXF9/9UpvTbhsHFWzou99IZBxrk7Uv3mvM3GOTua/frC5x0/TGbsjllS
aMnRrksuuUT36NEj6HVHjx51uBeXYF9kOpYoUcL5npUrV6bxOzJmoLdXq1bN
ORcA2w8fPlyfOXMm7b5uuukmh6uVLz/Sz+8o+HlwW2j2yLLEbbLin8HcLTw0
8P/gdvv27bP8bitkKW9/E/Pf5fwq+LGr8vT3li5jUi9mdiQ4tKby8iM5v0oP
PDiWurTMapE5jHJmlR8XEpcyJzIUf4eb/S45X86zSq2f/neZgSPfH2B2JPNn
eG5C7T0Yv1dW3vwqjxtmgMHuzJ6BR4n6O/c3MT+S+e/4XeF3Zvev2rJ1DtSv
Z37XO+970zgv56VedftW48wdyd46drpxxo52b1/1ZIbsjizHSGa727JlK3i5
+1eZP4Mmv0N/D8bvyEfh/Cqz36kjMz+yugrcvQrtvYxo+meoVzN7poQK1LiD
8btS6T00kr8z2q+qfNdLrV2eFwSbXWXuDC+lf4Y+eObq0ENTVnkzrOB3au81
3a6jvOxI5kditgDvcYDhOykvPxKzCL2Vlz+T5p8x/Tdky5at8OuNPcf10mHW
E49en7jOOHNHsudfeYX+ctx+44wdzT4+Jknft2RFUHaHdmzz0GzZyr1S3vwq
mvx+mcuMYEf639spzz9Dvwe0Y7m/ifOZ4FVozcyPZMuMFvpnJAuT3+l7l5q4
P0cyFH+H2s+qVPrMeP9teT1/Dn0zhcXH1OCZ/c7nUVJ5Hn8+X+rv1OBlfmSs
8uYHcBzxfkZz9/jiWMv9TcyPZP479PdrleV3W7bOufrbx9/rB0btM87PpnvD
5AXGmTvSfWJu/tvj5O+Ppibpe6ffm8bt9957b1TnVG3ZshW8VKp/ZqDLhJxf
7e0yI/V3+N+5u4n6O5gTujGzZ6i9V1XeDlbuL2J+JPPfpYeGs6tFfZeSocnq
/uzIjFg9WPm1e//uVqm987bS/y51eJ53yPcSZAZ8WfH85f5Vzq+i6ynPP4OZ
Ahxf8juOOTT4eOX536m/o/F+yWm7f9WWrXOvTv14Rj85+1XjDG2yH75nlHHe
jnS/s3Crcb7OjX552S6H3eEl/+GHH0z/c7Jl67wsFbh/Ffo751fB79zfJPev
cn6V/E7/DHgUDE9+B7uWU4H+d+rv9IzTN0MWpr4tsxupfcu50lD8HQ7Ph5pf
ld8v9X7pn6HvnR4aPA/ub+L7Chcpb38T53cru+2fX8W5z/9n7zvA5KzK718I
NWAqhBIIawgmgARBQk+yCQFCIoQmTelVUIqIlB9VeoCgWACpKih/C4KgUkQp
CkgVCRCkBBILgg2EJCB6/3O+uWfvmbszO7PJZodk3/M87zO7s1O+ud8Ezj3f
ec/L/lXmv2N/pPmR6p/B3go9xpy/OtevVzociyb++/5/wy++1TNnPV3w6VvC
BXvs2HS+3dV1yxfObjq37pY6+o7w6M9/vVDmqTocjsZgaX4TasfIEzm/aayl
+U2bWPv+1XUs9WG2WFlbXs0q8yPVP8PeTmZH0neis5vUq6L8WTX4Wvy7I+87
H6caPG+1+F6aP0MdnnsK5s5w/8Eid9fPzOsQ4O7U39m/Su8M5zdtGNcZpfkz
7F/FucE5An+Hf2ZO/TPscDg+yHjuwT+Grxz+86Zz6u6sr3/2pqZz7YVRF+6+
U3j5mMXbA//KKb8M70x/vdn/bByOHg9L/pkpkRtOtuSfGR05JLwc8HRQf2f/
KjIkqSO3RH4KfXlVq8yf0d5Vzm7CrWa/0/vOXEbyaM5PynPgq/Fvs857ajiv
Ndf3dd/AY1vO0jUC5fCc3UQNnhye/bvMjkTBA79WXC/se9hHQP2d1zmw5tTf
sZfi/FUU+DvOmc9vcjgWA/z7n/PCzdN+23Re3V113cnfaDrXXlj18lm/aDrH
Xlj1l8sfD/95y2PPHI5mI85vesfK85vABzl/lf2rrVb2zqA2jfwSGSnrW+pd
HW7Jzw1tGRw+977DQ8KZpPSJ59o7ebzOXdUMGnrTO+Lf6o2vBc2Qzx/fSx7D
awCqvdNHwyJ35xwncnf1v9M/wwwarNNQS/r7CEszWHl9A2uNNWf+DPg7PE30
v5O/z3H/jMOx+OCZX88Ol31m8dfirzvxzKbz7IVVT51/c9N5dlfXzM/fFd68
79Vm//NwOBwCK/tndo1F/V397/TPUHvHLTg89XdwUGZH0j/DDHjmzwy0NHuV
OYvsXQWHp7atvav0qlAHp8ZOTl+Nf9fj7uqxUc2efhmdFaUeGvXik7fTO0Mf
EP0zKO5V6H+np2hwXCOsFfj7MEv+95FWOX8V+js4PM4BzgX0d82PhP99nvev
OhyLF97517zFPiv+60cc2nSevbDqpydd2HS+3ZX1xwt/E979y7+b/c/C4XAI
ov6O/lX1z0yMXHG8Jf/7VpFTMh8FWjH4+3BL/vehVjl/dVDkr+Tw/a0yP5K5
Lb2t0j9DrsweUurfyqlr8e9G5q8qf8/z4pfM7tfMynx+EzV47kVUf+9vyT8D
/k7tfXWr5O+4fjHCUgaNzl+lfwbnAOcin99UzF91/d3hWDwBX/ziqMVP3e/H
4exddmg6z15YNW2v3Yv+zmbz7gWtV078RXjz3lfD//7rGpHD8UGEpf5V1d/B
3+mfAX9n/vtGVsnfUdCPW6z9/FX6Z1aKfDaf30TvOD00qr9rHyu5OTV45e85
/25k/iqRz3HKZzhp/+zSWS0nxexIZtDwM/aPn3+QVV6TgL8I/J17nhGW+lc/
ZpX+GfW/M/8d/nfq73Ncf3c4Fl/MefPdcMtXFi8t/opjb2g6x17YNfOMe5rO
v+e7SnuPN258Ovz3bfe5OxwfZFhZf4f/Hfo7vBng7+Du0HxbI3+k/x3cEhkp
4O/Qi9exlEHTYmX+rlxV/e/Mf2fvKngv5x9xdhM1bXL2PHvdrFJzz/l3Pf5O
zq9ees2z0b5VzZDU2U06v4n+d3J49rCqd2alWNq7Su5O/o4aGdd2Y0vzm6i/
k7/j3Oj8Jve/Oxw9ADN++6fwtc/e2XTu3RV1/cmXNZ1fL+yafsGtzefh81F/
uvihMO+VfzX76+5wOBqAlfV35r+DG0Ljhf4ODzyyZ8jdN43ccuPIM6m90/8O
LrpG5Kic30T9nfydHJ7zmzQHntyYPhp6aLSnVD0t1fi3WcccXjm+ZkUSuUdH
9w69rNI/oxp8nh/Zx1L2PfR39K/S/449zpC4XvDN5P2r9L9jvXX+Kji8+mcK
/b3Z3x+Hw9E9eHfef8K9Nz0bLjnwtqZz8AWpa044pen8emHXXf/35aZz8c7U
K6fcE956cHazv+IOh6MTsHL+TJ4fOSFWa+SQW1ryv0ODh/a+riUNXvtX6X+n
950avHpL6H1n5kyeH1lNeye3Vv96zr/r+d/z3Em9r1ovK99Tj4XHyMwc8nbu
Sai/qwZPDw3zNbnfyf0zIy3xd+jvzKBR/wzz33HNZG6zvz8Oh6N78a/X3wk/
XoQ9NV85eL+m8+uFXV/d99NN5+QN1bF3hr/94Nnw37nvNftr7XA4Ogkr57/D
i7Fz5IbU37V/dfPIKZE9A/7O/PfcPzPYEn9fJfLX3D/D/HfNoOltSdcmR9b+
1TwfpiP+XU9/N0v6ej73SX07+fxX+mc0C575M/QEofpautawcizo77w2MVjW
i/ObsA9aP64t1ngzK687rn/k/hn436m/e/6Mw9FD8eqzb4TrT72v6Xy8M3XJ
gTeHs3bctun8ujtq5qkf7Bz4P1/2SHj3z54r43AsipD8GWi57F+dFLkicgtb
rezBJoeHNjwyFr0fyECEnxv6+5rCU5l5nvtn6BfX/JnlLfWvVpt5qlmSHfHv
Rmew8rHVXkcr72FdSo6T/nftYSV/p/auPbzMkBxiyT/zkVjg7+xfxRpvEtcb
2jv4u85fxXWSNv97s79DDoejuXj2N38MV3z+7qZz80bqm8df33Re3V317AW3
N52jV6tXT/tVePvxvzT7a+twOBYQVvbP0P9O/k7/O3gj+Du82KMs5RvSP4Na
O1aLlfk7ufsgSxmSmj3T1yr978yeUW+5FvtWe2W31fh3vR7W/HFLZH/Le1l1
H6E+nzx/hkX/DD8ve1exHugJoH8Ga8X8d3J4XNNg/gzWGhq8zm8Cd6f+7vkz
DoejDf99/7/hsZ+/9IHPm7z+5GlN59XdVb86/RtN5+par5x8T/jnHS+G/737
n2Z/XR0ORxfAyvo7uKD6Z6i/Q/uFBxv6Ozg8/TPQipn/Tu39w5byZ5g9o/Ob
BljS3/P8mVx7J2/Oc2A0470a/24kf4a8X700+po69zXPf9d8evbeav479ibk
7/i81ODpJ2L/6lAp9hFgTdEXDO0d3F3zZ5j/jr0VODzOFa6ZvOv5Mw6Hg5g3
573w8G0vhK9/7oOZVXP157/QdF7dXXXlQQc3nbMXevv//TL8856ZztsdjsUI
4H5Wmf8Obwb5+zaROzI/Etyd/aucvwr/NrRj6u/UlwdbZf4M89+pvZP30kuj
M021Z1W95+pvqcW/+Xst5Pw+72Xl6+r8Ju2n5TWCZaW4D8Ftn/gZB0rRA8/8
SO1hhf7O/lXmz+Tzm8Zb+/lNuFZSzG9y/d3hcOR4//3/hqd+9Ur45gn3NJ2z
a12y3x5N59XdWTNPaZ4H/tUz7g1v3vdq+N97rvE4HIsjrKy/g7tD00V+JDRe
cHh4NsZEDgk9mPmRzI7k3FD2rzJ/Jp/fBB6fz2+iZs0eUJ1pyt5Q1cA1a0Y5
eLUsmXpQvp9nR/I1dGaU6vDcZzB7hsfPz7SCpX1Kv7gG7AHg/FVeqxhqqf8X
eyD2FdD/Tv0d5wB7KfiZwN+xxwJ3h/7u/neHw1ET2N8//+ifw3fOvL/p3P3L
h/2w6Xy6u2vGBd3P2/947gPhrd/MDv9737Udh2NxhqX8mV0iP5xsyfs+LvJH
5r8zn5z5MyMscXfcMl+Fvavg7/TOkNPSY7KiVWYwLiscmVydvN6sOo+vxr8b
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
WfWlnbYLM4+/q24f6mtXPh7+/dhfwv/e9WuqDoejY0j/Kv3vk2KBK4LDQ/el
/536u/pnhlvKMsctMxKpN3P+Kmc4kb8ze4b9qyz2iKrXXPNozKrr8Mq/6+VH
Vut31fyafK+wdHa7bPyZ/F39M5r9ztxM3JK/c/4qve9rx3XEeiKDBtn6WGf1
z7RaOT8S+jv6isHfcZ2k4O/un3H0BNTzz8CfDv5+2mmnFR4YcPq8XnvtteKx
9L/nsGx/8Ic//KG4D3ya+PnPf17c97e//a34fb/99gtrrbVWcV0AHhq8D14b
x0KAv59zzjkV74XH4DgIPBe8f+bMmeGggw4KW2+99XysUvcAmvDsGX8P9970
bLjulHsbyqP8xpGHN51HN7NePKc9f8d8JWTH/PuRP4b/znmvW8/h7rvvXvjD
HA7HoonI39U/Aw/8pMgVwd+h/W5pib9z/uoGkW/COwP9HRoydOU14q36Z+ih
oXemj6V+TxY1bWjZ6oPXXtJeVtlfWo1/m6U+12pQjt8r+z2fu8rMG9Xgl5Nb
HiuvIfCz0UMzQD4/+TuzNVvimnF2E/R3XNNgvj56heGhIX/HPgp7Knib2L8K
/4wH5jl6DEaPHl2zf5X8/dZbbw1LLbVUwb1roSv5+/Dhw8OJJ57Y9vc333yz
0OE7y98BXEM4/vjjC0/Q1VdfXfP4P2h46x9zwu9+OTPcPO234cuH/aw9f9/v
lnDebpOazqGbWY+e+93wyim/DH+99snw1gOzwnuvv9PUc+b83eFY9GEp/x2c
UPPft4ncUfV36ML0v1ODh4Y8NHLSIZbyZ1aWYp5if0v9q9Cr6UPR2zz3RfV3
1cmr8e96HvhqPa7K//PZq6hl5D7Nfidv1zx7Zuzws/LzM3+G+jvWiho89XfO
b6J/hvkznKPF/Ejmv/v8JkePArJemB957bXXFv2kTz/9dLjyyiuL+w8//PBC
kxg1alTBj9FzCg5+zz33FH2l6GcFupK/gwPBq47HoJcVfbPImJkf/n7ppZcW
mTPg/3PmLJqjlbH+r7/6Znjynpnh9iueCN884Z5w+THfbTp/bkZddsinw80X
nRse++mt4W+zZjf71FRA+fvNN99c9Hzje4c+DOQvacYS/x2g92PjjTcu5i7A
L4Z/C8T7778f9txzz+K7jv6QoUOHhnPPPbfqe5555pnFv1e81/77799j81sd
jgVB1N/nWsp/38mSfwb+99bIIZk/Q/2d/auqv3N+E/0zzJ+Bh4bed85wYr8n
c+CZ/5574Mnfyd01I6Ya/240P1L7X/Nb9dFr7rv6erjXWN6S753ed3po+sbP
vlK81fzIFkv5M1g78nfq71hr6O/oO8D8W/rfcW6gwWOvhT3XXPx30+HoKZg1
a1Y48MADi9xH9KCCK0O3Bifg/KZ//etfhQdltdVWKx6DvMZddtklvPzyy8Xf
u5K/4zHIf0TeJN7nwgsvbLsWQDTK36HdI6MSnGZxwty33wkvPf5IeOCm74Sb
zjk9fOWgfcJZO27bdH7dVXX2LhPD5UcdEm6eem74zQ++V/qsj4Z3/vXPZi97
h1D+jvkJ3/nOd4r8JHzXsQcdMWJEoDeT/w5w7QuPxb557733Lv7twdcGgIPj
2hF6RdA38s1vfrP4LmtPNt4TveX77rtvkb30/e9/v3gM9q0Oh6PzKP27fC9y
wSmxJke+2Gpl3RcccnOrzI/U/Bn2Ya5lSX9n9jvzV+h/B6dlTotq1+oppwa/
hCUer5q49qjm/LuRDJr8uXyePl95u2bS04+vM2PVC6QZkgMt9bBSf8d1iTXj
WnHuFfY/68VifwH7V8HdW62svcPTBP6O80P+3tyLsA6Ho8uA/QU88A8++GCz
D2Wh471588JrL70Qnr7vnnDvjdeHH114drjqmCPCBXvu2HQ+Xqsu2mfX4hi/
X9qD3HX1N8Lv7v55eO3lF8N/F0ENpSP/DHKZSv9vCY8//njxO/k7ekuI9957
r+Dzp59+es33wD50hx12qHhP7GVVc5o8eXLYcccdF/TjOBw9EpbmNzH/XftX
wR9HW9LfN4ock3oxsyPBQ4dYyo9k/yo98OCx1KU1q0VzGLVnlT/3klvNiazF
vxvNfleer/2sqvXT/64ZOHp9gNmRzJ/h3oTaezX+vqql/lWuG3qAwd2ZPQOP
EvV3zm9ifiTz33GucM78wqPDsYgD2iXy4qdMmRI+/vGPN/twmo5//+Pv4Y8z
ng3P/eb+8Ojtt4Rffvua8JPLLg7fPfOUcNVxnwmXHrBXuGCPHcOXpmy/wJz8
3F12CJd8evfwtcP3D9cc/9lw4xknF56XO678anjox98PMx56IPx15kvh3bmL
pp+pFpS/wyuD7x6uaUFTR4ZS6f8t4Yc//GHxd/L3O++8s+I18PxPfvKTbb8j
D3WDDTZoy3TFtS9cG9P3xJxkBXKXcP3K4XB0DnH+KvNnUOTv0N+r8Xfko7B/
ldnv1JGZH7mGVc5ehfbeT4r+GerVzJ7pbZUadzX+btbeQ6P8u6P5qpb9XbV2
3RdU611l7gxv1T9DHzxzdeihGWCphxX8ndr7kFhrW8qOZH4kegtwjQMcfktL
+ZHoRZhoKX+mzT/T7O+Qw+FYMNCTA88wcmgcjQPa99y33wpvvvF6+NvsWeEv
L70QXp3++zDzycfDzN8/EV75/ZOl358Ks555Ovz5DzMKLv7G7FfDv15/Lbw7
r+f+51P5O7zs6A2//fbbC2/ME088UeEl64i/Y6YwAJ8MfO+YUYaZaMhh+tSn
PlXhU6um+cNnBr+Zw+HoPCz1r6LI37eLnBHckf73TS35Z+j3gHas85vYnwm+
Cq2Z+ZEszWihf0a5MPk7fe+qiec5krX4d635rGbtM+Pzx/LvfB/6ZpaSn6nB
M/udn2MFSx5/fl7q79TgNT+yxVL/ANYR1zM2jOuLtdb5TcyPZP479Pc9zPm7
w+FwODoJcmn410v/Hwl33XVX29/uvvvuqvxdvTLwz6Dfg/ehJwVzihVbbbWV
83eHYyHCyv6Z3SInZP/qxMgZqb/D/87ZTdTfwTmhGzN7htr76pZmsHJ+EfMj
mf+uHhr2ri6T3SqHJlfPsyM74urVkGv3+exW1d75WPW/qw7PfYdeS9AM+AHy
+XX+KvtXUR+x5J9BTwHWl/wdaw4NvtWS/536OwrXS97x+asOh8Ph6AzIpXEN
Hn4XzAeGZo75xfC8WBX+vsYaaxRzDtB7Cm0dXhvOVEDWDHpTkfk0ffr0Yo4x
fnf+7nAsPFjl/FXo7+xfBX/n/Cadv8r+VfJ3+mfAR8Hhyd/BXQdapf+d+js9
4/TNkAtT39bsRmrf2ldai383wudr9a/q81XvV/8Mfe/00OBzcH4Tryt8yNL8
Jvbvrhor71/F3of9q8x/x/5I8yPVP4O9FXqMOX91rs9vcjgcDkdnsNtuu7X1
lt52222Fhwa5kODbd9xxR1X+jpkEH/vYx4qMUzweXJ+YO3du4YVHBiUKc80+
97nPOX93OBYiLM1vQu0YeSLnN421NL9pE2vfv7qOpT7MFitry6tZZX6k+mfY
28nsSPpOdHaTelWUP6sGX4t/d+R95+NUg+etFt9L82eow3NPwdwZ7j9Y5O76
mXkdAtyd+jv7V+md4fymDeM6ozR/hv2rODc4R+Dv8M8sXk1VDofD4VjoGDNm
TDjggAMaemy1HFWHw9F8WPLPTInccLIl/8zoyCHh5YCng/o7+1eRIUkduSXy
U+jLq1pl/oz2rnJ2E241+53ed+YykkdzflKeA1+Nf5t13lPDea25vq/7Bh7b
cpauESiH5+wmavDk8OzfZXYkCh74teJ6Yd/DPgLq77zOgTWn/o69FOevosDf
cc58fpPD4XA4GsIbb7wRfvCDHxRau8466AjO3x2ODx7i/KZ3rDy/CXyQ81fZ
v9pqZe8MatPIL5GRsr6l3tXhlvzc0JbB4XPvOzwknElKn3iuvZPH69xVzaCh
N70j/q3e+FrQDPn88b3kMbwGoNo7fTQscnfOcSJ3V/87/TPMoME6DbWkv4+w
NIOV1zew1lhz5s+Av8PTRP87+fsc9884HA6HoxHAv4Lc9mOOOSY02jvl/N3h
+GDCyv6ZXWNRf1f/O/0z1N5xCw5P/R0clNmR9M8wA575MwMtzV5lziJ7V8Hh
qW1r7yq9KtTBqbGT01fj3/W4u3psVLOnX0ZnRamHRr345O30ztAHRP8MinsV
+t/pKRoc1whrBf4+zJL/faRVzl+F/g4Oj3OAcwH9XfMj4X+f5/2rDofD4XA4
HD0HUX9H/6r6ZyZGrjjekv99q8gpmY8CrRj8fbgl//tQq5y/OijyV3L4/laZ
H8nclt5W6Z8hV2YPKfVv5dS1+Hcj81eVv+d58Utm92tmZT6/iRo89yKqv/e3
5J8Bf6f2vrpV8ndcvxhhKYNG56/SP4NzgHORz28q5q+6/u5wOBwOh8PRs2Cp
f1X1d/B3+mfA35n/vpFV8ncU9OMWaz9/lf6ZlSKfzec30TtOD43q79rHSm5O
DV75e86/G5m/SuRznPIZTto/u3RWy0kxO5IZNPyM/ePnH2SV1yTgLwJ/555n
hKX+1Y9ZpX9G/e/Mf4f/nfr7HNffHQ6HozEgA6X03812hexEh8PhWJRgZf0d
/nfo7/BmgL+Du0PzbY38kf53cEtkpIC/Qy9ex1IGTYuV+btyVfW/M/+dvavg
vZx/xNlN1LTJ2fPsdbNKzT3n3/X4Ozm/euk1z0b7VjVDUmc36fwm+t/J4dnD
qt6ZlWJp7yq5O/k7amRc240tzW+i/k7+jnOj85vc/+5wOBwNAvx97NixYfbs
2RX1/vvvVzxu3jyPBnA4HB9sWFl/Z/47uCE0Xujv8MAje4bcfdPILTeOPJPa
O/3v4KJrRI7K+U3U38nfyeE5v0lz4MmN6aOhh0Z7StXTUo1/m3XM4ZXja1Yk
kXt0dO/Qyyr9M6rB5/mRfSxl30N/R/8q/e/Y4wyJ6wXfTN6/Sv871lvnr4LD
q3+m0N+b/f1xOByORQXVMsgBZJAjT/Gwww4r5hltuummxf1f+tKXwvDhw8OK
K65Y9H0i1/zNN99se97Xv/71Iu8cc4uGDRsW+vTpU2Qzzpo1q+L1L7vssiIz
Hdnpq6yySkV24z/+8Y+wzz77hJVXXrmYibTFFluERx55ZCGtgMPhWFxg5fyZ
PD9yQqzWyCG3tOR/hwYP7X1dSxq89q/S/07vOzV49ZbQ+87MmTw/spr2Tm6t
/vWcf9fzv+e5k3pftV5WvqceC4+RmTnk7dyTUH9XDZ4eGuZrcr+T+2dGWuLv
0N+ZQaP+Gea/45rJ3GZ/fxwOh2NRQUf8Hdz5yCOPDE8//XQxYxQ455xzws9+
9rPw/PPPF/OK1l577YLDE+DvyyyzTNh6663Dr3/96/Dggw8WPH3nnXdue8xF
F10UevfuXcwoxWzSBx54oHhdAP7HTTbZJEyYMKF4/jPPPBOOOOKIYg/x+uuv
L+TVcDgcizKsnP8OL8bOkRtSf9f+1c0jp0T2DPg7899z/8xgS/x9lchfc/8M
8981g6a3JV2bHFn7V/N8mI74dz393Szp6/ncJ/Xt5PNf6Z/RLHjmz9AThOpr
6VrDyrGgv/PaxGBZL85vwj5o/bi2WOPNrLzuuP6R+2fgf6f+7vkzDofD0SDA
35daaqlCJ2dNmjSp4O/rrbde3edff/31BbcmwN9L/x0Ozz33XNt9U6dOLTR2
YrXVVgvHHnts1dfDnqBfv37F/FJFS0tLmDZtWmc/nsPh6CGQ/BlouexfnRS5
InILW63swSaHhzY8Mha9H8hAhJ8b+vuawlOZeZ77Z+gX1/yZ5S31r1abeapZ
kh3x70ZnsPKx1V5HK+9hXUqOk/537WElf6f2rj28zJAcYsk/85FY4O/sX8Ua
bxLXG9o7+LvOX8V1kjb/e7O/Qw6Hw7GoAPwdWjn6VVnwuoC/77333u0eD+0d
jwcHhz4PHb30393w1ltvFX8Hf4e3RnHDDTeEJZZYovj5z3/+c/F4vE41nHHG
GWHJJZes2E+gcN9RRx3VxZ/e4XAsTrCyf4b+d/J3+t/BG8Hf4cUeZSnfkP4Z
1NqxWqzM38ndB1nKkNTsmb5W6X9n9ox6y7XYt9oru63Gv+v1sOaPWyL7W97L
qvsI9fnk+TMs+mf4edm7ivVATwD9M1gr5r+Tw+OaBvNnsNbQ4HV+E7g79XfP
n3E4HI5OoiP/zCGHHFJx34svvljw9UMPPTTce++9hfcFPvbSf3fD3/72t+Ix
9L8rMNcUjwH+9a9/dcjfTzvttMJXr/sJ1muvvdYVH9nhcCymsLL+Di6o/hnq
79B+4cGG/g4OT/8MtGLmv1N7/7Cl/Blmz+j8pgGW9Pc8fybX3smb8xwYzXiv
xr8byZ8h71cvjb6mzn3N8981n569t5r/jr0J+Ts+LzV4+onYvzpUin0EWFP0
BUN7B3fX/Bnmv2NvBQ6Pc4VrJu96/ozD4XA0hs7w929/+9th6aWXDvrf2JNO
OqlT/B1Yc801a/pnbr311sLPgxmnDofD0Sjw3yWrzH+HN4P8fZvIHZkfCe7O
/lXOX4V/G9ox9Xfqy4OtMn+G+e/U3sl76aXRmabas6rec/W31OLf/L0Wcn6f
97LydXV+k/bT8hrBslLch+C2T/yMA6XogWd+pPawQn9n/yrzZ/L5TeOt/fwm
XCsp5je5/u5wOByNoTP8/eGHHy54OPpOZ8yYEa644opCK7dO8vdvfOMbhY5/
3nnnFf2p6HE9//zzi7/hv9+jRo0K6667bpFhAx5/zz33FHwf/awOh8NRC1bW
38HdoekiPxIaLzg8PBtjIoeEHsz8SGZHcm4o+1eZP5PPbwKPz+c3UbNmD6jO
NGVvqGrgmjWjHLxalkw9KN/PsyP5GjozSnV47jOYPcPj52dawdI+pV9cA/YA
cP4qr1UMtdT/iz0Q+wrof6f+jnOAvRT8TODv2GOBu0N/d/+7w+FwNIjO8Hfg
7LPPDquuumpYYYUVilxIcHjrJH8HLrnkkiK7Blk1eL2DDjqo7W/w2OB3eOzx
98GDB4dddtklvPzyy13xkR0Ox2IKS/kzu0R+ONmS931c5I/Mf2c+OfNnRlji
7rhlvgp7V8Hf6Z0hp6XHZEWrzGBcVjgyuTp5vVl1Hl+NfzeSP6PPyX301Nqp
v+u1AM2B19lTvS3Nb8p7WNm7Sv2dM5zA4cHbsQda39rnz1B/b7XE3+GBx/6K
+ZE+ZMThcDgcDoejByHmz8yxsp7L+U0TI1dkfuRWlmY4MX8GXJO+j2Gx8vwZ
6u/Mf+8buS25LvVqnd1E7q66t+Y55vp6zr8byZ/plT1GfTn5a+o+Qmevssjf
+Xk4v4nedxb9M6tZ4u4o+I6YH4k9Edb247Gov8O/RO6u85twzcT5u8PhcDgc
DkcPgvB3aLnMn5lsicOTv9M/w3xDcE3wd+jHzI8EH6W/exVL+ju5LPtXtXeV
/J05NDlPJn+n7m7Wnsfn/Lsef9f+1Tz7naW6O308veT4eMzMv2T2DDV4fE7q
78x/J3/X/lX634dbyp/ZOK411p36O/ZS8DNBe8ceC9y96F9t9nfI4XA4HA6H
w9F9iP2r8M/sHjkhsgnZv0r9nfnv5O/av0r/e4ul/JnBwlWpv/e31NuZz3Ci
j1x7V/P8FxZ5di3+XS8/MtfeFXn+u74vs2d0dhMzc5TDk7+j2LuK21UscXf0
CFCDx76HHpo8/x1rzvwZcHdkenL+KvMj3/b+VYfD4XA4HI6eBSv3r8I/A08G
+fuEWK2RR8LLMSrySnjg6Z/R7JkWq8x/X9VS/gw4LDk855Qyd4bed82O7GWV
OZLUv6nH1+Lf9fi7PtbkdZW7a8ak+mfozefP3HewFxe39L2r9x1rsJrUYEv7
Hawfc/Spv2N9q/ln2L8K/g4Nvuhf9fxIh8PhcDgcjp4FS/mR8M8g2wQcnvOb
qL/Dy8H5TdDeoRXT/w4OOtSS/g7tvZp/hv2rnNtE7Z08XjMkdXaTeljq8e96
3D3X7nP9Xmet5nsI/qz+GZ3fpPNXsU8hh8fehfnv8BZBe2+xSv8MCvx941jM
fwd3b7U0fxV7K/XP+Pwmh8PhcDgcjh4GS/ObdP4qtHf6Z6C/M/+dGfA6vwn+
GfZjgpsyYwV8lT2szI6kt4T+GZ3fpL2hqreTO6smXot/ay58LeTeed7mr6M5
NDpbSvca7F+l/x2/U4MfKJ8f1yKov6t/hr2/1N/J4bFXIn+n/k7/DPg7zhXO
mfevOhwOh8PhcPQgSP8q/e+TYoErgsND96X/nfq7+meGW8oyxy0zEqk3c/4q
ZziRvzN7hv2rLPaIqtdc82jMquvwyr/r5UdW63fV/Jp8r7B0drts/Jn8Xf0z
mv3O3Ezckr9z/iq972vHdcR6IoMG2fpYZ/XPtFo5PxL6O/qKwd9xnaTg7+6f
cTgcDofD4eg5iPxd/TPwwE+KXBH8Hdrvlpb4O+evbhD5Jrwz0N+hIUNXXiPe
qn+GHhp6Z/pY6vdkUdOGlq0+eO0l7WWV/aXV+LdZ6nOtBuX4vbLf87mrzLxR
DX45ueWx8hoCPxs9NAPk85O/M1uzJa4ZZzdBf8c1Debro1cYHhryd+yjsKeC
t4n9q/DPvN3s75DD4XA4HA6Ho3thKf8dnFDz37eJ3FH1d+jC9L9Tg4eGPDRy
0iGW8mdWlmKeYn9L/avQq+lD0ds890X1d9XJq/Hveh74aj2uyv/z2auoZeQ+
zX4nb9c8e2bs8LPy8zN/hvo71ooaPPV3zm+if4b5M5yjxfxI5r/7/CaHw+Fw
OByOHoaov8+1lP++kyX/DPzvrZFDMn+G+jv7V1V/5/wm+meYPwMPDb3vnOHE
fk/mwDP/PffAk7+Tu2tGTDX+3Wh+pPa/5rfqo9fcd/X1cK+xvCXfO73v9ND0
jZ99pXir+ZEtlvJnsHbk79TfsdbQ39F3gPm39L/j3ECDx14Le66577//frO/
Rg6Hw+FwOByObkSJA74XueCUWJMjX2y1su4LDrm5VeZHav4M+zDXsqS/M/ud
+Sv0v4PTMqdFtWv1lFODX8ISj1dNXHtUc/7dSAZN/lw+T5+vvF0z6enH15mx
6gXSDMmBlnpYqb/jusSaca049wr7n/Visb+A/avg7q1W1t7haQJ/x/khf3+n
2d8fh8PhcDgcDkf3wtL8Jua/a/8q+ONoS/r7RpFjUi9mdiR46BBL+ZHsX6UH
HjyWurRmtWgOo/as8udecqs5kbX4d6PZ78rztZ9VtX763zUDR68PMDuS+TPc
m1B7r8bfV7XUv8p1Qw8wuDuzZ+BRov7O+U3Mj2T+O84VzpnPX3U4HA6Hw+Ho
QYjzV5k/gyJ/h/5ejb8jH4X9q8x+p47M/Mg1rHL2KrT3flL0z1CvZvZMb6vU
uKvxd7P2Hhrl3x3NV7Xs76q1676gWu8qc2d4q/4Z+uCZq0MPzQBLPazg79Te
h8Ra21J2JPMj0VuAaxzg8Ftayo9EL8JES/kzbf6ZZn+HHA6Hw+FwOBzdC0v9
qyjy9+0iZwR3pP99U0v+Gfo9oB3r/Cb2Z4KvQmtmfiRLM1ron1EuTP5O37tq
4nmOZC3+XWs+q1n7zPj8sfw734e+maWscn7TMpay3/k5VrDk8efnpf5ODV7z
I1ss9Q9gHXE9Y8O4vlhrnd/E/Ejmv0N/38OcvzscDofD4XD0OFjZP7Nb5ITs
X50YOSP1d/jfObuJ+js4J3RjZs9Qe1/d0gxWzi9ifiTz39VDw97VZbJb5dDk
6nl2ZEdcvRpy7T6f3araOx+r/nfV4bnv0GsJmgE/QD6/zl9l/yrqI5b8M+gp
wPqSv2PNocG3WvK/U39H4XrJOz5/1eFwOBwOh6NnwSrnr0J/Z/8q+DvnN+n8
Vfavkr/TPwM+Cg5P/g7uOtAq/e/U3+kZp2+GXJj6tmY3UvvWvtJa/LsRPl+r
f1Wfr3q/+mfoe6eHBp+D85t4XeFDluY3sX931Vh5/yr2PuxfZf479keaH6n+
Geyt0GPM+atzfX6Tw+FwOBwOR8+CpflNqB0jT+T8prGW5jdtYu37V9ex1IfZ
YmVteTWrzI9U/wx7O5kdSd+Jzm5Sr4ryZ9Xga/HvjrzvfJxq8LzV4ntp/gx1
eO4pmDvD/QeL3F0/M69DgLtTf2f/Kr0znN+0YVxnlObPsH8V5wbnCPwd/pk5
zf7+OBwOh8PhcDi6F5b8M1MiN5xsyT8zOnJIeDng6aD+zv5VZEhSR26J/BT6
8qpWmT+jvauc3YRbzX6n9525jOTRnJ+U58BX499mnffUcF5rru/rvoHHtpyl
awTK4Tm7iRo8OTz7d5kdiYIHfq24Xtj3sI+A+juvc2DNqb9jL8X5qyjwd5wz
n9/kcDgcDofD0YMQ5ze9Y+X5TeCDnL/K/tVWK3tnUJtGfomMlPUt9a4Ot+Tn
hrYMDp973+Eh4UxS+sRz7Z08XueuagYNvekd8W/1xteCZsjnj+8lj+E1ANXe
6aNhkbtzjhO5u/rf6Z9hBg3Waagl/X2EpRmsvL6BtcaaM38G/B2eJvrfyd/n
uH/G4XA4HA6Ho2fByv6ZXWNRf1f/O/0z1N5xCw5P/R0clNmR9M8wA575MwMt
zV5lziJ7V8HhqW1r7yq9KtTBqbGT01fj3/W4u3psVLOnX0ZnRamHRr345O30
ztAHRP8MinsV+t/pKRoc1whrBf4+zJL/faRVzl+F/g4Oj3OAcwH9XfMj4X+f
5/2rDofD4XA4HD0HUX9H/6r6ZyZGrjjekv99q8gpmY8CrRj8fbgl//tQq5y/
OijyV3L4/laZH8nclt5W6Z8hV2YPKfVv5dS1+Hcj81eVv+d58Utm92tmZT6/
iRo89yKqv/e35J8Bf6f2vrpV8ndcvxhhKYNG56/SP4NzgHORz28q5q+6/u5w
OBwOh8PRs2Cpf1X1d/B3+mfA35n/vpFV8ncU9OMWaz9/lf6ZlSKfzec30TtO
D43q79rHSm5ODV75e86/G5m/SuRznPIZTto/u3RWy0kxO5IZNPyM/ePnH2SV
1yTgLwJ/555nhKX+1Y9ZpX9G/e/Mf4f/nfr7HNffHQ6Hw+FwOHoWrKy/w/8O
/R3eDPB3cHdovq2RP9L/Dm6JjBTwd+jF61jKoGmxMn9Xrqr+d+a/s3cVvJfz
jzi7iZo2OXuevW5Wqbnn/LsefyfnVy+95tlo36pmSOrsJp3fRP87OTx7WNU7
s1Is7V0ldyd/R42Ma7uxpflN1N/J33FudH6T+98dDofD4XA4ehisrL8z/x3c
EBov9Hd44JE9Q+6+aeSWG0eeSe2d/ndw0TUiR+X8Jurv5O/k8JzfpDnw5Mb0
0dBDoz2l6mmpxr/NOubwyvE1K5LIPTq6d+hllf4Z1eDz/Mg+lrLvob+jf5X+
d+xxhsT1gm8m71+l/x3rrfNXweHVP1Po783+/jgcDofD4XA4uhdWzp/J8yMn
xGqNHHJLS/53aPDQ3te1pMFr/yr97/S+U4NXbwm978ycyfMjq2nv5NbqX8/5
dz3/e547qfdV62Xle+qx8BiZmUPezj0J9XfV4OmhYb4m9zu5f2akJf4O/Z0Z
NOqfYf47rpnMbfb3x+FwOBwOh8PRvbBy/ju8GDtHbkj9XftXN4+cEtkz4O/M
f8/9M4Mt8fdVIn/N/TPMf9cMmt6WdG1yZO1fzfNhOuLf9fR3s6Sv53Of1LeT
z3+lf0az4Jk/Q08Qqq+law0rx4L+zmsTg2W9OL8J+6D149pijTez8rrj+kfu
n4H/nfq75884HA6Hw+Fw9CBI/gy0XPavTopcEbmFrVb2YJPDQxseGYveD2Qg
ws8N/X1N4anMPM/9M/SLa/7M8pb6V6vNPNUsyY74d6MzWPnYaq+jlfewLiXH
Sf+79rCSv1N71x5eZkgOseSf+Ugs8Hf2r2KNN4nrDe0d/F3nr+I6SZv/vdnf
IYfD4XA4HA5H98LK/hn638nf6X8HbwR/hxd7lKV8Q/pnUGvHarEyfyd3H2Qp
Q1KzZ/papf+d2TPqLddi32qv7LYa/67Xw5o/bonsb3kvq+4j1OeT58+w6J/h
52XvKtYDPQH0z2CtmP9ODo9rGsyfwVpDg9f5TeDu1N89f8bhcDgcDoejh8LK
+ju4oPpnqL9D+4UHG/o7ODz9M9CKmf9O7f3DlvJnmD2j85sGWNLf8/yZXHsn
b85zYDTjvRr/biR/hrxfvTT6mjr3Nc9/13x69t5q/jv2JuTv+LzU4OknYv/q
UCn2EWBN0RcM7R3cXfNnmP+OvRU4PM4Vrpm86/kzDofD4XA4HD0H4H5Wmf8O
bwb5+zaROzI/Etyd/aucvwr/NrRj6u/UlwdbZf4M89+pvZP30kujM021Z1W9
5+pvqcW/+Xst5Pw+72Xl6+r8Ju2n5TWCZaW4D8Ftn/gZB0rRA8/8SO1hhf7O
/lXmz+Tzm8Zb+/lNuFZSzG9y/d3hcCxO2H333fH/pXDqqadW3H/jjTcW9zsc
DoejTX8Hd4emi/xIaLzg8PBsjIkcEnow8yOZHcm5oexfZf5MPr8JPD6f30TN
mj2gOtOUvaGqgWvWjHLwalky9aB8P8+O5GvozCjV4bnPYPYMj5+faQVL+5R+
cQ3YA8D5q7xWMdRS/y/2QOwroP+d+jvOAfZS8DOBv2OPBe4O/d397w6HY7EC
+Hvv3r1D//79wxtvvNF2v/N3h8PhSLCUP7NL5IeTLXnfx0X+yPx35pMzf2aE
Je6OW+arsHcV/J3eGXJaekxWtMoMxmWFI5Ork9ebVefx1fh3I/kz+pzcR0+t
nfq7XgvQHHidPdXb0vymvIeVvavU3znDCRwevB17oPWtff4M9fdWS/wdHnjs
r5gfOa/Z3x+Hw+HoSoC/b7PNNmHYsGHhyCOPbLtf+ftf//rXsNNOO4XVV189
rLDCCmH48OHh6quvrnidzTbbLBx44IHhkEMOKfYCgwYNCtOmTQtvvfVW+OQn
Pxn69u0b1lprrfCjH/2o4nlPPvlkaG1tDX369Cmes+uuu4bXXntt4X9wh8Ph
aBAxf2aOlfVczm+aGLki8yO3sjTDifkz4Jr0fQyLlefPUH9n/nvfyG3JdalX
6+wmcnfVvTXPMdfXc/7dSP5Mr+wx6svJX1P3ETp7lUX+zs/D+U30vrPon1nN
EndHwXfE/EjsibC2H49F/R3+JXJ3nd+EaybO3x0Ox2IF8Pftttsu3HDDDYUO
P3PmzOJ+5e+vvPJKOPPMM8PDDz8cZsyYEc4///yw1FJLhfvuu6/tdcDfwdFP
Oumk8MwzzxS3Sy65ZMHNL7300uK+/fbbL6y00krh7bffLp4za9as4vejjz46
PPXUU+Ghhx4KW2+9ddhiiy26fR0cDoejFoS/Q8tl/sxkSxye/J3+GeYbgmuC
v0M/Zn4k+Cj93atY0t/JZdm/qr2r5O/Mocl5Mvk7dXez9jw+59/1+Lv2r+bZ
7yzV3enj6SXHx2Nm/iWzZ6jB43NSf2f+O/m79q/S/z7cUv7MxnGtse7U37GX
gp8J2jv2WODuRf9qs79DDofD0ZUgfwc22mijsOeeexY/1/PPjBs3LhxxxBFt
v4O/jxo1qu33999/v9DUd9ttt7b7Zs+eXbzmvffeW/z++c9/PowePbridbF/
wGOmT5++4B/O4XA4ugCxfxX+md0jJ0Q2IftXqb8z/538XftX6X9vsZQ/M1i4
KvX3/pZ6O/MZTvSRa+9qnv/CIs+uxb/r5Ufm2rsiz3/X92X2jM5uYmaOcnjy
dxR7V3G7iiXujh4BavDY99BDk+e/Y82ZPwPujkxPzl9lfuTb3r/qcDgWJyh/
v/POOwtdHZ4W5e/g4ieffHIYMWJEGDhwYMHLl1566TB58uS21wF/33///Ste
e4011ghnnHFG2+9Rwwo33XRT8Tv2AMsss0zxelp4TO6zcTgcjmbCyv2r8M/A
k0H+PiFWa+SR8HKMirwSHnj6ZzR7psUq899XtZQ/Aw5LDs85pcydofddsyN7
WWWOJPVv6vG1+Hc9/q6PNXld5e6aMan+GXrz+TP3HezFxS197+p9xxqsJjXY
0n4H68ccfervWN9q/hn2r4K/Q4Mv+lc9P9LhcCxOUP4OgFPjd+Xvp59+euFz
ufLKK8MjjzwSnn322TB+/PiK54G/w/uuWHPNNcM555xTcR9eE68NjB07Nkyc
OLF4vbzgm3c4HI4PCizlR8I/g2wTcHjOb6L+Di8H5zdBe4dWTP87OOhQS/o7
tPdq/hn2r3JuE7V38njNkNTZTephqce/63H3XLvP9XudtZrvIfiz+md0fpPO
X8U+hRweexfmv8NbBO29xSr9Myjw941jMf8d3L3V0vxV7K3UP+PzmxwOx2KF
nL8/9thjhW8dvawW+Tv6W+mrAaBjDB06dIH5+zHHHBPWXnvt8N5773X553I4
HI6uhKX5TTp/Fdo7/TPQ35n/zgx4nd8E/wz7McFNmbECvsoeVmZH0ltC/4zO
b9LeUNXbyZ1VE6/FvzUXvhZy7zxv89fRHBqdLaV7Dfav0v+O36nBD5TPj2sR
1N/VP8PeX+rv5PDYK5G/U3+nfwb8HecK58z7Vx0Ox2KFnL8D8Kyjl9Uifz/0
0EPD4MGDwz333BN+97vfhb333jv069dvgfn7q6++GlZeeeUwadKkcP/99xe9
sbfcckvYY489Cs+Ow+FwfBAg/av0v0+KBa4IDg/dl/536u/qnxluKcsct8xI
pN7M+auc4UT+zuwZ9q+y2COqXnPNozGrrsMr/66XH1mt31Xza/K9wtLZ7bLx
Z/J39c9o9jtzM3FL/s75q/S+rx3XEeuJDBpk62Od1T/TauX8SOjv6CsGf8d1
koK/u3/G4XAsTqjG31988cWw/PLLt/H3119/vXgM8mWQ8XjccccVHH9B+TuA
XJrtt9++yJxENiVyLLFf8GudDofjg4LI39U/Aw/8pMgVwd+h/W5pib9z/uoG
kW/COwP9HRoydOU14q36Z+ihoXemj6V+TxY1bWjZ6oPXXtJeVtlfWo1/m6U+
12pQjt8r+z2fu8rMG9Xgl5NbHiuvIfCz0UMzQD4/+TuzNVvimnF2E/R3XNNg
vj56heGhIX/HPgp7Knib2L8K/8zbzf4OORwOh8PhcDi6F5by38EJNf99m8gd
VX+HLkz/OzV4aMhDIycdYil/ZmUp5in2t9S/Cr2aPhS9zXNfVH9Xnbwa/67n
ga/W46r8P5+9ilpG7tPsd/J2zbNnxg4/Kz8/82eov2OtqMFTf+f8JvpnmD/D
OVrMj2T+u89vcjgcDofD4ehhiPr7XEv57ztZ8s/A/94aOSTzZ6i/s39V9XfO
b6J/hvkz8NDQ+84ZTuz3ZA48899zDzz5O7m7ZsRU49+N5kdq/2t+qz56zX1X
Xw/3Gstb8r3T+04PTd/42VeKt5of2WIpfwZrR/5O/R1rDf0dfQeYf0v/O84N
NHjstbDnmuueTIfD4XA4HI6ehRIHfC9ywSmxJke+2Gpl3RcccnOrzI/U/Bn2
Ya5lSX9n9jvzV+h/B6dlTotq1+oppwa/hCUer5q49qjm/LuRDJr8uXyePl95
u2bS04+vM2PVC6QZkgMt9bBSf8d1iTXjWnHuFfY/68VifwH7V8HdW62svcPT
BP6O80P+/k6zvz8Oh8PhcDgcju6FpflNzH/X/lXwx9GW9PeNIsekXszsSPDQ
IZbyI9m/Sg88eCx1ac1q0RxG7Vnlz73kVnMia/HvRrPfledrP6tq/fS/awaO
Xh9gdiTzZ7g3ofZejb+vaql/leuGHmBwd2bPwKNE/Z3zm5gfyfx3nCucM5+/
6nA4HA6Hw9GDEOevMn8GRf4O/b0af0c+CvtXmf1OHZn5kWtY5exVaO/9pOif
oV7N7JneVqlxV+PvZu09NMq/O5qvatnfVWvXfUG13lXmzvBW/TP0wTNXhx6a
AZZ6WMHfqb0PibW2pexI5keitwDXOMDht7SUH4lehImW8mfa/DPN/g45HA6H
w+FwOLoXlvpXUeTv20XOCO5I//umlvwz9HtAO9b5TezPBF+F1sz8SJZmtNA/
o1yY/J2+d9XE8xzJWvy71nxWs/aZ8flj+Xe+D30zS8nP1OCZ/c7PsYIljz8/
L/V3avCaH9liqX8A64jrGRvG9cVa6/wm5kcy/x36+x7m/N3hcDgcDoejx8HK
/pndIidk/+rEyBmpv8P/ztlN1N/BOaEbM3uG2vvqlmawcn4R8yOZ/64eGvau
LpPdKocmV8+zIzvi6tWQa/f57FbV3vlY9b+rDs99h15L0Az4AfL5df4q+1dR
H7Hkn0FPAdaX/B1rDg2+1ZL/nfo7CtdL3vFMYofD4XA4HI6eBaucvwr9nf2r
4O+c36TzV9m/Sv5O/wz4KDg8+Tu460Cr9L9Tf6dnnL4ZcmHq25rdSO1b+0pr
8e9G+Hyt/lV9vur96p+h750eGnwOzm/idYUPWZrfxP7dVWPl/avY+7B/lfnv
2B9pfqT6Z7C3Qo8x56/O9flNDofD4XA4HD0LluY3oXaMPJHzm8Zamt+0ibXv
X13HUh9mi5W15dWsMj9S/TPs7WR2JH0nOrtJvSrKn1WDr8W/O/K+83GqwfNW
i++l+TPU4bmnYO4M9x8scnf9zLwOAe5O/Z39q/TOcH7ThnGdUZo/w/5VnBuc
I/B3+GfmNPv743A4HA6Hw+HoXljyz0yJ3HCyJf/M6Mgh4eWAp4P6O/tXkSFJ
Hbkl8lPoy6taZf6M9q5ydhNuNfud3nfmMpJHc35SngNfjX+bdd5Tw3mtub6v
+wYe23KWrhEoh+fsJmrw5PDs32V2JAoe+LXiemHfwz4C6u+8zoE1p/6OvRTn
r6LA33HOfH6Tw+FwOBwORw9CnN/0jpXnN4EPcv4q+1dbreydQW0a+SUyUta3
1Ls63JKfG9oyOHzufYeHhDNJ6RPPtXfyeJ27qhk09KZ3xL/VG18LmiGfP76X
PIbXAFR7p4+GRe7OOU7k7up/p3+GGTRYp6GW9PcRlmaw8voG1hprzvwZ8Hd4
muh/J3+f4/4Zh8PhcDgcjp4FK/tndo1F/V397/TPUHvHLTg89XdwUGZH0j/D
DHjmzwy0NHuVOYvsXQWHp7atvav0qlAHp8ZOTl+Nf9fj7uqxUc2efhmdFaUe
GvXik7fTO0MfEP0zKO5V6H+np2hwXCOsFfj7MEv+95FWOX8V+js4PM4BzgX0
d82PhP99nvevOhwOh8PhcPQcRP0d/avqn5kYueJ4S/73rSKnZD4KtGLw9+GW
/O9DrXL+6qDIX8nh+1tlfiRzW3pbpX+GXJk9pNS/lVPX4t+NzF9V/p7nxS+Z
3a+Zlfn8Jmrw3Iuo/t7fkn8G/J3a++pWyd9x/WKEpQwanb9K/wzOAc5FPr+p
mL/q+rvD4XA4HA5Hz4Kl/lXV38Hf6Z8Bf2f++0ZWyd9R0I9brP38VfpnVop8
Np/fRO84PTSqv2sfK7k5NXjl7zn/bmT+KpHPccpnOGn/7NJZLSfF7Ehm0PAz
9o+ff5BVXpOAvwj8nXueEZb6Vz9mlf4Z9b8z/x3+d+rvc1x/dzgcDofD4ehZ
sLL+Dv879Hd4M8Dfwd2h+bZG/kj/O7glMlLA36EXr2Mpg6bFyvxduar635n/
zt5V8F7OP+LsJmra5Ox59rpZpeae8+96/J2cX730mmejfauaIamzm3R+E/3v
5PDsYVXvzEqxtHeV3J38HTUyru3GluY3UX8nf8e50flN7n93OBwOh8Ph6GGw
sv7O/HdwQ2i80N/hgUf2DLn7ppFbbhx5JrV3+t/BRdeIHJXzm6i/k7+Tw3N+
k+bAkxvTR0MPjfaUqqelGv8265jDK8fXrEgi9+jo3qGXVfpnVIPP8yP7WMq+
h/6O/lX637HHGRLXC76ZvH+V/nest85fBYdX/0yhvzf7++NwOBwOh8Ph6F5Y
OX8mz4+cEKs1csgtLfnfocFDe1/Xkgav/av0v9P7Tg1evSX0vjNzJs+PrKa9
k1urfz3n3/X873nupN5XrZeV76nHwmNkZg55O/ck1N9Vg6eHhvma3O/k/pmR
lvg79Hdm0Kh/hvnvuGYyt9nfH4fD4XA4HA5H98LK+e/wYuwcuSH1d+1f3Txy
SmTPgL8z/z33zwy2xN9Xifw1988w/10zaHpb0rXJkbV/Nc+H6Yh/19PfzZK+
ns99Ut9OPv+V/hnNgmf+DD1BqL6WrjWsHAv6O69NDJb14vwm7IPWj2uLNd7M
yuuO6x/qn8H8Vfjfsdfy/BmHw+FwOByOHgbJn4GWC02X/B1cEbmFrVb2YJPD
QxseGYveD2Qgws8N/X1N4anMPM/9M/SLa/7M8pb6V6vNPNUsyY74d6MzWPnY
aq+jlfewLiXHSf+79rCSv1N71x5eZkiyz5f5Myjwd/avYo03iesN7R38vdXK
5wT7qimxfP6qw+FwOBwORw+Elf0z0HJz/R2aLzg8+Du82KMs5RvSP4Na2yr5
O7n7IEsZkpo909cq/e/MnlFvuRb7Vntlt9X4d70e1vxxS2R/y3tZdR+hPp88
f4ZF/ww/L3tXsR7oCaB/RvPfyeE3sJQ/g7WGBs/8GfjfketJ/R17Lc+fcTgc
DofD4eiBsLL+Di6o+e/Qelst+WdQ4PD0z0ArZv47uXuLpfwZZs/o/KYBlvT3
PH8m197Jm/McGM14r8a/G8mfIe9XL42+ps59zfPfNZ+evbea/469Cfm7avD0
E7F/Vf3v7CPAmqIvGNo7uDv97zgH2EfR/47+BJwrXDN51/NnHA6Hw+FwOHoO
wP0s5b/vEnkh+Tv971tHHgnuzv5Vzl+FfxvaMTk89eXBVpk/Qz2a2jt5L700
OtNUe1bVe67+llr8m7/XQs7v815Wvq7m0Gg/La8RLCvFfQhu+8TPyP0KM2hQ
zI9cIxY4PPR39q8yf0bnN2HdcR7I36G/V8xvcv3d4XA4HA6Ho2fByvo75gEx
/32HWPBsMD8SejDzI5kdybmh7F8dEiuf3wQe388qPTTUrNkDqjNN2RtKDZyc
mj505eDVsmTqQfl+nh3J18gzaLiX4D6D2TM8fn6mFSztU/rGNWAPAOev8lrF
UEv9v9gDsa+A/nfq7zgH4PDI8wR/x3nC+YL+7v53h8PhcDgcjh4Gq8yfmRw5
Irhiq5V1X/ivmf/OfHLmz4yIPBScFHoy81XYuwr+Dg26v6VcFnpMVrTKDMZl
hSOTq9NPY5Yy35XHV+PfjeTP6HNyHz219jyLRr00zI/U/BzOb9IMGvrfOdOK
6zMkrhd4O/ZA61v7/Bnq762W+Dv6EnB+cK7A3+c1+/vjcDgcDofD4eg+xPyZ
OVb2YoAT7mRpdhO4O/3vnOHE/BlwTfo+hsVirgrzZ6i/o8jfPyRcl3q1zm4i
d1ffe54D0xH/biR/plf2GPXl5K/Jx6pnRntryd/5eTi/id4Z8nf6Z8Djqb+D
v8N3xPxI7Imwth+Plee/s38V/hlq8M7fHQ6Hw+FwOHoQhL9Dy2X+zKTIFcEZ
yd/pn2G+Ibgm+Dv0Y+ZHgpPS372KJf0971/V3lXyd+bQ5DxZtXbm0OQ8Puff
9fi79q/m2e8s7WFVHw+Pj8fM/Etmz1CD1/wZ5r+Tv2v/Kv3vwy3lz2wc13or
S/o79lI4H/A1YY/F+U3vNvs75HA4HA6Hw+HoPsT+Vfhndo+cENmE7F+l/g4O
yfwZ5huyf5X+9xZL+TODhatSf+fsJnpndIYTfeTau6r5L+o/J8+uxb/r5Ufm
2rsiz3/X92b2jM5uYmaOcnjyd9QAS/6hVSxxd/YJUH+nhybPf+d1D5wD9CLg
ugjODeev4py97f2rDofD4XA4HD0LVu5fhX8Gngzy9wmRM7Za2ceBGhV5JTzw
9M8we6bF2ue/r2opfwZctr8l7k4NfllL3nfNjuxllbkz2kdaK1+mkfx3fazJ
6yp314xJ9c/Qm8+fue9gLy5uObsJRf8M1mA1qcGW+gWwfszRp/6O9a3mn2H/
6o6xiv5Vz490OBwOh8Ph6FmwlB8J/ww4PHpYOb+J+juK85ugvUMrpv8dHBRe
kBYr83do79X8M+zp5Nwmau/k8ZohqbOb1MNSj3/X4+65dp/r9+q3V+2d9zFD
kv4Znd+k81fpoeHsWea/w1u0llXObxoRC/x941jMf0d2Z6ul+avYW6l/xuc3
ORwOh8PhcPQwWJrfpPNXOXt1rCUdmH2V4Jc6vwn+GWjJLZGXMmMFfJU9rOTu
9JbQP6Pzm7Q3VPV2zkFdIruvGv/WXPhayL3zvM1fR/tndbaU7jXYv0r/e29L
GvwA+fy4FkH9Xf0z7P2l/k4Oj70S+Tv1d/pnwN9xrnDOvH/V4XA4HA6HowdB
+lfpf4c/Y4fIFeGfAYen/536u/pnhlvqxWyxlJFIvVnnr9I/w+xI6tbLSbFH
VL3muW+mmg6v/LtefmS1flfNr8k9O8y+4e2y8Wfyd/XPMB+TGTT87OTvnL+K
tVo71oi4nsigwbUNrLP6Z1qtnB8J/R3nZadYBX+fMmXnsPawdby8vLy8vLy8
vHpATdl559w/g9ohckXw99GRR5K/c37TBpFvwjsD/X2YpexIaMvqn2F+JL0z
fSz1e7KoaUPLVh+8Zs/Qi66V82+z1OdaDcrxe2W/631Lye88Dvat8pbHymsI
/Gz00PSXz0/+zmxNXKdY29LsJujv2r+KXmF4aMjfUeDu8DaxfxX+mben7LxL
079HXl5eXl5eXl5e3VPgfpby38EJNf99fOSNqr9DF94gck1q8OChH46cdIil
/JmVpbSvk/2r0KvpQ9FbnZWU59CoTl6Nf9fzwFfrcVX+r7NX+Z7LyH2a/U7e
rnn2zNjhfoWfn/kz1N+ZAa/6Owp7I/XPYO1xDaTVUn4k89+L+U3k7/t86tNN
LX6n/Dj8OPw4Gj8OLy8vLy+vzlbk73Mt5b/vZMk/Q94IDrm5Verv7F+l/g4e
yvlN9M8wf2aQpZ5OznBivydz4Jn/nnvgNXtd9fda/LvR/Ejtf81v1UdfjbfT
O8PrBfS90/uuM2aZvzPIKvMjyd+Zn6/zV8nfocFj3zTGkv8d5wYZQdhrYc81
l/4ZcIItt9q6KZXzIj8OPw4/jsaOw8vLy8vLq7MV+ft7kQuCu0PXhQce+jt6
V8dZmt/E/EhwTM2fYY45+zLJ3zU7kv538FrmtKh2rZ5yavBLWNK+c028Fv9u
JIMmfy6fp89X77sWM3F0Zqx6gTRDkv53cHfq77guQQ5P/zv2P+vFwt4I/QVY
a+yZ4F9qtbKXCZ4m8Hd4aMjf31H9/YPAR/w4/Dj8OBo/Di8vLy8vr86W6O/o
hWT+u/avQvvd2pL+vlHkmNSLmR05NPJS5keyfxVFDk9dWrNaNIdRe1b5c+6d
0T7Vavy70ex35fnaz5q/l2bQMHuGx8fsSObPcG/SN1Y1/r6qpf5V7nvQAwzu
voGl7Hfq75zf1Gpl/o69Fc4RzhX4+7vK37faenRTKudFfhx+HH4cjR2Hl5eX
l5dXZwveC0v+dxS0XfB36O/V+PuGlvpXmf0O/wfzZ+ALWcMqZ69q9jt7WFWv
ZvZMb6vUuGt533MPjfLvjuarWvZ31dp1X0Dtnx588vpl5Vb9M/TBM1eHn5V+
f/rfVXtf01L+u85vQuEaB/Nnto6FXoTtY7F/dVeDf8b5ux+HH8ciexxeXl5e
Xl6dLelf3TWW8vfxkTvS/76pJf8M/R7QjsHhmf/O/kzwVWjNg4THQovWjBb6
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
vWuvvTa8GLNHUJ8r8feOXi/nRfXef2yJB1/fAXefVOLujX6WBTmOarVDicPf
f/8DNTk8jr2rjgPn4aKLLgp77bV3u7/dIPwdP+d/x3PwXLzG/B7HPvt8quLz
HXHEZxpaoy9/+cttzwFXbW0d16Xn5Zxzzm239ieccMJ8nc/OHgf4+9Ml/o6f
q/H3008/ve2x+Bn3HVri7/oaBxxwQHHd6uqrr6l7HF5eXl5eXp0t0d/BBadY
Zf47NF/yd/rf6e8gf6f/Hd4Znb/K3lXwV3B4zm7qa4m70zteTX/XPladg6oZ
MdX4dyPzV4l8jlM+w0n3DNpPu7RVZtDgc2gGDT9jv/j5V47rwZ5eavDc8wyP
68j+Vfpn6FuCh0b9M/DA0/9eyd+jj72jgq59xx13RP/DzEJPPPGkk4vCz7gv
5yyfO/qYDl+zHS/q4LHIObn++m/V4O6/DpMmT27ocyzocXRUOIb7H6jB4Uv7
DnyGBT2OceO3acuZ+epXv9bu79CRE3+/sd3f8Rz8Da+B15qf4zgt8k8U/FL1
Phdrjz33qlgT/N6V5wWfB7mMhx52eFHw4Dd6bAt6HLfdHvl76eepUy9qd/6f
Kq3T3Xf/oij8jPsOPviQdq/z9PTpxWvVOw4vLy8vL6/OlvSvIovwE7EwI4je
mTGRP25haf4q/e/Mjsz7V5WrMvtd8yPZu5rnR+psJM1/US+6WaXmnvPvevw9
3wvo66gnR3tlNQ9HM+qXt7T/YPHaAj4zvTPMkFT9nfOuyN+HW5q/Sv8M+1eh
v+N8gL/j3FB/b5f/Xo+/7LnX3uGRRx9t000PO/zwIuub3AQ/475nnnl2ofD3
grt/qzp3R7300kuF76CjevLJJ4tjnN/jwHPxGvXeB8dS6zjrcfh6x6Hcvazr
Xxc+uceeFaXZJ/g5/7t6j2px+HrHMW3apW2vcddddzXMg/HZZ4rv6vDDj+hS
/t5I7bLrbm1rgcz6hcHfsS/51b33hkdL/2Zq1a233lp4jtrx99Jr3H77T52/
e3l5eXl1eWX+mZ2s0j/D+av0ztA/Aw0eOjG1d+rv4KODrdL7Tv2d/L1v5Lj0
m5D/ak8oveb00KgmTm5di3+bdczhleNrViSRe3R070Bfj3pnqMPTy0//zIfi
Z6b+znm0zJBcI64X5zcxQxL7I6wvcn6w3uDv2EO1WpnDg79Dfxf/TMqfGdva
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
0PcN3bmvVXpoqFkvG2+pbXMOK/PgqYGrl0U5eLUsmXpQvp9nR/I1tF9WNXjd
Z9BDQ+2de5E+UrwGMcAq/e9D4ppxdu3acV1xXUNnsGLtsX/iDFbwd5wjnK82
/8ywdT4y3/z99NPPaHsMfu5O/o666uqra3J4zFFaWHw1L3imu4K7L+hxIEt8
+4k7xB7R8vvjZ9w3fpsJC/U4kPNfaw1YP/v5z8PZZ58TXn755YY5fCPHse12
2xefkYXfH33ssXbvP2Hb7SoeV63wXOfvXl5eXl6LY63zkeGaPwMvBrNnto1c
kdkn4I/Qg8HfqQ+DZ5LDk7vjdjVL2ju979Cg+2W8Vuc3MYcxz55Z0pLf3Cxl
0SiPr8a/G8mf0efkPnpq7XkWjfJ58vjl5Zb9q5zjhL3KgFjMf+f60APP6xfs
JwCHxx7p45YyJOmfwX6Kc5xwrnDN5O+TP7Hj28NHrFtwgnElblCrOuLvfExH
/L2j1855UUePrVZX1+DwF144tVOvsyDHgfeqdgzXlLh7Zz/P/B7H+PHbhOnT
p9fkzvgbHrMwjwOvj9yhK664osjKv/POO4vbSy/9cth33/3aHnfssce14/Bf
LHH4+T0O8Gb9rHjfx6rw929969t1rwmANy/IcYB7jxP+vleJm9dbt70if59W
4u/jhL/XOw4vLy8vL6/O1EeGj0CWCHpX37D22e/MjoT+PirySPavrmvJ+w4O
z/5VzZ4BR6X+jiJ/p+6u3hn1vtOroro3+0fzrPdq/LuR/Jle2WPUl8O/81b3
EVq8XpDPYKUHnpmZLPpnwOPXlGqxMofHOq5raYYT1pn8nR4a5s+whxXna9bE
HXb467rrrV/mI+B2NeqYEt+aNXt2uzr9jDPbHoOfqz0Gz+3otdvxog4eW6ug
cefvezT2DZ14jQU5DrxX/v7XXHPtfH2WBTmOIpemyjlA4W/ddRyN1LHHRQ4f
jw8c/pBDD5uv4zj7nHPCtdde11bnnnd+mb9na3DSyadUPK5awXczv+uBzJg/
vPBCOO/888vzD0rvCd8Ofu+oin7i0mN/8pPbit8xw/enP/1Z3ePw8vLy8vLq
TIHzTZw48fUSB3zFyl5qZs+o/x3aO/j7RrHQX7mBpblN8H6Au3N+E/3dmj3D
Ps7+kdtW611lJmNeqrXrTNSO+Hc9/q79q3n2u3pntG+VPJ4eH82eWd5S9oxy
+L6W/O+4HsE8TXrfh8S1owcJa8oMGuZHorCH0h5WnCOcK5yzJ0ePGfvSyA0/
VpefHXrY4fPN3/Hc7uCJRSYi3nPWrHDh1KndyptRU6deVPaAzy57Zub3cyzI
ccAj873v3dTuHOA+/K0716OROubYSg4P/0hXHcf99z9QsQbPP//8Ah1rI8fx
jW9cXnP/1Nn6xuVX1D0OLy8vLy+vzhQ43+gxY14qccDHLWVHgrtTf2fvKjjk
JpFTrm/Jp71O5J3g8NDedfbqKrE0+53Zih8SrqszWOl916yZ3LdCnl2Lf9fL
j8y1d4XuA8jxeQzV5q/yeJXDk7+jdN+CaxHk7oNjMbOH/vfhljLgqb8zgwbX
QnBOWi154NHDetN6H/3o05ttvkXBCcDvOqpPlR5z4EEHVxT6RPl3/Jz//VMN
vG7Oi+o9vqPCXuGAAw6cr+d2xXHgvXEMC/IZFvQ44IGH5312iQOi8DPua8Z6
NFLHHHts+P3vny6885/cY88uO478+7jrbrsv9POCdf70vvu1+3fQ2cJr1Dpn
zt+9vLy8vOa3wPnW/+hHf1/igD+0shcDsz0nRI64tSXvu/auav8q9XftXSV/
V/2d/ndyeBZzZ+h9V468pPyuvJp8vhb/rsff9bFmlf2x1ea6qn+Gvned48TZ
TeTvOnuV+TPg8IOkVpX10vx3znCiBo81Z45kPsOJc5zOHjBgwEzwhH3323+h
8bMPCk/sSceBcwr/Dmp+uPvith6L63F4eXl5eXk1WiPWXa+Yx1LiftDfz7Oy
ngv+ztlN9L9vFjkkasPIL9lryd5LcFD6uTm7aSWrzI4Ej2W24orCe+lBUf87
dW36Z9QHX49/1+PuuXaf6/dLVbnVLHrV3zV/RjMxeX2BPnjsXZilyfx31d/X
tqS/c7atzmDdPBZ7WMHdca6w5zqsVC9O2Ha7Px3xmSM/EHzkg8KL/Dj8OBaF
4/Dy8vLy8mq0Nt1s87Dtttv9ucT9XijVEVY5d7XVKnPfOQuU3vdcf2+xpCeD
l+r8JvpnlLurd4b8V2ebavaLZs5Ydl81/q258LVQbR9QywfP9+Kxkb+Tw2sG
JvcjOr+Jn39lKea/M7OHOTTD47pifTUDHkX/O3oScI6YAw8P/PXYh33++OOL
/HJotd1dOS9qxjH4cfhxLIrH4eXl5eXl1Uht+LGNiv+HRO3921b2YYALgr+P
jQWuiL5J6L70zzB7ht539q7S+45b9mmCp5K/U39X/ww94+S/LPXNsDQHxqzS
P1ONfzcygzXvd9X8mqWz+3WOFD005PHU3nkdgXsU3PaTW+bAY22owTMHnjOc
yOGxzuDw0OCx7sig4RxWXBMZHwsaPM7dkaW6ddSoTafvtfc+hWfYeZEfhx/H
onEcXl5eXl5e9QrcffSYsWHdddd9usT5flKqz1i5d5W5Myidu/pxS14Oau/w
z1B/b4kFHkrdHdoycyPZv6mzV1e0lJlO/ku/DOc26cxVnYeaV86/G4W+Jn/P
566aVer9Ol+K+42lLHlp2LvKz0j/DPtXV47roxk0a1nqYQWH5/5oA0seePB3
+GhwTtjDSg8Nzhs4/JdKdduoUaOmH/+FLxT53fDDgyd0V/E71p3v6cfhx7Go
H4eXl5eXl1etgt8dnplttplQ+nnd6eB6pTrHyr4ZaO/bWsqeUe8Mc9/B4eGf
yWevQn+n9s7cd+Yk9pcin2UGPLPfydvJidknms89zXl1Lf7dyPzVvMdVXzfP
kGR+JF9brwuQt1N7J2/nZ/2QfH7sZZhBwz3O6nHtNEMS+js4PNYa/QbYN5G/
43wwhwbniTmS4O+YxYrzefuAAQNenrDttn/CnEr0KCNnCFmhyPvHzK5mfxe9
vLy8vLy8vLwqCxwNXA2cDdxtsxJvB5fbdtvt/gRuZ2XufnbkfNDe6Z2BJ6PV
0twm8kZwyJGRU3J2E7k79WNmv1NfZv8q81c0G13zWtQ/k89G0ryZXHevxb8b
yZ7R5/eqcptr+8rb6aNRHV7nyOb5mPjs/Sxp8DqDdXVL2T3aw8oceHJ47J/g
n8lz4OGDhwYPDzzOI+axHl2q75bqxf79+7+83nrrPztmzNiXtp848W+Y1TVl
ys5hys47F3N3y7Vzdluraj2vVFPy+2v9jb/7+/v7+/v7+/v7+/v7+/v7+/vn
7w+utv3EHf42ZsyYl9Zbf/3p/fr1f7XE6cDdbyzVUaXaxdLM1UmWMmdarczf
6XsfFTkkvTPrW+LvLVbm8NSRyU3J3/tZyo2kF5z+EuW81OGVF5NPk8dT/yaf
r8W/G9Xf9Tn6PH0vnftazQNPTk8vEG91fpPOYuWeZpW4VrxugVv2EuDahubA
Y+/EOazK4aG/M0uSGjx4/M6l2r1Ux5ZqWqluLRWut/ylVP8s1ZxSzSvV3FK9
F29x37vZ3+bF+/4TH/de/P1deS4fy/vnyfPek8e8lz2Gt/+pciz6GH9/f39/
f39/f39/f39/f/9F/f35+Pw9c/6FW3A1cLZnrKy3g8sdY2VuNyUWM9/zzMgt
reyfAWcEf4R3BlwSnJIZKZw5BA83ejHBQzmzSbMjqT+Dy1KXJmfnzFVq78qR
NQeet8qtgWr8uxH9nY/Pe19zvZ/vwf1CtTlOmj+zoqUcGhT9QuTv7AdgD+vq
ce04h5X6O/oL6INnDg00ePhncG5wjtCjwFmsKJxLcHec112tfJ73LtU+pdq/
VAeU6uBSHVSqw628h/tsqT5nZa5/fKlOKNVJpTpZ6rRSnR7rLCtft2GdW6oL
rJw/ituL4u2FsS4u1dR4y+L9+D5eIj9fGuvL8Xaa/G1a9jg+d1p8PH/+ivx8
SXzsJfKcafEYq72Ov7+/v7+/v7+/v7+/v3/Pev9L5O+8j9zlolgXxt+nxp/P
t8R1zo2F+74U60wr8yXyp/+zMp8Cx/pivP28lTn50VbmYeBk6EdFJji42n6x
PlWqPUr1yVLtZmWeR+0d2i24OzNN6H2ndwbcfUNL3hno7sxKabGkIYOHrmZJ
fwdXVf1d55KSu9NDQ98M7stnr+b83ay9hybPk2kUOmdV9wXVsiqpuXOWU+7Z
1zlO/Kz00qh/hnucQZb2PVhH5sBjX8R8faz5SEuzWNmPQA88Ks+SROHaCvg7
zvmepfq0lb8H4O6HWvn7gSKHP9YSh8d36kQrf79OsfL3Drf4Hp5p5e8ivp/g
78rn4b3H95nfY36/we3J58nlyfMvivddEn8mv79E7r9Enjctu/8ieT3+u+R9
LN0/6L9tvg5f92K5P38ff39/f39/f39/f39/f/9F+/35nhfKc/k48hL8fr4l
vk59klyd/OacWOBDZ8Wfz7TEk8CZTokF7g5tlNwKfOs4K3N31JFW5u7g7eBo
+8fa18ocbo9Y1N4/YZW+d3pnoO9ubmXuDs4I7riBlX0z0IPBLcHfWyzlzqCg
JYO7k6NSc+bcJlQfS/wWvF197+TCuU8lz4TR+au1+HdnkOfW5Dk0+X5C8yM5
v4nFDBpq7/zcnOFEDs8eVqwT9j/Mkmyx9jk0WH/mSCIHHvx9K2vvoWEv605W
Pr/g79iv4Zx/Kha+Cwda+TsCDR4c/rNW/u7gFntBfK/A4b8YC9878vhTY51h
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
vLeWXDPOOYM+pOeLDF81f0dvQszd/Nh9cHRz687ZbxaHr1r7CNQY2Gjd+f3m
7Ue15vDZRkPEWtZsX5URg4+Ft99diy6pa+HR0eQ5vVuWZ4gGKs+U9QypP1xL
ftCMg4yJT8vQx8fwAeHy1tdk7IXPw+Mxtj03RBv9zbO11uIw/tnH8eRR4t34
L63N+lq/X+z7Trs+/i/HflP9fgcHf/AHf/AHf/AH//bGf7YWnYHXATpe2fvR
HDvvY2rWoRJvJ86OTgaNeyyx1PD1cDB07uSXCX8zb4fbwd8frbVuJpw9HDFc
8W216GaICYe7w+Hv3hmx9nBQ+Cp6ma2cMxe07bg7fN2xdThyCrFx611u1vpV
c/f9tt31NRzv3+01rIdq9zw0cHh0NPF9wuHv2bVTc6/h8PhQD9Wax1sPn+eH
nob8knnOH6iTZ/+RWvLTpA6PZ8yEx+P/oZF/ptY6+S/K0keeo6+29tfV/lqd
1tN/Q/1wfa/Ddj4c+7Sc7+t9S+f72K+3Pvxh+xjOgb+FN/iDP/iDP/iDP/i3
Dv436qXxj2/qOHDh4ugSrGG3Btk8Ca5uzk68lPipde4YMVfi7uHtT9U65v6e
WueJRDcDT2QNJbH31I69h3eGv9+5a19pRh5FOHyPuTvnzFk6mS3O/mqV/VY7
9u/1qtbE02ctv7Xvnne4vOu/o5b8mqlz/3I/cy9zH3OPw+NZzxqzDp51CbFH
dhb+nmeZZ4omHl8Nv+1DdTIWMjY+pjo8njHEWlc4/fXdNmORcRnLeGQ+iDFM
rJ55I+dEYh7pa7X4qub6+K3UvobX1vo9ss/71Vr7Df2d+5quNfiDP/iDP/iD
P/iDD755Cvu/pGujgSGmCf9hu/Ok67WOjaJbDr8K7/q4LFwsfD0xd+Ku8PbU
4XThduF4xNudJ/K4Fn6I5t2aGXLNEHsP77wqCxcNZ4WnXqx1zhli0ebs6N3N
jZ3rxXy9c/lXo9hv8FpV/wbnx4G39zb6GXP5S7t27k/n76nxi4jBs9bgLbXW
w8Pfj2vxveDw6Gker0UTD5dnPGSMMDdDLJ5cNTHWu6KtscaG+DzarWfU/mJr
eyyjxSGe/5VactHT7/z0xPS/rGO/WKfX2nLMlzeu+aW27yu6Rj+v+yCDP/iD
P/iDP/iDf+vgv1T+wXlwF3hO5+do2eFErD21nt3xdr6v+cladDLE2j9ca517
OPx7dxYu91gtMfdH60R/gd6deK7j7uGLXq8aTgnH7Pw93DR89HIt+d7hq3B4
60qO1Paa0B5393ZfW/pqlC29/Raf91yBc186Tn++lv8Oh79c69yacPjUjsPH
7qu1Fj7PJP5UODyx+Dwv5k3g8Whq8syfrDWP/4AsYyTj5UO1zjnJHM4nZRl7
GYOfqoXTM/dzXdufq2UMe0w7b+UXtI1dr4X7f6Edy3vzjK75jK79zBnX4xxf
+4s3OH7wB3/wB3/wB3/wb0/8s7YxNAnXa/kmKlydNYXhRJ9UG85OHW5F/DS8
KxzM8fboJeBr4W9P1KKXCa+Dt7+zTnjgcS06dzhieDv8PfHge1WHWxJvh3vC
R1MTa099vtb6dzg8fL5q0dTs1Wn+vL9r039Qr17sHRy32T7YwKfNfAJxd/7r
BW17/iE1/k3uI37QtWa+7+jh7VsxR/JwLesW8lwf3Rm+GvydsZAaXQ38Hf+P
MQWfZ6zhL8LnWQdLTkr0N85/xLgmzw3zRo7tp9/vxee073O6xud1Hd4brsk+
+wm+7ufU9jzCZ+v0ezn4gz/4gz/4gz/4twf+dZ0PNhyFGOXn1If2hVwx1Obs
5kkxcrejaUfLDPd6f601MuFs8PZw9nA51juGt5NPHC2G10imRq+R+O+9teRG
gWui+WDbcWXz1tjhrg9+iy4G7cxRrfPPOJ69Vzc/X+SNink6v2nLh8D4zfD3
w7bN/71Yy/ecPEdhLQ3xd7h77jf3Hj18jBg8z8qa+DzTd9Y6T02eO/MvaOPx
77ym2eMJHs+6V/h82l2z9YlmcH23P1PLN2Hh+xh+gPd9VtufqfW74Tkptj/d
7JN1WtPPu/bZdmyfV/j04A/+4A/+4A/+4N9S+Ma7Ef/oxxC7hNOYnxNT99rT
D9c6Z3t4U2LsxEbThnehcUcrQ4z1sVq0MuF04XPwu+M6/W0ma2bulaF5h1/G
iL+zVtXaEOLLjr2Hzx6p9lpWahsFzn6wq/fVfrXKXp3W8cDV99T2b4ev79U6
t/2FWuehgcNbT5N27iF+EOuB0cKntoYJ3woeT54gnudxrbU0jsmjq3lPrfU1
aOSfrCWHfIy5nT4W2f6o6oxdeD78nrEN1/9orcc7finHdv/gE7Xkrue8T5xx
/U+0a3Vf4uODP/iDP/iDP/iDP/g3wO/7P6E2PAaDC2UfMdAPq+56duLsT+0s
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
4+7m8PB3uHw4KPwTTurYu3k6HL5qrUOh3qttfmwe/3oW/xbqvdr2R6rW+ve9
Wvsw3I/z2nbsHT7ve42GBh08z4nnSI4at8kj5Hw15vTMzbCGmXWv+H/wd8YZ
/J0xuZWr0n5m5/wPtf536Br2VR9U2+P/Ha1+u7b9Pm+dP/iDP/iDP/iDP/iD
/1Lx+/d0zlpjal4Ed+o8nbgpsXV/a4l4avrN2YmxO95Ofhl4O7pqeGE4o9dQ
nq91Xnc03OGY8FL4O3oZc3Y47qH29Xh11Zqr79Xp2PzrVXq83bzd/Rzr/5p9
vidHtb2+91yt89Jwf9HROCbPs7laS45Ja2t4xj1XDdp4OLvz1jj/v+duyCvv
OR3nmvcaC49br8FwTN/zRw+qxngPuM7b2/k9x71zohrj7Tqe4x4a/MEf/MEf
/MEf/MG/Af5bdU764TbUb1M//Md8iWPhS84nYv2DtTHE2FmT6twy5C5xvB3e
jjbDvB0eb03HhVrnL3fc3ToZtCIH6q9ax6bZn2L+u6d9bwTuTjnrN/s/HdR6
boE+dDOHG/1o4Llv+EdweuLx1sNf1HZf34oPxvOFw/dvcRGrT599PsaU18Hi
H9p3tE4rxzhfJf2M7Qe0z9ehfqjWOS/fpn0+f+udeZv2P6jt/h49qPbgD/7g
D/7gD/7gD37Hh8OY7/h6/Xxinvwm5wB8oBb+ZE0MvBz+da31O184Ggu2nVMm
NXkK4fHWyXTdu3XtxJnT7/hyavPwqrV2ZEsrY05b7Zg3WunzAgetH9+De1K1
vif4Pdwv2uhoqH3PPf8Bd+f53KHa8yj22ey7oaOxj+dc8tTE4/EJvTYWXm8d
DmP0gVr8AO/jmrwjjH/eEfsDfh88J2CtD+e8tfVz7ANt332DP/iDP/iDP/iD
P/g3wDdHt77FPMc5QcyL7q8l/pl2j6nfX6d5vOOqV2sdY0VXAT+H5zmGiy6D
2C7xdtapopUxl+xrMc3PzfGrTq9HvRH/fb3Xq/69Yu0PbQr/yxw+pevfrTEi
Ps+chu+r7ze6Gp5R1zmxTTzefhq6+DvV9trl/h0Aamvnze2tw7lP53oO6B6d
+4COvX/jXN43vxc9f879Otbvyv3C8fXu1fbgD/7gD/7gD/7gD/7Lwffxd7f9
vsZdquFBcHO271JfX6/oXJBej0pOGdalOq84/K/nb3dOyMNa53V3vNj8cyvX
jNd1dm3JjfjvG7VsafK3/A/noKk6rZlhm3vKffD8RtfFW8PktQjWPvn5ei2y
cwo5xxBjxmthrbvxuOprYumH15vDd85P2xzfa2nvatdw7fa92uZ33Kfr3jP4
gz/4gz/4gz/4g/8q4N+t47f4j39bavjUXbXO0+7v98DXnJvEPM66dmsv4H/W
a3SOGD5pzUfqA7XJ6452ZIuf97bLmy3+ntLzSXZtf9U6173z73CM5yps1sLD
573eAF08z8hzJs4VZC6PP+e8Qqx/xd9z7n+PN+eaR5fl3POMV+vsr7Z999R6
LJPn8lqdHvf03du2/d54+552rXv0G++p9Xt/rV1j8Ad/8Ad/8Ad/8G9vfPrh
Mfe07c557mptx9HRKvf1hnfInDeGPq9nhJ9drDVvv6C2te7oZFhPaU0H9YEM
3n7Y+qvWOhG2e56Ws/jvm6V0bZB9j/3Wz3Hw9nPaz32yX7SVp8brWz1H4lzx
l1SzBplnbv0UY8daG/q8FhZj25obj1mvt+DduVv99gF4N66187uveq1Oj//+
jlH7uMEf/MEf/MEf/MEf/JuN7/O2+I91yvBy4qR3tH09L7jjq+gptvKWOK9M
zw3pb4F2jQzck9zle21/14/Yul5mi/++mcrW7+0c3nlpfC/Yz5xG188Qm+9r
DLpGvrdZs+CcNTx/b6O3Yb6G+RnP2/CNKPzDy2rfobbne5zX6M5m9gUYx7x7
7Lum4/1tKs65pmtR+7f43bjWzL9l8Ad/8Ad/8Ad/8Aff+LQv63h40hbmlVZz
7tVm1sMQX72q7c7Teq4SYrbWxvT8j+bmW/khzS05xjllzFNL21trV99sfH2r
nJULvueMp++g1Slb36e1lgaeb22850T6egW2t74HZe7ufPL28S43c4we37CP
2TvrNI/3+lmPbdfdJ7istjH7u3JHO2/wB3/wB3/wB3/wB/+1xAfPcXPjmptf
af3mX46nW99u3m4Nhr+dSp5C83jH3jun7N9m2tKAn6WXsdbkzRh3d9maY+j5
MZ1L0pw9ZWtNq/Nwnjtju/N4+2OeR0FXAy/Hd7NGnn3w+z7Otsadj+t8/oqO
85i/U/1XN/af9Z5d2TjOx/b3bfAHf/AHf/AHf/AH/9XC7/znSttn3TqcHs5+
pdY6dvov1jrO6lyQ1NZU93WR5vBdz2HNNloZx5Otndnq72tTt/LPvFnLXjPf
hz7f4HWsnsvY0trYh7JO3rniWYuwlavmoo7runnGj3m89fL+/qu19VdqGZsX
23Hm9bxT+A2X23ke033sX2r99jE4h3przmDwB3/wB3/wB3/wB/9m4v89/mMO
xDHWRMC5Lra2c8c4ru4cMuSCPKrT/M9c3Xyw69T9PdXOP/9e3J3ruL4VSv+P
vT5rHYDvjzU1vtfU1sH3791aW+Nnzb6zck86Vu85Gn/31XltzOUvbrTd531b
78Yl7T+/cX3eOer+Ll3aaHd/dvAHf/AHf/AHf/AH/5Xi9+uexX+4prcvartz
dXi515/273n62C3Od9Bq8/Kuxz6Lf27xVuqDtv1m1s1sFed734rFu9/3yvfV
+SSd06fH83vM3Tkne/4anr3zgHqsXNQ2fmIfZ+b/4PCeXNI2493j9dKu39ou
3kO/N2Be1n7/los654Kue7ltD/7gD/7gD/7gD/7gvxr4Z/Ef2uZO9B+1c7fi
ptY8WxNjTmeNtfkf+80VfWzVWtdhLXfn8c4p03Xvt3IxB+9rWLd8FvtI5vWO
05+rtTa+a2z8zHjW9tV45tZHmf97HfP51kfs3Zqc8+2czul5B/yu9bXT9ivc
f7HhcK1+bPc3Bn/wB3/wB3/wB3/wXyt8+A9civ5LwvVxtG/EvxxT5zzz9x5L
d95HazKc17BqzTOr1jqQs/KuWG+zV7dm3P1GxTnxt+6jtf/WJZ317av+HDtv
53k6b805ta2DZ/zwGxkn3uf21pj3e+NxyvEXd2afwu8LY/9w1999CLfPCXvw
B3/wB3/wB3/wB/+Ngg+/chw1dlDr38f14F/7uz5zOWrHbc3LOv/r+dyrFq5f
bb/jxKX9Vdvx9tuJs7t0bfvWt2d7/knrl/bPONf5gJxn3ronP3fGs9fCeqwx
9uwTHtZ6PB+1653X+Vvnmfd7zHo/78CFdo2+PfiDP/iDP/iDP/iD/2bC7zFT
c7fOv8zBei5Ca67P4n9dp209iPXrpet0/tn13rdbzN2lr+VN6fex5+HpeThT
eFady5uPd73TkfqssznX9vXjGTvusy/ax/Gh+j2OPbYZq/ikW+P+fDvunK5/
odbvoK95pH6/fxc2jh38wR/8wR/8wR/8wX8p+K+U//hYx+G3+Jd5GpxvT/s7
B4T/WU/duX3XxrxU/nk76N1favH9sc69f6+1r3nta1231ib0NQl+nj7uUNc7
pz6PG/edU9s+wLlavyvd1zzUtY7aOfgF/byuz/e1uW6fPxr8wR/8wR/8wR/8
wX8j4XO8f08MntZ/q3XP5vTmeFvf9uycr8fdu/666uXxzylL8VrVs/Zvffup
8/mey+egnYt1zs748zO3xr6PvaM6Pf76nM5ercddj/d7zNpP3Tp+8Ad/8Ad/
8Ad/8Af/Vsfv/Gvr9xwIE7yXwv9K1y71+7xe+vlTzi5buXq6zmivHVe1fiac
5+fq8Xeo4w9r/Zz7GDvQMX08MUa35nSy/5zOxy89qrWPSbv/nnPad1Tr33Co
c+w7D/7gD/7gD/7gD/7gv9Hwj3S9A533cvmXud5hO690vcNa8z+O6XidW3KN
s/jnlLOLfR2eh++576l9qFKfefZ+s6r1tQ93def13vaY85jqY+ew1mObMWPr
cwZHtYy17q8O/uAP/uAP/uAP/uDfjvh7dfq37OuYqjXfMw61jWKezjX68eaf
U15e2VNt3t3v7UGt73Pfv+UHeDwctGud5TvQNrdn/G2N18N2bNV63Hffck/n
GLOf38f24A/+4A/+4A/+4A/+mxH/5fIv9/n3b52/1TZXhzOWjiv1TXll5UBt
xoGfkf2q/pwOtH1Yp58t1+/jwuPBmEfC2W/n+rd2jr+/O7ePHX5Xfy/8Phzp
Guf0uw7auf6PBzoXvHN1+t0b/MEf/MEf/MEf/MH/R/D/Uf5TOueV8K9Xyv/M
Idnn/VNuTuE+b/lV3Z/q97/3cVyvOZYx7esd1HpMbPmoHn/g7G309ev16w7+
4A/+4A/+4A/+4A/+ertau++nv7TffTfif1Ne/cI9P1Bf98O2nk9/5ntnmHE8
rvpYPmzH+ndtjU+Ps4N2zf12DfufezX4gz/4gz/4gz/4g3/r4p/Fv8zPjFNt
f/8tW3XV+n9Oef0K48DPrnbbhxvHebt0bL/OQavPet5n4ac+Ur99SrY9Hg/b
tQ7bcR7vpXP7eQe65uAP/uAP/uAP/uAP/uuBT3mt+Zf/wxb+lDdm8TPqz5tx
dZYP1seOr+dj+nj2NQZ/8Ad/8Ad/8Ad/8Af/jYM/5c1X8vwO1U650fjZ39iO
dT/v7513oPbgD/7gD/7gD/7gD/7gv3b4U26t0p87z97zK4wFzwVVredy9nWN
s/qrnbdXgz/4gz/4gz/4gz/4g38z8afcvsVjKeWsMbGv4/ZrPR59rvt93sHG
8YM/+IM/+IM/+IM/+IM/nHzKq188htmutr01vj2Ou0/JsfY9+3GDP/iDP/iD
P/iDP/i3Av6UKVOmTJkyZcqUKVOmTJkyZcqUKVOmTJkyZcqUKVOmTJkyZcqU
KVOmTJkyZcqUKVOmTJkyZcqUKVOmTJkyZcqUKVNex/L/AY7DkcI=
    "], {{0, 656.}, {752., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJx1kEFLAlEQx/+aYZiQB4sOEXYJAgtRAwmCNgsxPMiqWF1iXdc10PWxuyFG
hzoHnSL6BNE38BJhl85BUBEdCoK6G15Ktlmt1KKBefN7f2bmzZuJTInPWQFo
A3TwQplTVaGScNElpWibsiJlo4ouyZIaylhIdJq5sDoFxgo2oqKiq3xk0bO6
tu6xv8ABK4bhxqwgaoyLx2Nm9nfstcYNzIa4njZ77c/v1IsPe765t+3as/ty
4W9+jzmykiZS/CAPikzVAYuPOF7Wmcm7xG6VhiI+NFlu86nJmTaftXKSfJj4
itgl5oUs8SOxN9Oly11cLGyJXzO01iEpqQTFUfIxxBCBBymKSfDgkEYUS1j+
pybYqgmjBIYKVGxCRh46deBIYShAIo5CgYgZeIn98JEHzF3/3mFHYyNA6Jie
eupoG3dAdRwYOuhok6/0nRXg4pwJqvCzWUvDpuUC/jYPVoH+I8OopwH7FNC8
NYz3qmE0T4C+e6DW+ASj/3IE
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{496.19921875, Automatic},
  ImageSizeRaw->{752., 656.},
  PlotRange->{{0, 752.}, {0, 656.}}]], "Input",ExpressionUUID->"a504f3d8-a16c-\
422d-9999-66adb9dbcc96"],

Cell["Here is a more \"data creative\" example:", "Text",ExpressionUUID->"f979fc29-06dd-4e0c-9ab1-bb75d1f717bb"],

Cell["First we get a dataset and cross-tabulate it", "ItemNumbered",ExpressionUUID->"4f0e917f-2b4e-45e0-b250-8768e9b8d332"],

Cell["\<\
Then we ask an LLM make the corresponding flow chart, or class-, or state \
diagram for it\
\>", "ItemNumbered",ExpressionUUID->"3c108466-1515-4448-9f3f-246a2ad60330"],

Cell["\<\
Here is a cross-tabulation of the Titanic dataset (over the sex and class \
variables):\
\>", "Text",ExpressionUUID->"8bbdb8fa-0761-494c-9f31-34ffcddd0e02"],

Cell[CellGroupData[{

Cell["\<\
dfTitanic = \
pandas.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/\
master/titanic.csv')
dfTitanic\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[142]:=",ExpressionUUID->"b12cc3d5-ec40-4761-9c52-ad88592806de"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          9019427428911544017013316866659752550146859477832127129600], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, 
              TypeSystem`PackageScope`KeyDummy[2]} -> 1, {All, "survived"} -> 
            1, {All, "pclass"} -> 1, {All, "sex"} -> 1, {All, "age"} -> 
            1, {All, "sibsp"} -> 1, {All, "parch"} -> 1, {All, "fare"} -> 
            1, {All, "embarked"} -> 1, {All, "class"} -> 1, {All, "who"} -> 
            1, {All, "adult_male"} -> 1, {All, "deck"} -> 
            1, {All, "embark_town"} -> 1, {All, "alive"} -> 1, {All, "alone"} -> 
            1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`KeyValueShape[
              TypeSystem`PackageScope`AtomShape[34], 
              TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "survived" -> TypeSystem`PackageScope`AtomShape[34], "pclass" -> 
                 TypeSystem`PackageScope`AtomShape[34], "sex" -> 
                 TypeSystem`PackageScope`AtomShape[63.], "age" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "sibsp" -> 
                 TypeSystem`PackageScope`AtomShape[34], "parch" -> 
                 TypeSystem`PackageScope`AtomShape[34], "fare" -> 
                 TypeSystem`PackageScope`AtomShape[60], "embarked" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "class" -> 
                 TypeSystem`PackageScope`AtomShape[63.], "who" -> 
                 TypeSystem`PackageScope`AtomShape[52.5], "adult_male" -> 
                 TypeSystem`PackageScope`AtomShape[36], "deck" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "embark_town" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "alive" -> 
                 TypeSystem`PackageScope`AtomShape[31.5], "alone" -> 
                 TypeSystem`PackageScope`AtomShape[36]|>], 
               DirectedInfinity[1], 10, {All}]]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
           TypeSystem`Atom[Integer], 
           
           TypeSystem`Struct[{
            "survived", "pclass", "sex", "age", "sibsp", "parch", "fare", 
             "embarked", "class", "who", "adult_male", "deck", "embark_town", 
             "alive", "alone"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["female", "male"]], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["First", "Second", "Third"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["child", "man", "woman"]], 
             TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`AnyType, 
             TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["no", "yes"]], 
             TypeSystem`Atom[TypeSystem`Boolean]}], 891], "Meta" -> <||>, 
         "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, 
              TypeSystem`PackageScope`KeyDummy[2]} -> 1, {All, "survived"} -> 
            1, {All, "pclass"} -> 1, {All, "sex"} -> 1, {All, "age"} -> 
            1, {All, "sibsp"} -> 1, {All, "parch"} -> 1, {All, "fare"} -> 
            1, {All, "embarked"} -> 1, {All, "class"} -> 1, {All, "who"} -> 
            1, {All, "adult_male"} -> 1, {All, "deck"} -> 
            1, {All, "embark_town"} -> 1, {All, "alive"} -> 1, {All, "alone"} -> 
            1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`KeyValueShape[
              TypeSystem`PackageScope`AtomShape[34], 
              TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "survived" -> TypeSystem`PackageScope`AtomShape[34], "pclass" -> 
                 TypeSystem`PackageScope`AtomShape[34], "sex" -> 
                 TypeSystem`PackageScope`AtomShape[63.], "age" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "sibsp" -> 
                 TypeSystem`PackageScope`AtomShape[34], "parch" -> 
                 TypeSystem`PackageScope`AtomShape[34], "fare" -> 
                 TypeSystem`PackageScope`AtomShape[60], "embarked" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "class" -> 
                 TypeSystem`PackageScope`AtomShape[63.], "who" -> 
                 TypeSystem`PackageScope`AtomShape[52.5], "adult_male" -> 
                 TypeSystem`PackageScope`AtomShape[36], "deck" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "embark_town" -> 
                 TypeSystem`PackageScope`UnknownShape[False], "alive" -> 
                 TypeSystem`PackageScope`AtomShape[31.5], "alone" -> 
                 TypeSystem`PackageScope`AtomShape[36]|>], 
               DirectedInfinity[1], 10, {All}]]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
           TypeSystem`Atom[Integer], 
           
           TypeSystem`Struct[{
            "survived", "pclass", "sex", "age", "sibsp", "parch", "fare", 
             "embarked", "class", "who", "adult_male", "deck", "embark_town", 
             "alive", "alone"}, {
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["female", "male"]], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["First", "Second", "Third"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["child", "man", "woman"]], 
             TypeSystem`Atom[TypeSystem`Boolean], TypeSystem`AnyType, 
             TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["no", "yes"]], 
             TypeSystem`Atom[TypeSystem`Boolean]}], 891], "Path" -> {}, 
         "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 10, 
         "DataRowCount" -> 891, "DataColumnCount" -> 15, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   Mouseover[
                    
                    Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]], 
                    Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                    Scaled[-0.15]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, Keys}, "KeyDummy", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["survived", 
                    Style[
                    "survived", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "survived"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "survived"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["pclass", 
                    Style[
                    "pclass", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "pclass"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "pclass"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["sex", 
                    Style[
                    "sex", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "sex"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "sex"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["age", 
                    Style[
                    "age", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "age"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "age"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["sibsp", 
                    Style[
                    "sibsp", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "sibsp"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "sibsp"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["parch", 
                    Style[
                    "parch", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "parch"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "parch"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["fare", 
                    Style[
                    "fare", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "fare"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "fare"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["embarked", 
                    Style[
                    "embarked", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "embarked"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "embarked"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["class", 
                    Style[
                    "class", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "class"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "class"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["who", 
                    Style[
                    "who", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "who"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "who"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["0"], 
                    Style[
                    RawBoxes["0"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["22.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["7.25"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[0], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["1"], 
                    Style[
                    RawBoxes["1"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[1]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["38.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["71.2833"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["C", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["First", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[1], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["2"], 
                    Style[
                    RawBoxes["2"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["26.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["7.925"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[2], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["3"], 
                    Style[
                    RawBoxes["3"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["35.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["53.1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["First", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[3], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["4"], 
                    Style[
                    RawBoxes["4"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[4]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["35.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["8.05"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[4], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["5"], 
                    Style[
                    RawBoxes["5"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[5]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["Indeterminate", FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["8.4583"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Q", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[5], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["6"], 
                    Style[
                    RawBoxes["6"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["54.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["51.8625"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["First", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[6], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["7"], 
                    Style[
                    RawBoxes["7"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[7]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["21.075"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["child", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[7], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["8"], 
                    Style[
                    RawBoxes["8"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[8]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["27.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["11.1333"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[8], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["9"], 
                    Style[
                    RawBoxes["9"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[9]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["14.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["30.0708"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["C", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Second", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["child", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[9], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["10"], 
                    Style[
                    RawBoxes["10"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[10]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["16.7"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["child", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[10], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["11"], 
                    Style[
                    RawBoxes["11"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[11]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["58.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["26.55"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["First", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[11], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["12"], 
                    Style[
                    RawBoxes["12"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[12]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["20.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["8.05"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[12], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["13"], 
                    Style[
                    RawBoxes["13"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[13]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["39.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["5"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["31.275"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[13], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["14"], 
                    Style[
                    RawBoxes["14"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[14]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["14.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["7.8542"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["child", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[14], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["15"], 
                    Style[
                    RawBoxes["15"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[15]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["55.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["16.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Second", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[15], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["16"], 
                    Style[
                    RawBoxes["16"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[16]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["29.125"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Q", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["child", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[16], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["17"], 
                    Style[
                    RawBoxes["17"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[17]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["male", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["Indeterminate", FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["13.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Second", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["man", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[17], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["18"], 
                    Style[
                    RawBoxes["18"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[18]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["31.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["18.0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["S", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[18], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover[
                    RawBoxes["19"], 
                    Style[
                    RawBoxes["19"], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[19]}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19]}, "RowHeader", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["1"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["survived"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["3"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["pclass"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["female", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["sex"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox["Indeterminate", FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["age"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["sibsp"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["0"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["parch"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["7.225"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["fare"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["C", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["embarked"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{11.200000000000001`, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["Third", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["class"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["woman", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    Key[19], 
                    Key["who"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{52.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 891, 1], {1, 891 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 891, 1], {1, 891 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[891, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[891, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 891, 1], {1, 891 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 891, 1], {1, 891 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}], 
                    Graphics[{
                    RGBColor[
                    0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                    Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 15, 1], {1, 15 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 15, 1], {1, 15 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[15, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[15, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 15, 1], {1, 15 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 15, 1], {1, 15 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        ImageSizeCache -> {705., {314.134033203125, 319.865966796875}}, 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[], 
       ImageSizeCache -> {705., {314.134033203125, 319.865966796875}}], 
      BaseStyle -> {LineBreakWithin -> False}, DynamicModuleValues :> {}, 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 9019427428911544017013316866659752550146859477832127129600,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905289812372171*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"7d1217fc-a67b-4d18-8a23-394124111146"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
ct = pandas.crosstab( index = dfTitanic[\"sex\"], columns = \
dfTitanic[\"pclass\"] )
ct\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->
  "In[143]:=",ExpressionUUID->"b6ea7af6-56de-4c73-b545-52adc1daf1a8"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "female" -> <|1 -> 94, 2 -> 76, 3 -> 144|>, 
       "male" -> <|1 -> 122, 2 -> 108, 3 -> 347|>|>, "AllowEmbedding" -> True,
      "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[67.2], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[34], 
            TypeSystem`PackageScope`AtomShape[34]]], 3, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Integer], 3], 2], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[67.2], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[34], 
            TypeSystem`PackageScope`AtomShape[34]]], 3, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[Integer], 
        TypeSystem`Atom[Integer], 3], 2], "Path" -> {}, "DisplayedRowCount" -> 
     2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 2, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["female", 
                  Style[
                  "female", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["female"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["1"], 
                  Style[
                   RawBoxes["1"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["female"], 
                    Key[1]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"], 
                 Key[1]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["94"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"], 
                 Key[1]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2"], 
                  Style[
                   RawBoxes["2"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["female"], 
                    Key[2]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"], 
                 Key[2]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["76"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"], 
                 Key[2]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3"], 
                  Style[
                   RawBoxes["3"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["female"], 
                    Key[3]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"], 
                 Key[3]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["144"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["female"], 
                 Key[3]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["male", 
                  Style[
                  "male", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["male"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["1"], 
                  Style[
                   RawBoxes["1"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["male"], 
                    Key[1]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"], 
                 Key[1]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["122"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"], 
                 Key[1]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2"], 
                  Style[
                   RawBoxes["2"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["male"], 
                    Key[2]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"], 
                 Key[2]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["108"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"], 
                 Key[2]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3"], 
                  Style[
                   RawBoxes["3"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["male"], 
                    Key[3]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"], 
                 Key[3]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["347"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["male"], 
                 Key[3]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{162., {87.634033203125, 93.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{162., {87.634033203125, 93.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9052898148500233`*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"e5af25bf-fab7-4022-9c1d-d03d17e3343c"]
}, Open  ]],

Cell["Here we define an LLM function for obtaining Mermaid code:", "Text",ExpressionUUID->"72afdf53-0953-44ec-b3e6-0f2c7f142470"],

Cell["\<\
fjmmd = llm_function(lambda a, b: f\"Transform the JSON data {a} into a \
Mermaid {b} spec.\", e=confOpenAI)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289819055579*^9, 3.905289823508932*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"868cfa5e-54ef-440e-b139-c1fab7bfc78d"],

Cell["Here we convert the contingency matrix into a flow chart:", "Text",ExpressionUUID->"2d3d6de0-46f6-43b1-a04c-13e99369c6f1"],

Cell[CellGroupData[{

Cell["fjmmd(json.dumps(ct.to_dict()), \"flow chart\")", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289899900105*^9, 3.9052899017003508`*^9}},
 CellLabel->
  "In[147]:=",ExpressionUUID->"b5ae7c73-299f-4300-a180-0c445d87cceb"],

Cell[BoxData["\<\"\\n\\ngraph TD\\nA[1] --> B{female: 94, male: 122}\\nA --> \
C{female: 76, male: 108}\\nA --> D{female: 144, male: 347}\"\>"], "Output",
 CellChangeTimes->{3.905289903216991*^9},
 CellLabel->
  "Out[147]=",ExpressionUUID->"03bdbcfb-c0fc-41ce-a017-dcf16ef8c3fc"]
}, Open  ]],

Cell["Here is the corresponding Mermaid diagram:", "Text",ExpressionUUID->"c911c06b-dca1-4f3a-95d4-bca5d58b12d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<MermaidInk\>\"", "]"}], "[", "%", 
  "]"}]], "Input",
 CellChangeTimes->{{3.905289856473239*^9, 3.9052899239066267`*^9}},
 CellLabel->
  "In[148]:=",ExpressionUUID->"bc64f8a8-50eb-40df-ac93-3af39433ccde"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
    "], {{0, 316.}, {748., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJx9kD9Lw0AYh5/Ugn9QFOzg4FChQxelOkiHLtYhdJPUgtUpSdMgtEm4RIq7
3Rxc3cTFb6BfoZuC4ODkRxBBZ99LkHSpd9z7Pve7H3fvvVtOaPULQLwgwbJH
B0rZl+012XSC+NwPvF4rSDzfU3XHEHGiA8ZEx2INhkGiLLNZPumeluc/MEjP
wXbjiNlDXD9vmfd1+x/frLHY82JX8qesipLH5cqScMnPuKrZybiheZREifCR
ZnVsHQr3hKv+FDtT7EZK+6+FG8PBhZvXzbIXdNqSdcM2ibEwaer/Z5bwHurf
MHeTa84tPI1h4z3XKnewegWPz7mW9ySylZ1KRVmFfh++HmClC+svsHT214gZ
tZXT2kxCmT4DPFFaBLjsCO1RY5f9X2IATGE=
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{748., 316.},
  PlotRange->{{0, 748.}, {0, 316.}}]], "Output",
 CellChangeTimes->{3.905289878382753*^9, 3.905289925293662*^9},
 CellLabel->
  "Out[148]=",ExpressionUUID->"262aae41-57c9-4289-98bb-80c3a2f5ad3d"]
}, Open  ]],

Cell["\<\
Here we convert the contingency matrix into a state diagram :\
\>", "Text",ExpressionUUID->"cc29b934-40cc-4881-b438-763d2be87940"],

Cell[CellGroupData[{

Cell["fjmmd(json.dumps(ct.to_dict()), 'state diagram')", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289931512733*^9, 3.9052899331092863`*^9}},
 CellLabel->
  "In[149]:=",ExpressionUUID->"9a386bcd-4f09-446e-abfc-e543bac99f0d"],

Cell[BoxData["\<\"\\n\\nstateDiagram\\n    [*] --> 1\\n    1 --> female: \
94\\n    1 --> male: 122\\n    [*] --> 2\\n    2 --> female: 76\\n    2 --> \
male: 108\\n    [*] --> 3\\n    3 --> female: 144\\n    3 --> male: \
347\"\>"], "Output",
 CellChangeTimes->{3.9052899345303583`*^9},
 CellLabel->
  "Out[149]=",ExpressionUUID->"2ec4c2e6-67e9-4b25-9d8a-096fbae88d1c"]
}, Open  ]],

Cell["Here is the corresponding Mermaid diagram:", "Text",ExpressionUUID->"50e7a196-e739-4d7b-ad81-4dc148082d92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<MermaidInk\>\"", "]"}], "[", "%", 
  "]"}]], "Input",
 CellChangeTimes->{{3.905289938240967*^9, 3.905289945483567*^9}},
 CellLabel->
  "In[150]:=",ExpressionUUID->"256ab51a-3dd8-40f1-85fd-1c50ab3f6efb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
aQ1vFbl+b0h1ORW71ZUIhVrvT7Ex9RITGsXHNcxIP1XikJI7Hwwx84k5rVIp
WRel2kiC64Ksy6jTOPRC/nDXPbj3NDG+VVxMi5iGKc2atJcDit+tGmD0sPAN
VY6t1rBSJFSl0mjywbDn6lWjj9Ta+dyhPj37xzRIePdPDZultDp66KT2BwKQ
YSU+r08N4JSOYtUAVEsFggRO5WC4L2RVeO7Yug+ValgvLjG+8eABwyUuWugs
B0uqySSTLFdXWCxKb0ByuL/CypEzuOQt8WPA5l9+Pi8hpmPDd1unpd6VwbN+
9m1IdXckv/q3YZOM/jLAA02+aodq2K6T1QpwxR+upt+jSL6SeuF888qz5LhO
SbEd+/f+WC14Sd3DnKsN+UYc1Q1VSeufaoWPOOSA+khA6dx6YNy7bRIbtLcU
yUGn4raV1CvoKfkTSe04SX77/RWlSpOs6WW/YtUrmfcclzNyL5x5dvVcbvqJ
RzifPv5gYN/Px30w63zas2sZBWcOP7x29smtS88unXmc+9iBvyK2V81gcmMp
IFydXV8aqnK4NJKq9112pfBF4FL6sytnX6B2dFxMy/n6s+UDe39xZO+tq+fy
zp16cin9OW7ifP+GCa0RFkGReKwpW1HS6HcNToOKzajcuPzs6oXsc6cfXjrz
5Ob5ggupTw7tuDb8/a9nfbPhQurT62fzr57LP3/62fnTT1FTfZ7itatRJXVg
KwrVWk28r2WPYtMpe7ZeWL/y5P7tN9KPPzl9LIsfj0sfWelHnl04mXvywO3T
h++AsbdvOLt2xcGM1F8CTkU1M/3c+fWVDGhWX0009jwY2h0QxuGlc9krluzb
u+PSqaOPTh3NLHucOZ6N2tE1LlKPPD6w69a2Dec2r081FElkN1IA7aVLjlfD
SA236slU4H33PNu2duX+HZtOH9pz5fTRX9KOPz5z7NHpo4/OHM06c/TJ6SNP
+ZHNj0xx7Nx0YdXigw9u69BrEq9XKBSQq2OwKUqVpRDrfIdBWbFo79nUTJdZ
MRUqFh1Tr+HDoB78o12vmAoUr0VxmJTiXAXP6/LkY/tvbVlzHmhlPa6amIFA
9S/vU6JVWdoVNxgCHmXH5rN7tl8ueK4YixSLnh+6yHO4pvrwtd3E7uP5ezdN
837clp8TkvxaY7iit1fHoCowpfDAO1D24ol72YLdOZku9JpVpziMvBa8RjZe
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
r+RmKSsXpKafyGyW2PFManglZ21fvHTjjyhVPaG1hc4iWwuM8e0303p0GXjy
8M392285+XrsBr1SWBzi+Wkly2ep5m5A4/JoDWDmq+qfK8vmpAMafi/lAUvB
AFuLHn1eVFT05ZdfJiUlLViwAFBSVE5wOp0KZ0iSIUKGV0RafUr8zLdZCbLN
ZHj0cvu23e3atdu9ayvtUe7ne9UtmXc47ylbdttkYEns4aT9VzuYVjWzPSMO
bH9454oNbBwMeEKopKxs3rSrSUrr1WtWCAMYZQjvnvw6JCzM0tYCoxs3bgwe
PLhly5b79+/XtAI/JNnnUs4cf3rtvAUC1mEpvcS62YsjvNwZ+aqlvmV3DPqg
rkg2FCgvspUVC4547Yo+3w5TZMa0H6g7vF7vK8rPKL0NgsFJottkMo0YMWLk
iA9sZp+pWFqz7Lg+n63AqdPxpartqk+qWbWbRycCpcJKvPctxhAzgAuVudMP
URSRb1sj0WZMPl947c1Hjx59+umnbdq0Wbt2bTio9ZqxCyHbtd4ccOrxefU6
c/9+gz/5ZJIZBeIbFkLb0XjNqiXH4Y5B9Th5qoC6hHXoVc5sKWCd4rYoezbf
uX/dzoee2FYxUigQ8CtFhcahwwZ27tLmxo1r+MLnrbzqQYNQ7XAGeHNycj76
6KMWLVqsX79eq9FYdE4K+uEk83T9Sxkvju575IBQLZI0YAxxqLrDfcRhK5Zb
59KVpC6743cqd66Zt6xNQ7X8Tslhs3/44Ye9evUyGAzipVHrt5pJsDdA8eDB
g+7du0PTQbuix51WedXig8ZCvrmSUdEXh/SGENm6av8GgFMYulyrcrOKQGpg
h9Ug4w8f3PCtX36WLVAJkzTgk/ne37TrPQETZ3T6tWvXhg0bBsDu3r07yEmo
1F8NAgum1Xp2qA6w37lT9/S081RROI/htXklxW1XDu+9ffOyAeqDbexiERtD
yK9yZmnwMC/zlJ8XnbYb+EYY6n7lEncY4ZLv2bu1Q4d2X331lccdqJwBLBx2
UGFh4XfffdewYcNly5ZZLBZRa1W4sYg31Dpbu1VSnmY6Vy87DpWKQlJfaPSm
l7snIgIsl8KyKQTBZSyWi/OUjFPZZ47flcNbwDH/Ys2aNfHx8ampqXjpq0Tm
o1S1JKL9Z86cSUlJAXsran4auO/I7iuphx+wxG8T60Grmfc7j8ZYaJMFqE6j
GgSOhCrD+IaVZx/ddvIoIrfPVKhSV2slM5ghLS2tR48evXv3RmHKFrIiiggj
4/z48WP8zg8/zHLYmVHK7U8+esI2zeK7m7E9DX3LFhy0G1m0U/DzK57ZUaxc
OZu3cVWGwnd8ZlNamBvOfp9XjUWbCwvzJ02a1Lp124MHD1e6g/R6/axZs+Am
fPPNNw6HI6JB1O7jm+BSKCDA1nBeu/LEratF4aIKd1Wzx5BZlTlhZ1b1Z000
jK5TFs3dxSIMtB+lFG7hmzdvQqfPmDFDyNIovQ0SLC1EosDpvHnzmjRpcunS
pfBX4RWgFbdBWfDDrtsX9aZChalXI9/4j2/2xw6xh6OObSisK+SrPfNl59kG
Ey+CB3Zd2LX5ojqvnI0ABYKeCkqniLIdOHCgbdu2AwYMuH37tii2NvYVUQsi
Qj1uzp07F7bB/fv3mW0gizFcKRgK7xQcCoZ38T609/rWDWlgS5MuvGkjbWuo
Pdu5XIKwMvMNDW28BfDx1uXCeTO34lrdelTi+4IH1RKipm6KAJ84kQq0jh07
Ni+PDVEJbShYnewKUSmtkbBy5cpmzZp99tlnL168UF5mc0ocTeEdeSAwXjyR
Fs3Z++C2zcS3ZWSxbl5NHBChDlMYnhZd6YODFCp148+nzqZmsk3MfWETSDQ4
bOAhQ4ZAEkLRa43wsuNuUXpDEmYVXTidTkj+bt26wWckNmMsRD3uYkM2jmJl
yew9W34+fXT/9fSTD9KOZ6Yde0pHxrHHGccf4px2/PGhvTfTT2efPPbg+JH7
6alZOzafXbl4z76dGVBbzI0LhqHK3dVyBnMFsSUY+AMbNmxo2rTp559/Thyu
aEKObMZr6VAk/eCNGzc6duy4cOFCt9utGe4hdpKk8B7qTE143eHNDY8dur5k
wY4dW9JRBVa1MgeMijOo5snsc6eepp/IOnHw/oGd13dvubhozvai3EA4707i
WlUOL28dDPpL9ojk5HS6oYkSExO3bdum7QJwtTDaSxqfN8L27dtbt24NUDx8
+FAMzbyUpFDQTx3HDPIA2w9u/o+79my/fHDPjROHHqedeJJxKjPt5KPUI4+P
H3xw+uRjHGeOZ585lsOO40/Z9fHMvTuuzJm5Jf3EI/xCyM/391Ej2Fo1+tNP
P6E6kO0hTqILwkWJmsdvQNR6FFwVBAk5cODAfv36GWG8lsodklg/UcoP+t+t
5D9x3ryYlXHi5qUzjy+deXLpdM6l08/YxZksnC/g4tzT61fyzqUxZrh+Ie/2
1YLn2XZ1/2GxrWHwVfa/JkjibLVaYfslJCRMmzZNp9NFWFz0DBF4e/bs2X36
9MnMzFR/RaFRewHqkIy3s5litAgnsxm5ejUUBh/cKeL1yip7XDydKQ58vH4u
5/61oqy7RjZSHGTJIfgFnye8EY7f5yK3jucpsQQPCuRSMW7dutWhQ4dBgwY9
ffpU0UgYPADZIvTpoUOHunTpgk7JyMgo24MVdS/bAgPWb1D289hSgG+h5bIp
928X37z64tLZ3PNpz86nP76QkXkx49nFjOfn07PYgZtnci6Ej2cX0rKyfjHr
8gMlkkZm+8ZqE6UImwqzFk5AMMJ3Ft2hcOFDwjZKb0IRmWnPnz9v3779+PHj
ScgL8c4RAVPKy1iZe6yyRwm51R3BKHwScXC9yQKQ/IGQN4xQr5OpGhWnbFtt
rtrC+2uXS4RHrWUFeTJlyhQ4a6tWrQJ4aTiGakFnOFCweBcvXgxcEJ8wYISg
6IQ5Gp4jwPP2FbfHR0CGFgKkAmqxxQ5R5Z8DvB28THaFvQO7uvVS2ABmH9gU
v4o9a9Rr6dKlED6LFi3CY1rTF9f37t2DGm3Xrh1QIIotgsAvJUktYnjvWinE
m10tHhxYWMUkmnCWxP5uIU0d6QixJ9lfhUpi12TJQ55EZKTYbDYY9qNGjSoq
KtKyVnS89c2JOBnscfny5ZSUFGgrYhWRuqaiAB+hIDwBHwsF0/C6z0v7c2t6
WXtw9ghnwAa5MajeJ5wCObzHf31ITptSKHo/Nzd3xIgRsAnXr18vsjXAPF9/
/XX//v3hmYo/VzWpJA76HSpIUAqPcYb3ZZZVfg5xp6zMGQwfEpu2iLPI/YcV
7SOP2M9tYG0aRrgKAbZHWziFkqqWlZUFYwYa9pdffqGb0LPjxo2DWwqznyI2
IoxQMvz0soxoVM/j8drpqSCkjxyiegX9AZYWKKmFl0sqK44SzApoB8PCCw5L
IOSVWT38okZ0gcanUq1evRoOFCqlaPK3o/QmRIYlGhMmVpMmTbZs2SK+IhYS
nBBkysMVkFi8URLbFjOFqOa1lplIwtJuiVHlsBiXg2JSWECW/LK6o9jLHZly
O1pkC8Mb7d27d6dOnU6ePHnx4kVcgLep8LAKhMDRQhWlCrM9XyqBzvQVt1RJ
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
1TMgaB43yzfmnSihW0+fTh01epgKYUlFaLDKrSYhYwUejxw5Ai/V6XRqN3ms
cpu/BolvZOBv2rQp7S4htpqtIooUNegvHFlZj3/8cab2Pk1fqrr38ndrdgrI
y8vr8v+3991xUhRN/3++z+99XhUkK8EASubiXgaOfAQlHRJUVJCsogIiAiog
QUUQwSyICIjEI0jOcOQ7j6ykSxtmJ20OszPTv+rpnbm5u92DQ3jg4bY+zTA7
0xtuqr/VVdXVVb16jRw5kiQ/1Iy4+6Z82O2rvqh0xWdSXX3RokUpKSmHDx/W
+tzpzb+SavhrTgCs4sLj7dKlE0hF7TpC6G7oS+SEIJHU4ANliYzhMqSbfe66
jnr3SHNk7d+/H9BqNBrvwtAtxTKS1mj58uVHjhzSZYCX7lK6M6Swdc+ePYmJ
iaSIgH5dTLVV7/AG9n9Atz+WtOIg5I+Cl/BXJycnL1iwQE28Gbq8yD/7qUgL
CQgWDZHRsGHDTp48jXTe1ztuImsfp00r/fv3/+STT8i5VrG6nHXzXwxVpHMM
Tp8+naSjuePJxzQiLAPmjho1hqZp9WLJ3Tv4RVq5ycWLF6enp6s6Ax6oXq9f
cyXdYx1YW4WsRLfQP1ir0qKNXlLSvWvXrqD2u91urWz6P7ZxSo3zYPCeEm1L
zpcs+ea7b39CSFfkD+krAd0BmOgjEOAvmjx5MsgHkttHk0XqMP5Hzrr7kEip
XIDqlClT7t63yOpOii5duqmV1O78yprGCLudHzduTI8eGZcuXUIqKrUVZy2B
/L0sTF8pqAYpxAArL3A0Nxqwddy4cc899xx5CHdiVi011LUqhNqy784deydO
eF+LFdEvwip/ioTUVxUfKyZNhVi2bBmovhzHafN76RU6TUt/QKBKxFRhYXHH
jp2XLV2ByOOF5xxAol/9s5R1f1lXfpHEvuqLDJZpWgUuUkBUxhtJhFOnc8a9
8Zb2Lu2kTGWuMo3cJV9dvpRh8FyWiENDlHw0Y+79fI+RI15z2NmgmXw7uYYe
EPr666/BwNm7d28ZnVATU+piqBQQfNoDlcVQnCjxgOGhrpWS1CpIXr9R0LtP
P32NTq2PMqZCH70BkZz7cFqj4MjR/0h9GRRN4Gzbti0tLe369ev3h4fw7hI8
By2LNbSLFy+3a5d++GC2zxMg8AzySw1B0UBBnnzF+NKaT/AHOSWh9Rs3fLlo
sf69RFHSly8s07StK2VKYcpqEUM/rlyLaworIjRwI/9Kj55d586ZiWQhOPxu
b5fafz9pOuGBAwcMBsNPP/1UxkLXh0YElEVSMeAXlY0EUkAWBQlJpZmhgyqx
QfW8A6DB0ZCQRJhC+EV2M5HzcFDVjjBC/EpJaHgX/Mjy1X+0n52dnR0fH3/+
/Hly5b7xEN4VKl8lHJ7M/v37U1OTc3PPKK54SV1hwW55xaVKHKekDovevyeF
PMJbFFFAVkywubRgwXwQhvAJxGeo6N6eCj6h/Ld4PC6i5wD3lQEgKWqV5HY7
4XjixLH4+NisrI3BESgFxUEVnFQ1DJIoiPz8/O7du7/99tuE75qvCZXMWZor
XtJHOulIwyluoF8TvqjZEZV5VhSGDh16+vRJ/RXtXA51lJQC7lhxRUqclVRi
kugjGUhqaHJ9z549IHmOHz9+p6pC3OdEngOpdqcQCT4JrF23OjUtMe/s6YAI
IPIpzSMjjDiapq9du4ZU87ZiH4W+vrzmdJ03bx4pUlCm6FLF0QjamiB8VHFx
Mc/ziOyZkECMBDw+JxlFW7duTk1NzcvLC8KUxGB75cDthOg+CCSpJdQJ2Ww2
UpfZYrGE2h6C7HY7y7LKOlfwYjkWh7D1NCczibWYMmXK7t279a51/fJuedKm
Tu2XwBWn08kwjDYq9KMF5tP27dvDnKLdutehLHedRK0wNnbi+UmdCL/ghlcr
Vi1r3zH1yvVLOIpZsPtFwALm+PJlv/Tvm+nz+G9F8QUN6s+cPAEA7Q8W24bZ
+L2Jky9f/EvTrk3F5qKC4tBmkc5oKukgodjouGNHsTglOCV+A2DuL7/80qNH
D6PRLKtVxZUKvMGvFnxVDqsaysg4J5YOXJwwYULXrl0vX74s6zKiS0pQ+swZ
c98ePwkpwerBTQEolKNHZQ0ZCadPngmOIoXRcz6Zu3LFKsI40uHCuYt+r3CT
AaO6REgQ4oZ1G3v37o1QKX8vnB86dAjmU7C7ESobA3zXHuR9QHgA+4NH5UmR
kE5cUizg+XXV8sTk+Et/ncd8E71ELflmybeGuASv20eeJ8Cw4uc/YvjIjK7d
jUUmbPUoV8aOHleYX0TOAbP9+vSHPhqWwzXt7TmncxMNSbt37sFqr6L6kgl3
+vTpQ4a85HJ5sG+ZCAqVdWQpoWraqqhcfB05X7ZsWVxcXFZWFlJzuQOBAjrj
4zlJiW21+o9yuTryQVJFKBxB2MZExb7/3hQNcV8uWPTj9z9p4hpAF90mBrOs
QqleMmsog+HFwS+B4CW2tratY8uWLWCfgtaEdKuK99KH/58ivzKNkkYKxJB6
zJrndv2GzR26ZFy4fI3MaXB3zuwZ8XFRu3f9IYm+oM0ia5GBIdrlS+diY1qn
JBvO5p0RA/BsA3169+Q5a0DwnDqZDddjoltdu3oZW8SSv4LPwV+nfBH5AZuz
1mseXbfbO3Lk6KlTp+v3var6W9C2EgLuOxu7+F9B5Xe4aMuvMPJPnDiRmJi4
YMECpO1uQGjSe++3aNXySPZROPf6weqB5wiPNaBrxDkQ/AbCU2BKUmLcwBf6
uV024OxXi75Y8ctSn9fpcdvnzZ0F/Orbp1fJgAnVdPGluBlNBQkJ8Z07d9bv
O1uyZEm7du1yc3M1k02fw+SBn1Vl7OaTcLIDhYKlORXPKnGartv4R5eMvoVG
jnR5a/zY6KiW77z7Jma4iNkkSuFZIAuS7J85Y3pCYiwAds3vK4GPvZ7LAIb+
vPxH4GBMbOv5n88lEd1lmFUWp6pM6NypfWxcm00b1yr9EcfZhg59ddmy5bIm
n9XdyiSIUfkE6OmT5Cpnr+oD8MrsRiHeg6tXr3br1m306NFEUMOTm/jepNj4
uMlT3sMTnRKkLUgeEqpdDqoSYRlwx+tztmubDHzp2KFtfsHV1at+mffpJ8Dl
kaOGJRhioqJbXrp4tiI5rA4AGEvkfFPWuqTk+PT0dkjBI/y2adOmgX1648YN
fRSllsDkQYr1DU1h1EJZWR8hy2FwPHz4VNeuz1soThADI0ePMBjiUtKSlSBt
HNOreO2CPtjyR0H0u93Otu3TWrRolpyaNG3aB3GG2EmTJiQkGWJjo+Fz8J6p
MO/Vjhh0inJ++e9LSUkJ0bFRv//+G1y8fv1q3759jxw5om16Kr2jTXNXCmqr
WlANR/pdNlar9aWXXurfv7/JZIKXb731dqtWbVJTUxWAiHp/b8iwAZz8Biuv
0o4df8TGx8DYiE+Imzt39pSp72dkdIXzmJioj2Z8SDh40wajhZwMfnEQvLdD
hw5KPj3v+PHjQRkuKioq4z7SykNUSagG0eEP+LAZKEskRCEv79zzvftSVqZf
Zv+omOjk1JQzuTla9r9wjWQcAsSv+m11SlpqQlKiITEB3g7nraPatO+QvvWP
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
+x9h8X8D/X/yUQWz
    "], {{0, 217.}, {313., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJx9kD9Lw0AYh5/Ugn9QFOzg4FChQxelOkiHLtYhdJPUgtUpSdMgtEm4RIq7
3Rxc3cTFb6BfoZuC4ODkRxBBZ99LkHSpd9z7Pve7H3fvvVtOaPULQLwgwbJH
B0rZl+012XSC+NwPvF4rSDzfU3XHEHGiA8ZEx2INhkGiLLNZPumeluc/MEjP
wXbjiNlDXD9vmfd1+x/frLHY82JX8qesipLH5cqScMnPuKrZybiheZREifCR
ZnVsHQr3hKv+FDtT7EZK+6+FG8PBhZvXzbIXdNqSdcM2ibEwaer/Z5bwHurf
MHeTa84tPI1h4z3XKnewegWPz7mW9ySylZ1KRVmFfh++HmClC+svsHT214gZ
tZXT2kxCmT4DPFFaBLjsCO1RY5f9X2IATGE=
      "], "RGB", "XYZ"], Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{313., 217.},
  PlotRange->{{0, 313.}, {0, 217.}}]], "Output",
 CellChangeTimes->{3.9052899466795797`*^9},
 CellLabel->
  "Out[150]=",ExpressionUUID->"1b3d33ba-48c1-4d3c-aa75-6d9fc4133270"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercise questions", "Subsection",ExpressionUUID->"d24dcaba-50a2-41a2-abe3-afbf09346b52"],

Cell["\<\
To which parts of the flowchart above the workflow in this section \
corresponds to?\
\>", "Item",ExpressionUUID->"9fad2b3b-ad62-4fc0-a3c4-e0d542fe0b95"],

Cell["\<\
What is preferable: one LLM-function with complicated prompt and argument \
specs,\
\>", "Item",ExpressionUUID->"1fe534fd-92e2-40bc-8d5e-7674dc8d17a6"],

Cell["\<\
or several LLM-functions with simply structured prompts and arguments?\
\>", "Text",ExpressionUUID->"8920210d-e100-473b-a73d-2d11e3058acf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conversion to Python objects", "Section",ExpressionUUID->"8d9fb9cb-0ceb-4aa1-bb09-692a4d0c9ef5"],

Cell[TextData[{
 StyleBox["Workflow:",
  FontWeight->"Bold"],
 " ",
 "We",
 " ",
 "want",
 " ",
 "to",
 " ",
 "retrieve",
 " ",
 "different",
 " ",
 "physical",
 " ",
 "quantities",
 " ",
 "and",
 " ",
 "make",
 " ",
 "corresponding",
 " ",
 "Python",
 " ",
 "objects.",
 " ",
 "(For",
 " ",
 "further",
 " ",
 "scientific",
 " ",
 "computations",
 " ",
 "with",
 " ",
 "them.)"
}], "Text",ExpressionUUID->"9cee65d8-1848-4a56-955b-405f18dbb5e5"],

Cell[TextData[{
 "The",
 " ",
 "following",
 " ",
 "LLM",
 " ",
 "example",
 " ",
 "function",
 " ",
 "transforms",
 " ",
 "different",
 " ",
 "kinds",
 " ",
 "of",
 " ",
 "physical",
 " ",
 "quantity",
 " ",
 "specs",
 " ",
 "into",
 " ",
 "Python",
 " ",
 "code",
 " ",
 "for",
 " ",
 "the",
 " ",
 "package",
 " ",
 ButtonBox["\"Astropy\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/astropy/astropy"], None}],
 " ",
 ",",
 " ",
 "[APY1]:"
}], "Text",ExpressionUUID->"d52fe82a-4a90-4f36-abce-6a9ffceba518"],

Cell["\<\
pu = llm_example_function(
    {'11,042 m/s' : '11_042 * u.m / u.s\")', 
     '4,380,042 J' : '4_380_042 * u.J\")', 
     '304.342 m/s^2' : '304.342 * u.m / u.s**2'}, 
    e = confPaLM)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289959279006*^9, 3.905289962156829*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"405fa745-04ce-4614-ae22-b01f35eebf57"],

Cell["Here is an example of speed query function:", "Text",ExpressionUUID->"02f67ea3-5b94-4922-8e87-42bca3b8b5b1"],

Cell["\<\
fs = llm_function(lambda a, b: f\"What is the average speed of {a} in the \
units of {b}?\", e = confPaLM)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905289966026678*^9, 3.905289968343892*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"41e941ad-de7a-4e0b-a82e-11dfbc4fabf6"],

Cell["Here is a concrete query:", "Text",ExpressionUUID->"7647a761-3250-4fba-be00-d8990eb4cb49"],

Cell[CellGroupData[{

Cell["\<\
rs1 = fs('rocket leaving Earth', 'meters per second')
rs1\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[7]:=",ExpressionUUID->"2aad1186-b9ca-4f0a-b3e2-3c5c729423ce"],

Cell[BoxData["\<\"11,186 mps\"\>"], "Output",
 CellChangeTimes->{3.905289976690631*^9, 3.905290140802796*^9, 
  3.9052903870190163`*^9, 3.9052907701256866`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"c3abb8b8-ef2b-47e9-a23f-ca76938b1239"]
}, Open  ]],

Cell["\<\
Here we convert the LLM output into Python code for making a unit object:\
\>", "Text",ExpressionUUID->"b4cb8925-e770-40a1-8462-68846bc79556"],

Cell[CellGroupData[{

Cell["\<\
rs2 = pu(rs1)
rs2\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[8]:=",ExpressionUUID->"bfcfe016-618b-4049-8933-a7e353c5edc9"],

Cell[BoxData["\<\"11186 * u.m / u.s\"\>"], "Output",
 CellChangeTimes->{3.90528997675636*^9, 3.905290772506001*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"3dbc1a9b-9897-4ffe-98ca-76bda13f0abe"]
}, Open  ]],

Cell["Here we evaluate the Python code (into an object):", "Text",ExpressionUUID->"090ce670-84c2-40a6-a8bf-844985d61c6c"],

Cell["\<\
import astropy.units as u

exec(\"rs3 = \" + rs2)
rs3\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.9052908112992773`*^9, 
  3.905290846648535*^9}},ExpressionUUID->"738d36e8-47b5-4dad-a853-\
82be019628ed"],

Cell["\<\
Of course, the steps above can be combined into one function. In general, \
though, care should be taken to handle or prevent situations in which \
function inputs and outputs do not agree with each other.\
\>", "Text",ExpressionUUID->"a57abb33-8cbc-42bd-8858-36ac40cc08a4"],

Cell[CellGroupData[{

Cell["Exercise questions", "Subsection",ExpressionUUID->"292ede82-8139-4a77-b836-ec44c04ac7f8"],

Cell["\<\
Can you write a Python function that combines the LLM-functions mentioned \
above?\
\>", "Item",ExpressionUUID->"26bcdf8c-3e03-480b-a7ba-0e30a8f2b773"],

Cell["\<\
What kind of computations involve the discussed unit objects?\
\>", "Item",ExpressionUUID->"a6fa696b-1675-4f08-94dc-46c8878e17ee"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"885dfbd7-9c55-498c-a99b-8fc655ed1786"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Chemical formulas", "Section",ExpressionUUID->"3fa6bf87-5722-435e-a624-bda197045460"],

Cell[TextData[{
 StyleBox["Workflow:",
  FontWeight->"Bold"],
 " ",
 "Assume",
 " ",
 "that",
 " ",
 "we",
 " ",
 "want",
 " ",
 "to:"
}], "Text",ExpressionUUID->"2e811e52-f3f4-4a83-a170-dbfcad08ac02"],

Cell["\<\
Obtain a list of Stoichiometry equations according to some criteria\
\>", "Item",ExpressionUUID->"3f5ab9a6-d129-4742-8687-3a93b2018088"],

Cell["Evaluate the consistency of the equations", "Item",ExpressionUUID->"c715b8e4-af3d-4c4d-874d-6cd0a8b4d4d8"],

Cell["\<\
Find the molecular masses of the components for each equation\
\>", "Item",ExpressionUUID->"6c7d4b1f-4015-48fc-ada0-a5affa3dbc36"],

Cell["Tabulate the formulas and found component molecular masses", "Item",ExpressionUUID->"907b9763-603e-4bf4-9e03-e7075493bb2b"],

Cell["\<\
Here we define LLM functions for retrieving chemical formulas with specified \
species:\
\>", "Text",ExpressionUUID->"a5973ae8-f4ce-438b-ac30-d9e32a0b9a36"],

Cell["\<\
cfn = llm_function( lambda a, b: f\"Give a list of {a} chemical stoichiometry \
formulas that include {b}. Give the only formulas. Put the result in JSON \
format.\", 
                    e = confOpenAI, 
                    form = sub_parser('JSON'))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905290864667444*^9, 3.90529086687188*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"73ab4b8a-1346-4bc0-b429-2bd6b3e0fb59"],

Cell["Here is a query:", "Text",ExpressionUUID->"33cb137a-8373-4869-8eb5-83a6dfa0486e"],

Cell[CellGroupData[{

Cell["\<\
chemRes1 = cfn(3, 'sulfur')
chemRes1\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[12]:=",ExpressionUUID->"e57626d2-0a18-42e4-9d0d-133c738a065c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\\n\\n\"\>", ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"1\"\>", "\[Rule]", "\<\"S + O2 -> SO2\"\>"}], ",", 
     RowBox[{"\<\"2\"\>", "\[Rule]", "\<\"2H2S + 3O2 -> 2H2O + 2SO2\"\>"}], 
     ",", 
     RowBox[{"\<\"3\"\>", "\[Rule]", "\<\"FeS2 + 7O2 -> Fe2O3 + 2SO2\"\>"}]}],
     "\[RightAssociation]"}], ",", "\<\"\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.905290871299582*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"0673be5e-f109-48f2-8661-db0c865e7787"]
}, Open  ]],

Cell["\<\
Let us convince ourselves that we got a list of strings (or not):\
\>", "Text",ExpressionUUID->"87059022-4b7f-4090-bd5f-c1c1573ca33f"],

Cell[CellGroupData[{

Cell["print(deduce_type(chemRes1))", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905290887573381*^9, 3.905290888991634*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"d0686397-c6ed-4dcb-b462-21803e11b39a"],

Cell[BoxData["\<\"Tuple([Atom(<class 'str'>), Assoc(Atom(<class 'str'>), \
Atom(<class 'str'>), 3), Atom(<class 'str'>)])\"\>"], "Print",
 CellChangeTimes->{3.905290889496914*^9},
 CellLabel->
  "During evaluation of \
In[15]:=",ExpressionUUID->"642886ba-e811-4a19-ac1f-e111f617d2a7"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "If",
 " ",
 "the",
 " ",
 "column",
 " ",
 "\"balancing\"",
 " ",
 "shows",
 " ",
 "two",
 " ",
 "different",
 " ",
 "numbers",
 " ",
 "separated",
 " ",
 "by",
 " ",
 "\"=>\"",
 " ",
 "that",
 " ",
 "means",
 " ",
 "the",
 " ",
 "LLM",
 " ",
 "hallucinated",
 " ",
 "an",
 " ",
 "inconsistent",
 " ",
 "chemical",
 " ",
 "reaction",
 " ",
 "equation.",
 " ",
 "(Because",
 " ",
 "the",
 " ",
 "LLM",
 " ",
 "does",
 " ",
 "not",
 " ",
 "know,",
 " ",
 "or",
 " ",
 "disregarded",
 " ",
 "for",
 " ",
 "some",
 " ",
 "reason,",
 " ",
 "the",
 " ",
 ButtonBox["law of conservation of mass",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Conservation_of_mass"], None}],
 " ",
 ".)"
}], "Text",ExpressionUUID->"4524a142-0c1f-4210-97a5-b8e1977a8f4d"],

Cell["Here we define a regex that parses chemical components:", "Text",ExpressionUUID->"a7071b7c-9a9b-45d9-ab1b-ec359bf4f503"],

Cell[CellGroupData[{

Cell["\<\
from chempy import Substance

def chem_component(x):
  try:
    res = Substance.from_formula(x)
    return res.mass
  except:
    return None\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[16]:=",ExpressionUUID->"53c06923-63aa-406d-b8dd-ff854d8c2069"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"x\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   StyleBox[
                   "\"chem_component\"", "Program", LineBreakWithin -> False],
                    ImageSize -> {{1, 500}, Medium}], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"x\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  FrameBox[
                   PaneBox[
                    StyleBox[
                    "\"chem_component\"", "Program", LineBreakWithin -> 
                    False], ImageSize -> {{1, 500}, Large}, ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline], Background -> 
                   RGBColor[0.94, 0.94, 0.94], FrameStyle -> None, 
                   BaselinePosition -> Baseline], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PythonFunction\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Session: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["ExternalSessionObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Active: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["Active"], False],
                     StandardForm], TrackedSymbols :> {
                    ExternalEvaluate`Private`$Links}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"5348976b-c8fd-4ee3-bb87-b38ac3897237\"", 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Epilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Process: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["ProcessObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Parent PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3699", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"antonov\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Path: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Memory:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"198.639616`", "\"MB\"", "megabytes", 
                    "\"Megabytes\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Threads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["22", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Start Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\"Mon 2 Oct 2023 22:59:07\"", 
                    StyleBox[
                    RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}], 
                    RowBox[{"DateObject", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"2023", ",", "10", ",", "2", ",", "22", ",", "59",
                     ",", "7"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]}, "DateObject", Editable -> 
                    False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"System Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0468000000000000013`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.04317`5.", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Real Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"2", "26.`5.", 
                    RowBox[{"\[ThinSpace]", "\"min\""}], 
                    RowBox[{"\[ThinSpace]", "\"s\""}], "minutes,seconds", 
                    RowBox[{"{", 
                    RowBox[{"\"Minutes\"", ",", "\"Seconds\""}], "}"}]}, 
                    "QuantityMixedUnit2"], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    
                    ProcessObject[<|"ManagedProcess" -> True, "UID" -> 0, 
                    "PID" -> 3704, "PPID" -> 3699, "Program" -> "python3.10", 
                    "Path" -> 
                    "/Users/antonov/miniforge3/envs/SciPyCentric/bin/python3.\
10", "User" -> "antonov", "StartTime" -> DateObject[{2023, 10, 2, 22, 59, 7}, 
                    "Instant", "Gregorian", -4.]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Prolog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ReturnType: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionEpilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionProlog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Socket: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["SocketObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}, {
                    
                    RowBox[{
                    TagBox["\"Endpoint: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"tcp://127.0.0.1:51312\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    SocketObject["20a27eb5-9aeb-426d-94d3-00c7533af95c"], 
                    Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"StandardErrorFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"Print", "[", 
                    StyleBox[
                    "#1", "Message", FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], "]"}], "&"}], "SummaryItem"]}]}, {
                    
                    RowBox[{
                    TagBox[
                    "\"StandardOutputFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Print", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"EvaluationCount: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"][
                    "EvaluationCount"], None], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessMemory: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessMemory"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessThreads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessThreads"],
                     UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionTime: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["SessionTime"], 
                    UpdateInterval -> 1], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   ExternalSessionObject[
                   "5348976b-c8fd-4ee3-bb87-b38ac3897237"], Selectable -> 
                   False, Editable -> False, SelectWithContents -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalFunction[<|
   "System" -> "Python", "Type" -> "PythonFunction", "Arguments" -> {"x"}, 
    "Command" -> "chem_component", "IsModule" -> False, "IsClass" -> False, 
    "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> True, 
    "Session" -> 
    ExternalSessionObject["5348976b-c8fd-4ee3-bb87-b38ac3897237"]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905290893325665*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"e8e066bf-ec79-46f4-93a0-8158f12c167a"]
}, Open  ]],

Cell["Here we split strings of the equations:", "Text",ExpressionUUID->"045b3fa7-3f63-43e9-95ba-fbd2187bba34"],

Cell[CellGroupData[{

Cell["\<\
import re

{k: re.split(r\"->|\+\", v) for k, v in chemRes1[1].items()}\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[17]:=",ExpressionUUID->"e53a3716-899f-4ca0-a0fe-0dcfd423e1b5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"1\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"S + O2 \"\>", ",", "\<\" SO2\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"2\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"2H2S + 3O2 \"\>", ",", "\<\" 2H2O + 2SO2\"\>"}], "}"}]}], 
   ",", 
   RowBox[{"\<\"3\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"FeS2 + 7O2 \"\>", ",", "\<\" Fe2O3 + 2SO2\"\>"}], "}"}]}]}],
   "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.90529089717383*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"024607d1-db59-4174-a501-7ab63f271ae4"]
}, Open  ]],

Cell["\<\
Here for each formula we extract the chemical components and find the \
corresponding molecular masses:\
\>", "Text",ExpressionUUID->"6d935e8a-a5eb-48ca-9cde-2ebad5f4a2b8"],

Cell[CellGroupData[{

Cell["\<\
{k: [ chem_component(x) for x in re.split(r\"\\->|\+\", v)] for k, v in \
chemRes1[1].items()}\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[18]:=",ExpressionUUID->"f50ec47c-023e-4378-8fc2-64187e9bf6ee"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"1\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Null", ",", "64.058`"}], "}"}]}], ",", 
   RowBox[{"\<\"2\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"\<\"3\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Null", ",", "Null"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9052908994742527`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"158470b0-4b4f-4597-8ff9-b3c655573fa4"]
}, Open  ]],

Cell["\<\
Since parsing in the statement above is not able to find chemical terms (i.e. \
`factor * <formula>`) let us write a dedicated function that givens records \
for all chemical terms in a chemical expression strings:\
\>", "Text",ExpressionUUID->"f5353cec-35f4-463a-b788-281b45e86785"],

Cell[CellGroupData[{

Cell["\<\
def chem_masses_records(chemExpr):
    chemMasses = []
    for s in re.finditer(r'(\\d*)([A-Z]\\S*)', chemExpr):
        term = ''.join(s.groups())
        factor = 1
        if len(s.groups()[0]) > 0:
            factor = eval(s.groups()[0])
        mass = chem_component(s.groups()[1])
        record = {\"term\" : term,  \"factor\" : factor, \"formula\" : \
s.groups()[1]}
        if mass is None:
            chemMasses = chemMasses + [record | {\"mass\" : None},]
        else:
            chemMasses = chemMasses + [record | {\"mass\" : factor * mass}, ] \
  
            
    return chemMasses\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[19]:=",ExpressionUUID->"051cd3c7-e412-46ae-9d28-d387322805c7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"chemExpr\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   StyleBox[
                   "\"chem_masses_records\"", "Program", LineBreakWithin -> 
                    False], ImageSize -> {{1, 500}, Medium}], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"chemExpr\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  FrameBox[
                   PaneBox[
                    StyleBox[
                    "\"chem_masses_records\"", "Program", LineBreakWithin -> 
                    False], ImageSize -> {{1, 500}, Large}, ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline], Background -> 
                   RGBColor[0.94, 0.94, 0.94], FrameStyle -> None, 
                   BaselinePosition -> Baseline], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PythonFunction\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Session: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["ExternalSessionObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Active: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["Active"], False],
                     StandardForm], TrackedSymbols :> {
                    ExternalEvaluate`Private`$Links}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"5348976b-c8fd-4ee3-bb87-b38ac3897237\"", 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Epilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Process: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["ProcessObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Parent PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3699", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"antonov\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Path: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Memory:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"198.803456`", "\"MB\"", "megabytes", 
                    "\"Megabytes\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Threads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["22", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Start Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\"Mon 2 Oct 2023 22:59:07\"", 
                    StyleBox[
                    RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}], 
                    RowBox[{"DateObject", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"2023", ",", "10", ",", "2", ",", "22", ",", "59",
                     ",", "7"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]}, "DateObject", Editable -> 
                    False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"System Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0468239999999999976`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0433110000000000023`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Real Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"2", "33.`5.", 
                    RowBox[{"\[ThinSpace]", "\"min\""}], 
                    RowBox[{"\[ThinSpace]", "\"s\""}], "minutes,seconds", 
                    RowBox[{"{", 
                    RowBox[{"\"Minutes\"", ",", "\"Seconds\""}], "}"}]}, 
                    "QuantityMixedUnit2"], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    
                    ProcessObject[<|"ManagedProcess" -> True, "UID" -> 0, 
                    "PID" -> 3704, "PPID" -> 3699, "Program" -> "python3.10", 
                    "Path" -> 
                    "/Users/antonov/miniforge3/envs/SciPyCentric/bin/python3.\
10", "User" -> "antonov", "StartTime" -> DateObject[{2023, 10, 2, 22, 59, 7}, 
                    "Instant", "Gregorian", -4.]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Prolog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ReturnType: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionEpilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionProlog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Socket: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["SocketObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])]}, 
                    PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}, {
                    
                    RowBox[{
                    TagBox["\"Endpoint: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"tcp://127.0.0.1:51312\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    SocketObject["20a27eb5-9aeb-426d-94d3-00c7533af95c"], 
                    Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"StandardErrorFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"Print", "[", 
                    StyleBox[
                    "#1", "Message", FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], "]"}], "&"}], "SummaryItem"]}]}, {
                    
                    RowBox[{
                    TagBox[
                    "\"StandardOutputFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Print", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"EvaluationCount: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"][
                    "EvaluationCount"], None], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessMemory: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessMemory"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessThreads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessThreads"],
                     UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionTime: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["SessionTime"], 
                    UpdateInterval -> 1], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   ExternalSessionObject[
                   "5348976b-c8fd-4ee3-bb87-b38ac3897237"], Selectable -> 
                   False, Editable -> False, SelectWithContents -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalFunction[<|
   "System" -> "Python", "Type" -> "PythonFunction", 
    "Arguments" -> {"chemExpr"}, "Command" -> "chem_masses_records", 
    "IsModule" -> False, "IsClass" -> False, "IsFunction" -> True, "IsMethod" -> 
    False, "IsCallable" -> True, "Session" -> 
    ExternalSessionObject["5348976b-c8fd-4ee3-bb87-b38ac3897237"]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905290900547275*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"191a92f5-38c9-45ea-943f-7cf771843cf0"]
}, Open  ]],

Cell["Here is an example application:", "Text",ExpressionUUID->"19d06836-0740-405f-8f45-b77f938a201d"],

Cell[CellGroupData[{

Cell["chem_masses_records(\"2SO2\")", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[20]:=",ExpressionUUID->"b88a52d0-e38f-429f-8652-4e8a9d94a7ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"\<\"term\"\>", "\[Rule]", "\<\"2SO2\"\>"}], ",", 
    RowBox[{"\<\"factor\"\>", "\[Rule]", "2"}], ",", 
    RowBox[{"\<\"formula\"\>", "\[Rule]", "\<\"SO2\"\>"}], ",", 
    RowBox[{"\<\"mass\"\>", "\[Rule]", "128.116`"}]}], 
   "\[RightAssociation]"}], "}"}]], "Output",
 CellChangeTimes->{3.905290903860949*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"87ee2290-e282-4fde-9bc6-048d77076cea"]
}, Open  ]],

Cell["\<\
Here for each LLM generated stoichiometry formula we find the masses of the \
components of Left Hand Side (LHS) and Right Hand Side (RHS):\
\>", "Text",ExpressionUUID->"f766b770-411f-46a9-9ecc-f53233e2af20"],

Cell[CellGroupData[{

Cell["\<\
pres = [ [ {\"eq\" : v, \"side\": \"LHS\"} | rec for rec in \
chem_masses_records(v.split(\"->\")[0])] for k, v in chemRes1[1].items()]
pres2 = [item for sl in pres for item in sl]
pres = [ [ {\"eq\" : v, \"side\": \"RHS\"} | rec for rec in \
chem_masses_records(v.split(\"->\")[1])] for k, v in chemRes1[1].items()]
pres3 = [item for sl in pres for item in sl]
pres4 = pres2 + pres3
dfEqs = pandas.DataFrame(pres4)
dfEqs = dfEqs.sort_values( [\"eq\", \"side\"] )
dfEqs\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[21]:=",ExpressionUUID->"dfdc889f-74c4-466b-bfa5-1044f5211663"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      2 -> <|"eq" -> "2H2S + 3O2 -> 2H2O + 2SO2", "side" -> "LHS", "term" -> 
         "2H2S", "factor" -> 2, "formula" -> "H2S", "mass" -> 68.152|>, 
       3 -> <|"eq" -> "2H2S + 3O2 -> 2H2O + 2SO2", "side" -> "LHS", "term" -> 
         "3O2", "factor" -> 3, "formula" -> "O2", "mass" -> 95.994|>, 
       7 -> <|"eq" -> "2H2S + 3O2 -> 2H2O + 2SO2", "side" -> "RHS", "term" -> 
         "2H2O", "factor" -> 2, "formula" -> "H2O", "mass" -> 36.03|>, 
       8 -> <|"eq" -> "2H2S + 3O2 -> 2H2O + 2SO2", "side" -> "RHS", "term" -> 
         "2SO2", "factor" -> 2, "formula" -> "SO2", "mass" -> 128.116|>, 
       4 -> <|"eq" -> "FeS2 + 7O2 -> Fe2O3 + 2SO2", "side" -> "LHS", "term" -> 
         "FeS2", "factor" -> 1, "formula" -> "FeS2", "mass" -> 119.965|>, 
       5 -> <|"eq" -> "FeS2 + 7O2 -> Fe2O3 + 2SO2", "side" -> "LHS", "term" -> 
         "7O2", "factor" -> 7, "formula" -> "O2", "mass" -> 
         223.98600000000002`|>, 
       9 -> <|"eq" -> "FeS2 + 7O2 -> Fe2O3 + 2SO2", "side" -> "RHS", "term" -> 
         "Fe2O3", "factor" -> 1, "formula" -> "Fe2O3", "mass" -> 159.687|>, 
       10 -> <|"eq" -> "FeS2 + 7O2 -> Fe2O3 + 2SO2", "side" -> "RHS", "term" -> 
         "2SO2", "factor" -> 2, "formula" -> "SO2", "mass" -> 128.116|>, 
       0 -> <|"eq" -> "S + O2 -> SO2", "side" -> "LHS", "term" -> "S", 
         "factor" -> 1, "formula" -> "S", "mass" -> 32.06|>, 
       1 -> <|"eq" -> "S + O2 -> SO2", "side" -> "LHS", "term" -> "O2", 
         "factor" -> 1, "formula" -> "O2", "mass" -> 31.998|>, 
       6 -> <|"eq" -> "S + O2 -> SO2", "side" -> "RHS", "term" -> "SO2", 
         "factor" -> 1, "formula" -> "SO2", "mass" -> 64.058|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "eq"} -> 
        1, {All, "side"} -> 1, {All, "term"} -> 1, {All, "factor"} -> 
        1, {All, "formula"} -> 1, {All, "mass"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "eq" -> TypeSystem`PackageScope`AtomShape[273.], "side" -> 
             TypeSystem`PackageScope`AtomShape[31.5], "term" -> 
             TypeSystem`PackageScope`AtomShape[56.00000000000001], "factor" -> 
             TypeSystem`PackageScope`AtomShape[34], "formula" -> 
             TypeSystem`PackageScope`AtomShape[56.00000000000001], "mass" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 6, {All}]]], 11, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"eq", "side", "term", "factor", "formula", "mass"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "2H2S + 3O2 -> 2H2O + 2SO2", "FeS2 + 7O2 -> Fe2O3 + 2SO2", 
           "S + O2 -> SO2"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["LHS", "RHS"]], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 11], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[0]} -> 1, {All, "eq"} -> 
        1, {All, "side"} -> 1, {All, "term"} -> 1, {All, "factor"} -> 
        1, {All, "formula"} -> 1, {All, "mass"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "eq" -> TypeSystem`PackageScope`AtomShape[273.], "side" -> 
             TypeSystem`PackageScope`AtomShape[31.5], "term" -> 
             TypeSystem`PackageScope`AtomShape[56.00000000000001], "factor" -> 
             TypeSystem`PackageScope`AtomShape[34], "formula" -> 
             TypeSystem`PackageScope`AtomShape[56.00000000000001], "mass" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 6, {All}]]], 11, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Struct[{"eq", "side", "term", "factor", "formula", "mass"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "2H2S + 3O2 -> 2H2O + 2SO2", "FeS2 + 7O2 -> Fe2O3 + 2SO2", 
           "S + O2 -> SO2"]], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["LHS", "RHS"]], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Real]}], 11], "Path" -> {}, "DisplayedRowCount" -> 
     11, "DisplayedColumnCount" -> 6, "DataRowCount" -> 11, "DataColumnCount" -> 
     6, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["eq", 
                  Style[
                  "eq", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "eq"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "eq"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["side", 
                  Style[
                  "side", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "side"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "side"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["term", 
                  Style[
                  "term", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "term"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "term"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["factor", 
                  Style[
                  "factor", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "factor"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "factor"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["formula", 
                  Style[
                  "formula", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "formula"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "formula"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["mass", 
                  Style[
                  "mass", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "mass"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "mass"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["2"], 
                  Style[
                   RawBoxes["2"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[2]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2H2S + 3O2 -> 2H2O + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["LHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["2H2S", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["H2S", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["68.152"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[2], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["3"], 
                  Style[
                   RawBoxes["3"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[3]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2H2S + 3O2 -> 2H2O + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["LHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["3O2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["O2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["95.994"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[3], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["7"], 
                  Style[
                   RawBoxes["7"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[7]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2H2S + 3O2 -> 2H2O + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["RHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["2H2O", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["H2O", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["36.03"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[7], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["8"], 
                  Style[
                   RawBoxes["8"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[8]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2H2S + 3O2 -> 2H2O + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["RHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["128.116"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[8], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["4"], 
                  Style[
                   RawBoxes["4"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[4]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["FeS2 + 7O2 -> Fe2O3 + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["LHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FeS2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["FeS2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["119.965"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[4], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["5"], 
                  Style[
                   RawBoxes["5"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[5]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["FeS2 + 7O2 -> Fe2O3 + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["LHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["7O2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["O2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["223.986"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[5], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["9"], 
                  Style[
                   RawBoxes["9"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[9]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["FeS2 + 7O2 -> Fe2O3 + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["RHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Fe2O3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Fe2O3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["159.687"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[9], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["10"], 
                  Style[
                   RawBoxes["10"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[10]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["FeS2 + 7O2 -> Fe2O3 + 2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["RHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["2SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["128.116"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[10], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["S + O2 -> SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["LHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["S", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["S", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["32.06"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["1"], 
                  Style[
                   RawBoxes["1"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[1]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["S + O2 -> SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["LHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["O2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["O2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["31.998"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[1], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["6"], 
                  Style[
                   RawBoxes["6"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[6]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["S + O2 -> SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["eq"]}, "Item", False], "Mouse"], 
              ImageSize -> {{273., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["RHS", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["side"]}, "Item", False], "Mouse"], 
              ImageSize -> {{31.5, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["term"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["factor"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["SO2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["formula"]}, "Item", False], "Mouse"], 
              ImageSize -> {{56.00000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["64.058"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[6], 
                 Key["mass"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{604., {168.634033203125, 174.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{604., {168.634033203125, 174.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905290904752522*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"62fb86c5-6578-46f6-aa69-bc7dcdaf67eb"]
}, Open  ]],

Cell["\<\
Here we can see are all of the formulas (hallucinated by the LLMs) balanced:\
\>", "Text",ExpressionUUID->"2312a1b7-74d9-4f85-bb79-67aac088e2d1"],

Cell[CellGroupData[{

Cell["dfEqs.groupby([\"eq\", \"side\"])[\"mass\"].agg(\"sum\")", \
"ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[22]:=",ExpressionUUID->"5f2b9716-f89b-4257-b6be-b98718ae152c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "2H2S + 3O2 -> 2H2O + 2SO2" -> <|
        "LHS" -> 164.14600000000002`, "RHS" -> 164.14600000000002`|>, 
       "FeS2 + 7O2 -> Fe2O3 + 2SO2" -> <|"LHS" -> 343.951, "RHS" -> 287.803|>,
        "S + O2 -> SO2" -> <|"LHS" -> 64.058, "RHS" -> 64.058|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 1, {All, "LHS"} -> 
        1, {All, "RHS"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "LHS" -> TypeSystem`PackageScope`AtomShape[60], "RHS" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 2, {All}]]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"LHS", "RHS"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 1, {All, "LHS"} -> 
        1, {All, "RHS"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[291.20000000000005`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "LHS" -> TypeSystem`PackageScope`AtomShape[60], "RHS" -> 
             TypeSystem`PackageScope`AtomShape[60]|>], 
           DirectedInfinity[1], 2, {All}]]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"LHS", "RHS"}, {
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 3], "Path" -> {}, "DisplayedRowCount" -> 3, 
     "DisplayedColumnCount" -> 2, "DataRowCount" -> 3, "DataColumnCount" -> 2,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["LHS", 
                  Style[
                  "LHS", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "LHS"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "LHS"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["RHS", 
                  Style[
                  "RHS", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "RHS"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "RHS"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["2H2S + 3O2 -> 2H2O + 2SO2", 
                  Style[
                  "2H2S + 3O2 -> 2H2O + 2SO2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["2H2S + 3O2 -> 2H2O + 2SO2"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2H2S + 3O2 -> 2H2O + 2SO2"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["164.146"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2H2S + 3O2 -> 2H2O + 2SO2"], 
                 Key["LHS"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["164.146"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2H2S + 3O2 -> 2H2O + 2SO2"], 
                 Key["RHS"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["FeS2 + 7O2 -> Fe2O3 + 2SO2", 
                  Style[
                  "FeS2 + 7O2 -> Fe2O3 + 2SO2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["FeS2 + 7O2 -> Fe2O3 + 2SO2"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["FeS2 + 7O2 -> Fe2O3 + 2SO2"]}, "RowHeader", False], 
               "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["343.951"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["FeS2 + 7O2 -> Fe2O3 + 2SO2"], 
                 Key["LHS"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["287.803"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["FeS2 + 7O2 -> Fe2O3 + 2SO2"], 
                 Key["RHS"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["S + O2 -> SO2", 
                  Style[
                  "S + O2 -> SO2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["S + O2 -> SO2"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["S + O2 -> SO2"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{291.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["64.058"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["S + O2 -> SO2"], 
                 Key["LHS"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["64.058"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["S + O2 -> SO2"], 
                 Key["RHS"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{438., {60.634033203125, 66.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{438., {60.634033203125, 66.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.905290907167182*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e46c916f-daed-4828-8133-8f8f769aa349"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Alternative workflow and solution", "Subsection",ExpressionUUID->"f82b5ef2-3e67-46b1-83b4-6c579777fd03"],

Cell["\<\
Assume that we only wanted to extract the chemical components together with \
their molecular masses from the LLM generated equations.\
\>", "Text",ExpressionUUID->"e863d444-3012-4399-a92d-48b09f07d0ed"],

Cell["Then we:", "Text",ExpressionUUID->"708a0ae4-f252-434b-96e9-735b75df4fb8"],

Cell[TextData[{
 "Use",
 " ",
 "the",
 " ",
 "function",
 " ",
 "like",
 " ",
 "the",
 " ",
 "function",
 " ",
 StyleBox["chem_component", "Program"],
 " ",
 "defined",
 " ",
 "above",
 " ",
 "as",
 " ",
 "a",
 " ",
 "sub-parser",
 " ",
 "in",
 " ",
 "the",
 " ",
 "retrieval",
 " ",
 "LLM-function"
}], "Item",ExpressionUUID->"991a23db-2dd2-40f8-b522-28255e36d063"],

Cell["\<\
Pick tuples (or other related objects) from the LLM function result\
\>", "Item",ExpressionUUID->"c975b8d1-e49d-4890-a4cd-7a35e3903210"],

Cell["Here is a sub-parser definition:", "Text",ExpressionUUID->"9113342c-b375-4ce8-8310-cac0ce2181cd"],

Cell[CellGroupData[{

Cell["\<\
def chem_component2(x):
    chemComps = []
    for s in re.finditer(r'([A-Z]\\w*)', x):
        comp = s.groups()[0]
        res = chem_component(comp)
        if res is not None:
            chemComps = chemComps +[comp,]
    return chemComps\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[27]:=",ExpressionUUID->"530147b5-abcf-43db-81b7-f89c64ad7e40"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"x\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   StyleBox[
                   "\"chem_component2\"", "Program", LineBreakWithin -> 
                    False], ImageSize -> {{1, 500}, Medium}], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Arguments: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "\"x\"", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Command: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  FrameBox[
                   PaneBox[
                    StyleBox[
                    "\"chem_component2\"", "Program", LineBreakWithin -> 
                    False], ImageSize -> {{1, 500}, Large}, ContentPadding -> 
                    False, FrameMargins -> 0, StripOnInput -> True, 
                    BaselinePosition -> Baseline], Background -> 
                   RGBColor[0.94, 0.94, 0.94], FrameStyle -> None, 
                   BaselinePosition -> Baseline], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PythonFunction\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsModule: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsClass: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsMethod: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["False", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"IsCallable: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["True", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Session: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["ExternalSessionObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.05], {
                    FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.7334}, {7.0998, 17.7334}, {6.7168,
                     17.342399999999998`}, {6.7168, 16.8624}, {6.7168, 
                    16.3854}, {7.0998, 15.997399999999999`}, {
                    7.5718000000000005`, 15.997399999999999`}, {
                    8.043800000000001, 15.997399999999999`}, {8.4268, 
                    16.3854}, {8.4268, 16.8624}, {8.4268, 
                    17.342399999999998`}, {8.043800000000001, 17.7334}, {
                    7.5718000000000005`, 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                    "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                    11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                    2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                    12.401800000000001`, 2.369399999999999}, {
                    12.872800000000002`, 2.369399999999999}, {13.2568, 
                    2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 
                    3.7164}, {12.872800000000002`, 4.1044}, {
                    12.401800000000001`, 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}}, {{{
                    7.5718000000000005`, 17.6836}, {8.014800000000001, 
                    17.6836}, {8.3778, 17.3156}, {8.3778, 
                    16.862599999999997`}, {8.3778, 16.4116}, {
                    8.014800000000001, 16.046599999999998`}, {
                    7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                    16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                    6.7658000000000005`, 16.862599999999997`}, {
                    6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                    7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                    "]}]}, {
                    FaceForm[{
                    RGBColor[0.976, 0.8430000000000001, 0.353], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}}}, {{{12.4014, 4.0552}, {
                    12.846400000000001`, 4.0552}, {13.2074, 3.6902}, {13.2074,
                     3.2392000000000003`}, {13.2074, 2.7862}, {
                    12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                    11.958400000000001`, 2.4182}, {11.595400000000001`, 
                    2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                    11.595400000000001`, 3.6902}, {11.958400000000001`, 
                    4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                    "]}]}}, {
                    ImageSize -> Dynamic[{
                    Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}], AspectRatio -> 
                    Automatic, ImageSize -> {20., 20.}, 
                    PlotRange -> {{0., 20.}, {0., 20.}}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"System: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Python\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"3.10.2\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"DefaultPythonSession\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Active: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["Active"], False],
                     StandardForm], TrackedSymbols :> {
                    ExternalEvaluate`Private`$Links}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Target: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"5348976b-c8fd-4ee3-bb87-b38ac3897237\"", 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Epilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Process: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["ProcessObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3704", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Parent PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3699", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"antonov\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Path: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/bin/\
python3.10\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Memory:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"200.163328`", "\"MB\"", "megabytes", 
                    "\"Megabytes\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Threads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["22", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Start Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\"Mon 2 Oct 2023 22:59:07\"", 
                    StyleBox[
                    RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}], 
                    RowBox[{"DateObject", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"2023", ",", "10", ",", "2", ",", "22", ",", "59",
                     ",", "7"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "4.`"}]}], "]"}]}, "DateObject", Editable -> 
                    False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"System Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0469079999999999983`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0439750000000000002`5.", "\"s\"", 
                    "seconds", "\"Seconds\""}, "Quantity", SyntaxForm -> Mod],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Real Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{"3", "4.`5.", 
                    RowBox[{"\[ThinSpace]", "\"min\""}], 
                    RowBox[{"\[ThinSpace]", "\"s\""}], "minutes,seconds", 
                    RowBox[{"{", 
                    RowBox[{"\"Minutes\"", ",", "\"Seconds\""}], "}"}]}, 
                    "QuantityMixedUnit2"], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    
                    ProcessObject[<|"ManagedProcess" -> True, "UID" -> 0, 
                    "PID" -> 3704, "PPID" -> 3699, "Program" -> "python3.10", 
                    "Path" -> 
                    "/Users/antonov/miniforge3/envs/SciPyCentric/bin/python3.\
10", "User" -> "antonov", "StartTime" -> DateObject[{2023, 10, 2, 22, 59, 7}, 
                    "Instant", "Gregorian", -4.]|>], Selectable -> False, 
                    Editable -> False, SelectWithContents -> True], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Prolog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ReturnType: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionEpilog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionProlog: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Automatic", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Socket: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    InterpretationBox[
                    RowBox[{
                    TagBox["SocketObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{Typeset`open$$ = False, 
                    Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}], 
                    True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["51312", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"20a27eb5-9aeb-426d-94d3-00c7533af95c\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}, {
                    
                    RowBox[{
                    TagBox["\"Endpoint: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"tcp://127.0.0.1:51312\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Automatic}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {ShowStringCharacters -> False, NumberMarks -> 
                    False, PrintPrecision -> 3, ShowSyntaxStyles -> False}]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}, 
                    "Rows" -> {{Top}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                    SocketObject["20a27eb5-9aeb-426d-94d3-00c7533af95c"], 
                    Selectable -> False, Editable -> False, 
                    SelectWithContents -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"StandardErrorFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{
                    RowBox[{"Print", "[", 
                    StyleBox[
                    "#1", "Message", FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], "]"}], "&"}], "SummaryItem"]}]}, {
                    
                    RowBox[{
                    TagBox[
                    "\"StandardOutputFunction: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["Print", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"EvaluationCount: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"][
                    "EvaluationCount"], None], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessMemory: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessMemory"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"ProcessThreads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["ProcessThreads"],
                     UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"SessionTime: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237", "Exists"]], 
                    Refresh[
                    ExternalSessionObject[
                    "5348976b-c8fd-4ee3-bb87-b38ac3897237"]["SessionTime"], 
                    UpdateInterval -> 1], 
                    Missing["NotAvailable"]], StandardForm], 
                    TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   ExternalSessionObject[
                   "5348976b-c8fd-4ee3-bb87-b38ac3897237"], Selectable -> 
                   False, Editable -> False, SelectWithContents -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalFunction[<|
   "System" -> "Python", "Type" -> "PythonFunction", "Arguments" -> {"x"}, 
    "Command" -> "chem_component2", "IsModule" -> False, "IsClass" -> False, 
    "IsFunction" -> True, "IsMethod" -> False, "IsCallable" -> True, 
    "Session" -> 
    ExternalSessionObject["5348976b-c8fd-4ee3-bb87-b38ac3897237"]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.9052909209344053`*^9, 3.905290931987282*^9}},
 CellLabel->"Out[27]=",ExpressionUUID->"747531f7-a90d-4871-ae19-c8ae3ba2c11e"]
}, Open  ]],

Cell["Here is the LLM function:", "Text",ExpressionUUID->"b2e30465-cd96-4d26-9f1d-19fe08360704"],

Cell["\<\
cfnp = llm_function( lambda a, b: f\"Give {a} chemical stoichiometry formulas \
that includes {b}.\", llm_evaluator = confOpenAI, form = \
sub_parser(chem_component2))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.9052909251501017`*^9, 3.905290927399362*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"e986937b-8899-4b0c-8c59-3ef7a8aa8719"],

Cell["Here is an invocation:", "Text",ExpressionUUID->"01ecd56b-5858-4a23-be36-36c0d67e5412"],

Cell[CellGroupData[{

Cell["\<\
chemRes2 = cfnp(4, 'sulfur and hydrogen')
chemRes2\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[29]:=",ExpressionUUID->"40d75255-bfef-41e4-986f-d88671be7fb4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Can't pickle <function chem_component2 at 0x134631ab0>: \
attribute lookup chem_component2 on __main__ failed\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Can't pickle <function chem_component2 at 0x134631ab0>: \
attribute lookup chem_component2 on __main__ failed\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"PicklingError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"PicklingError\"", "\" \"", 
                    "\"Can't pickle <function chem_component2 at \
0x134631ab0>: attribute lookup chem_component2 on __main__ failed\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"PicklingError\"", "\" \"", 
                    "\"Can't pickle <function chem_component2 at \
0x134631ab0>: attribute lookup chem_component2 on __main__ failed\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  16.  \""}, {"\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      __traceback_hidden_variables__ = True\""}, {
                    "\"  21.  \""}, {"\"  22.      try:\""}, {
                    ItemBox[
                    "\"  23.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  24.      except Exception as export_exception:\""}, {
                    "\"  25.          try:\""}, {
                    "\"  26.              try:\""}, {"\"  27.  \""}, {
                    "\"  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  29.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 130.  \""}, {"\" 131.  \""}, {
                    "\" 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):\""}, {"\" 133.  \""}, {
                    "\" 134.      __traceback_hidden_variables__ = True\""}, {
                    "\" 135.  \""}, {
                    "\" 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\""}, {
                    ItemBox[
                    "\" 137.      result = evaluate_message(**message)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 138.  \""}, {
                    "\" 139.      sys.stdout.flush()\""}, {
                    "\" 140.      return result\""}, {"\" 141.  \""}, {
                    "\" 142.  \""}, {
                    "\" 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{" 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"evaluate_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"evaluate_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):\""}, {"\" 112.  \""}, {
                    "\" 113.      __traceback_hidden_variables__ = True\""}, {
                    "\" 114.  \""}, {"\" 115.      result = None\""}, {
                    "\" 116.  \""}, {
                    "\" 117.      if isinstance(input, \
six.string_types):\""}, {
                    ItemBox[
                    "\" 118.          result = execute_from_string(input, \
**opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 119.  \""}, {
                    "\" 120.      if isinstance(args, (list, tuple)):\""}, {
                    "\" 121.          # then we have a function call to \
do\""}, {"\" 122.          # first get the function object we need to \
call\""}, {"\" 123.          result = result(*args)\""}, {"\" 124.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "evaluate_message"}], 
                    
                    Column[{
                    
                    Column[{
                    " 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 112.  ", 
                    " 113.      __traceback_hidden_variables__ = True", 
                    " 114.  ", " 115.      result = None", " 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    Item[
                    " 118.          result = execute_from_string(input, \
**opts)", Background -> LightYellow], " 119.  ", 
                    " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", " 123.          result = result(*args)", " 124.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"execute_from_string\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"execute_from_string\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  81.  \""}, {
                    "\"  82.      last_expr = last(expressions)\""}, {
                    "\"  83.  \""}, {
                    "\"  84.      if isinstance(last_expr, ast.Expr):\""}, {
                    "\"  85.          result = expressions.pop(-1)\""}, {
                    "\"  86.  \""}, {"\"  87.      if expressions:\""}, {
                    ItemBox[
                    "\"  88.          exec(compile(Module(expressions), \
\\\"\\\", \\\"exec\\\"), env)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\"  89.  \""}, {
                    "\"  90.      if result:\""}, {
                    "\"  91.          return \
eval(compile(ast.Expression(result.value), \\\"\\\", \\\"eval\\\"), env)\""}, \
{"\"  92.  \""}, {
                    "\"  93.      elif isinstance(last_expr, \
(ast.FunctionDef, ast.ClassDef)):\""}, {
                    "\"  94.          return env[last_expr.name]\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"code\"", 
                    "\"chemRes2 = cfnp(4, 'sulfur and \
hydrogen')\\nchemRes2\""}, {"\"globals\"", "\"{}\""}, {"\"opts\"", 
                    "\"{'constants': {}}\""}, {"\"result\"", 
                    "\"<ast.Expr object at 0x134636980>\""}, {
                    "\"expressions\"", 
                    "\"[<ast.Assign object at 0x134636e90>]\""}, {
                    "\"last_expr\"", "\"<ast.Expr object at 0x134636980>\""}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"code", 
                    "chemRes2 = cfnp(4, 'sulfur and hydrogen')\nchemRes2"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x134636980>"}, {
                    "expressions", "[<ast.Assign object at 0x134636e90>]"}, {
                    "last_expr", "<ast.Expr object at 0x134636980>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "execute_from_string"}], 
                    Column[{
                    
                    Column[{"  81.  ", 
                    "  82.      last_expr = last(expressions)", "  83.  ", 
                    "  84.      if isinstance(last_expr, ast.Expr):", 
                    "  85.          result = expressions.pop(-1)", "  86.  ", 
                    "  87.      if expressions:", 
                    Item[
                    "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                    "  90.      if result:", 
                    "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                    "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"code", 
                    "chemRes2 = cfnp(4, 'sulfur and hydrogen')\nchemRes2"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x134636980>"}, {
                    "expressions", "[<ast.Assign object at 0x134636e90>]"}, {
                    "last_expr", "<ast.Expr object at 0x134636980>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    "\"   1.  chemRes2 = cfnp(4, 'sulfur and hydrogen')\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\"   2.  chemRes2\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"Configuration\"", 
                    "\"<class \
'LLMFunctionObjects.Configuration.Configuration'>\""}, {"\"SubParser\"", 
                    "\"<class 'LLMFunctionObjects.SubParser.SubParser'>\""}, {
                    "\"Evaluator\"", 
                    "\"<class 'LLMFunctionObjects.Evaluator.Evaluator'>\""}, {
                    "\"EvaluatorChat\"", 
                    "\"<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>\""}, {
                    "\"EvaluatorChatGPT\"", 
                    "\"<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>\""}, {
                    "\"EvaluatorChatPaLM\"", 
                    "\"<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>\""}, {
                    "\"Functor\"", 
                    "\"<class 'LLMFunctionObjects.Functor.Functor'>\""}, {
                    "\"Chat\"", 
                    "\"<class 'LLMFunctionObjects.Chat.Chat'>\""}, {
                    "\"LLMFunctions\"", 
                    "\"<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>\""}, {"\"llm_configuration\"", 
                    "\"<function llm_configuration at 0x104799990>\""}, {
                    "\"llm_evaluator\"", 
                    "\"<function llm_evaluator at 0x104799a20>\""}, {
                    "\"llm_example_function\"", 
                    "\"<function llm_example_function at 0x104799b40>\""}, {
                    "\"llm_function\"", 
                    "\"<function llm_function at 0x104799ab0>\""}, {
                    "\"llm_synthesize\"", 
                    "\"<function llm_synthesize at 0x104799bd0>\""}, {
                    "\"llm_chat\"", 
                    "\"<function llm_chat at 0x104799c60>\""}, {
                    "\"sub_parser\"", 
                    "\"<function sub_parser at 0x101dc00d0>\""}, {
                    "\"exact_parser\"", 
                    "\"<function exact_parser at 0x101dc0160>\""}, {
                    "\"catch_by_pattern\"", 
                    "\"<function catch_by_pattern at 0x101d53400>\""}, {
                    "\"extract_json_objects\"", 
                    "\"<function extract_json_objects at 0x101d53880>\""}, {
                    "\"jsonify_text\"", 
                    "\"<function jsonify_text at 0x101dc0040>\""}, {
                    "\"numify_text\"", 
                    "\"<function numify_text at 0x101d51cf0>\""}, {
                    "\"Predicates\"", 
                    "\"<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>\""}, {"\"TypeClasses\"", 
                    "\"<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>\""}, {"\"Examiner\"", 
                    "\"<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>\""}, {"\"TypeSystem\"", 
                    "\"<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>\""}, {"\"deduce_type\"", 
                    "\"<function deduce_type at 0x104799ea0>\""}, {
                    "\"is_reshapable\"", 
                    "\"<function is_reshapable at 0x104799e10>\""}, {
                    "\"record_types\"", 
                    "\"<function record_types at 0x104799f30>\""}, {
                    "\"DataTypeSystem\"", 
                    "\"<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>\""}, {"\"json\"", 
                    "\"<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
\""}, {"\"pandas\"", 
                    "\"<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>\""}, {"\"re\"", 
                    "\"<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>\""}, {
                    "\"os\"", 
                    "\"<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>\""}, {
                    "\"samples\"", "\"[]\""}, {"\"home\"", 
                    "\"/Users/antonov\""}, {"\"myfile\"", 
                    "\"<_io.TextIOWrapper name='/Users/antonov/.zshrc' \
mode='r' encoding='UTF-8'>\""}, {"\"line\"", 
                    "\"if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\\n\""}, {
                    "\"match\"", "\"None\""}, {"\"openai_api_key\"", 
                    "\"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\""}\
, {"\"palm_api_key\"", "\"AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI\""}, {
                    "\"confOpenAI\"", 
                    "\"{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}\""}, {"\"confPaLM\"", 
                    "\"{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}\""}, {"\"io\"", 
                    "\"<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>\""}, {
                    "\"Image\"", 
                    "\"<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>\""}, {"\"plt\"", 
                    "\"<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>\""}, {"\"show_plt\"", 
                    "\"<function show_plt at 0x11de43250>\""}, {"\"pu\"", 
                    "\"{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}\""}, {"\"fs\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}\""}, {
                    "\"rs1\"", "\"11,186 mps\""}, {"\"rs2\"", 
                    "\"11186 * u.m / u.s\""}, {"\"u\"", 
                    "\"<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>\""}, {"\"rs3\"", "\"11186.0 m / s\""}, {
                    "\"cfn\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}\""}, {
                    "\"chemRes1\"", 
                    "\"['\\\\n\\\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 \
-> 2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']\""}, {
                    "\"Substance\"", 
                    "\"<class 'chempy.chemistry.Substance'>\""}, {
                    "\"chem_component\"", 
                    "\"<function chem_component at 0x1303d1c60>\""}, {
                    "\"chem_masses_records\"", 
                    "\"<function chem_masses_records at 0x1345e67a0>\""}, {
                    "\"pres\"", 
                    "\"[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': \
'SO2', 'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 \
-> 2H2O + 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': \
'H2O', 'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', \
'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': \
'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, \
'formula': 'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': \
128.116}]]\""}, {"\"pres2\"", 
                    "\"[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]\""}, {"\"pres3\"", 
                    "\"[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]\""}, {"\"pres4\"", 
                    "\"[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]\""}, {"\"dfEqs\"", 
                    "\"                            eq side   term  factor \
formula     mass\\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S \
  68.152\\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   \
95.994\\n7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   \
36.030\\n8    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  \
128.116\\n4   FeS2 + 7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\
\\n5   FeS2 + 7O2 -> Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\\n9   \
FeS2 + 7O2 -> Fe2O3 + 2SO2  RHS  Fe2O3       1   Fe2O3  159.687\\n10  FeS2 + \
7O2 -> Fe2O3 + 2SO2  RHS   2SO2       2     SO2  128.116\\n0                S \
+ O2 -> SO2  LHS      S       1       S   32.060\\n1                S + O2 -> \
SO2  LHS     O2       1      O2   31.998\\n6                S + O2 -> SO2  \
RHS    SO2       1     SO2   64.058\""}, {"\"chem_component2\"", 
                    "\"<function chem_component2 at 0x134631ab0>\""}, {
                    "\"cfnp\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"Configuration", 
                    "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {"SubParser", 
                    "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                    "Evaluator", 
                    "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                    "EvaluatorChat", 
                    "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {"EvaluatorChatGPT", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                    "EvaluatorChatPaLM", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                    "Functor", 
                    "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                    "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                    "LLMFunctions", 
                    "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {"llm_configuration", 
                    "<function llm_configuration at 0x104799990>"}, {
                    "llm_evaluator", 
                    "<function llm_evaluator at 0x104799a20>"}, {
                    "llm_example_function", 
                    "<function llm_example_function at 0x104799b40>"}, {
                    "llm_function", 
                    "<function llm_function at 0x104799ab0>"}, {
                    "llm_synthesize", 
                    "<function llm_synthesize at 0x104799bd0>"}, {
                    "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                    "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                    "exact_parser", 
                    "<function exact_parser at 0x101dc0160>"}, {
                    "catch_by_pattern", 
                    "<function catch_by_pattern at 0x101d53400>"}, {
                    "extract_json_objects", 
                    "<function extract_json_objects at 0x101d53880>"}, {
                    "jsonify_text", 
                    "<function jsonify_text at 0x101dc0040>"}, {
                    "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                    "Predicates", 
                    "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {"TypeClasses", 
                    "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {"Examiner", 
                    "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {"TypeSystem", 
                    "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {"deduce_type", 
                    "<function deduce_type at 0x104799ea0>"}, {
                    "is_reshapable", 
                    "<function is_reshapable at 0x104799e10>"}, {
                    "record_types", 
                    "<function record_types at 0x104799f30>"}, {
                    "DataTypeSystem", 
                    "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {"json", 
                    "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                    "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {"re", 
                    "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                    "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                    "samples", "[]"}, {"home", "/Users/antonov"}, {
                    "myfile", 
                    "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {"line", 
                    "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                    "match", "None"}, {"openai_api_key", 
                    "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"}, {
                    "palm_api_key", 
                    "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                    "confOpenAI", 
                    "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {"confPaLM", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {"io", 
                    "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                    "Image", 
                    "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                    "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {"show_plt", 
                    "<function show_plt at 0x11de43250>"}, {
                    "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {"fs", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                    "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                    "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                    "chemRes1", 
                    "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                    "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                    "chem_component", 
                    "<function chem_component at 0x1303d1c60>"}, {
                    "chem_masses_records", 
                    "<function chem_masses_records at 0x1345e67a0>"}, {
                    "pres", 
                    "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                    "pres2", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {"pres3", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "pres4", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "dfEqs", 
                    "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                    "<function chem_component2 at 0x134631ab0>"}, {
                    "cfnp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item[
                    "   1.  chemRes2 = cfnp(4, 'sulfur and hydrogen')", 
                    Background -> LightYellow], "   2.  chemRes2"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"Configuration", 
                    "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {
                    "SubParser", 
                    "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                    "Evaluator", 
                    "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                    "EvaluatorChat", 
                    "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {
                    "EvaluatorChatGPT", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                    "EvaluatorChatPaLM", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                    "Functor", 
                    "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                    "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                    "LLMFunctions", 
                    "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {"llm_configuration", 
                    "<function llm_configuration at 0x104799990>"}, {
                    "llm_evaluator", 
                    "<function llm_evaluator at 0x104799a20>"}, {
                    "llm_example_function", 
                    "<function llm_example_function at 0x104799b40>"}, {
                    "llm_function", 
                    "<function llm_function at 0x104799ab0>"}, {
                    "llm_synthesize", 
                    "<function llm_synthesize at 0x104799bd0>"}, {
                    "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                    "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                    "exact_parser", 
                    "<function exact_parser at 0x101dc0160>"}, {
                    "catch_by_pattern", 
                    "<function catch_by_pattern at 0x101d53400>"}, {
                    "extract_json_objects", 
                    "<function extract_json_objects at 0x101d53880>"}, {
                    "jsonify_text", 
                    "<function jsonify_text at 0x101dc0040>"}, {
                    "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                    "Predicates", 
                    "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {"TypeClasses", 
                    "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {"Examiner", 
                    "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {"TypeSystem", 
                    "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {"deduce_type", 
                    "<function deduce_type at 0x104799ea0>"}, {
                    "is_reshapable", 
                    "<function is_reshapable at 0x104799e10>"}, {
                    "record_types", 
                    "<function record_types at 0x104799f30>"}, {
                    "DataTypeSystem", 
                    "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {"json", 
                    "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                    "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {"re", 
                    "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                    "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                    "samples", "[]"}, {"home", "/Users/antonov"}, {
                    "myfile", 
                    "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {"line", 
                    "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                    "match", "None"}, {"openai_api_key", 
                    "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"}, {
                    "palm_api_key", 
                    "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                    "confOpenAI", 
                    "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {"confPaLM", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {
                    "io", "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                    "Image", 
                    "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                    "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {"show_plt", 
                    "<function show_plt at 0x11de43250>"}, {
                    "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {"fs", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                    "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                    "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                    "chemRes1", 
                    "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                    "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                    "chem_component", 
                    "<function chem_component at 0x1303d1c60>"}, {
                    "chem_masses_records", 
                    "<function chem_masses_records at 0x1345e67a0>"}, {
                    "pres", 
                    "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                    "pres2", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {"pres3", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "pres4", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "dfEqs", 
                    "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                    "<function chem_component2 at 0x134631ab0>"}, {
                    "cfnp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Functor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"__call__\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Functor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"__call__\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  17.              self.args = ires[0]\""}, {
                    "\"  18.              self.kwOnlyArgs = ires[4]\""}, {
                    "\"  19.          self.lmm_result = None\""}, {
                    "\"  20.  \""}, {
                    "\"  21.      def __call__(self, *args, **dargs):\""}, {
                    "\"  22.  \""}, {
                    "\"  23.          # Deepcopy the evaluator\""}, {
                    ItemBox[
                    "\"  24.          llmEvaluatorLocal = \
self.llm_evaluator.copy()\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\"  25.  \""}, {
                    "\"  26.          res = ''\""}, {
                    "\"  27.          if isinstance(self.prompt, str):\""}, {
                    "\"  28.  \""}, {
                    "\"  29.              args2 = [self.prompt, ] + \
list(args)\""}, {"\"  30.  \""}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                     GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"args\"", 
                    "\"(4, 'sulfur and hydrogen')\""}, {"\"dargs\"", 
                    "\"{}\""}, {"\"self\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "(4, 'sulfur and hydrogen')"}, {"dargs", "{}"}, {
                    "self", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless"],
                     " in ", "__call__"}], 
                    Column[{
                    
                    Column[{"  17.              self.args = ires[0]", 
                    "  18.              self.kwOnlyArgs = ires[4]", 
                    "  19.          self.lmm_result = None", "  20.  ", 
                    "  21.      def __call__(self, *args, **dargs):", 
                    "  22.  ", "  23.          # Deepcopy the evaluator", 
                    Item[
                    "  24.          llmEvaluatorLocal = \
self.llm_evaluator.copy()", Background -> LightYellow], "  25.  ", 
                    "  26.          res = ''", 
                    "  27.          if isinstance(self.prompt, str):", 
                    "  28.  ", 
                    "  29.              args2 = [self.prompt, ] + list(args)",
                     "  30.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "(4, 'sulfur and hydrogen')"}, {"dargs", "{}"}, {
                    "self", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Evaluator.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"copy\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Evaluator.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"copy\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 130.          return self.post_process(res, \
form=args.get('form', None))\""}, {"\" 131.  \""}, {
                    "\" 132.      # \
------------------------------------------------------------------\""}, {
                    "\" 133.      # Copying\""}, {
                    "\" 134.      # \
------------------------------------------------------------------\""}, {
                    "\" 135.      def copy(self):\""}, {
                    "\" 136.          \\\"\\\"\\\"Deep copy.\\\"\\\"\\\"\""}, {
                    ItemBox[
                    "\" 137.          return pickle.loads(pickle.dumps(self, \
-1))\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 138.  \""}, {"\" 139.      def __copy__(self):\""}, {
                    "\" 140.          \\\"\\\"\\\"Deep copy.\\\"\\\"\\\"\""}, \
{"\" 141.          return pickle.loads(pickle.dumps(self, -1))\""}, {
                    "\" 142.  \""}, {
                    "\" 143.      def __deepcopy__(self, memodict={}):\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"{'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "{'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless"], " in ", "copy"}], 
                    Column[{
                    
                    Column[{
                    " 130.          return self.post_process(res, \
form=args.get('form', None))", " 131.  ", 
                    " 132.      # \
------------------------------------------------------------------", 
                    " 133.      # Copying", 
                    " 134.      # \
------------------------------------------------------------------", 
                    " 135.      def copy(self):", 
                    " 136.          \"\"\"Deep copy.\"\"\"", 
                    Item[
                    " 137.          return pickle.loads(pickle.dumps(self, \
-1))", Background -> LightYellow], " 138.  ", 
                    " 139.      def __copy__(self):", 
                    " 140.          \"\"\"Deep copy.\"\"\"", 
                    " 141.          return pickle.loads(pickle.dumps(self, \
-1))", " 142.  ", " 143.      def __deepcopy__(self, memodict={}):"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "{'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"PicklingError", " ", 
                    "Can't pickle <function chem_component2 at 0x134631ab0>: \
attribute lookup chem_component2 on __main__ failed"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{" 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "evaluate_message"}], 
                    
                    Column[{
                    
                    Column[{
                    " 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 112.  ", 
                    " 113.      __traceback_hidden_variables__ = True", 
                    " 114.  ", " 115.      result = None", " 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    Item[
                    " 118.          result = execute_from_string(input, \
**opts)", Background -> LightYellow], " 119.  ", 
                    " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", " 123.          result = result(*args)", " 124.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "execute_from_string"}], 
                    Column[{
                    
                    Column[{"  81.  ", 
                    "  82.      last_expr = last(expressions)", "  83.  ", 
                    "  84.      if isinstance(last_expr, ast.Expr):", 
                    "  85.          result = expressions.pop(-1)", "  86.  ", 
                    "  87.      if expressions:", 
                    Item[
                    "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                    "  90.      if result:", 
                    "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                    "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "code", 
                    "chemRes2 = cfnp(4, 'sulfur and hydrogen')\nchemRes2"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x134636980>"}, {
                    "expressions", "[<ast.Assign object at 0x134636e90>]"}, {
                    "last_expr", "<ast.Expr object at 0x134636980>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item[
                    "   1.  chemRes2 = cfnp(4, 'sulfur and hydrogen')", 
                    Background -> LightYellow], "   2.  chemRes2"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "Configuration", 
                    "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {
                    "SubParser", 
                    "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                    "Evaluator", 
                    "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                    "EvaluatorChat", 
                    "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {
                    "EvaluatorChatGPT", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                    "EvaluatorChatPaLM", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                    "Functor", 
                    "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                    "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                    "LLMFunctions", 
                    "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {
                    "llm_configuration", 
                    "<function llm_configuration at 0x104799990>"}, {
                    "llm_evaluator", 
                    "<function llm_evaluator at 0x104799a20>"}, {
                    "llm_example_function", 
                    "<function llm_example_function at 0x104799b40>"}, {
                    "llm_function", 
                    "<function llm_function at 0x104799ab0>"}, {
                    "llm_synthesize", 
                    "<function llm_synthesize at 0x104799bd0>"}, {
                    "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                    "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                    "exact_parser", 
                    "<function exact_parser at 0x101dc0160>"}, {
                    "catch_by_pattern", 
                    "<function catch_by_pattern at 0x101d53400>"}, {
                    "extract_json_objects", 
                    "<function extract_json_objects at 0x101d53880>"}, {
                    "jsonify_text", 
                    "<function jsonify_text at 0x101dc0040>"}, {
                    "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                    "Predicates", 
                    "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {
                    "TypeClasses", 
                    "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {
                    "Examiner", 
                    "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {"TypeSystem", 
                    "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {
                    "deduce_type", "<function deduce_type at 0x104799ea0>"}, {
                    "is_reshapable", 
                    "<function is_reshapable at 0x104799e10>"}, {
                    "record_types", 
                    "<function record_types at 0x104799f30>"}, {
                    "DataTypeSystem", 
                    "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {"json", 
                    "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                    "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {"re", 
                    "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                    "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                    "samples", "[]"}, {"home", "/Users/antonov"}, {
                    "myfile", 
                    "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {"line", 
                    "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                    "match", "None"}, {
                    "openai_api_key", 
                    "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"}, {
                    "palm_api_key", 
                    "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                    "confOpenAI", 
                    "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {
                    "confPaLM", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {
                    "io", "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                    "Image", 
                    "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                    "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {"show_plt", 
                    "<function show_plt at 0x11de43250>"}, {
                    "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {
                    "fs", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                    "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                    "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                    "chemRes1", 
                    "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                    "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                    "chem_component", 
                    "<function chem_component at 0x1303d1c60>"}, {
                    "chem_masses_records", 
                    "<function chem_masses_records at 0x1345e67a0>"}, {
                    "pres", 
                    "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                    "pres2", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {"pres3", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "pres4", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "dfEqs", 
                    "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                    "<function chem_component2 at 0x134631ab0>"}, {
                    "cfnp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless"],
                     " in ", "__call__"}], 
                    Column[{
                    
                    Column[{"  17.              self.args = ires[0]", 
                    "  18.              self.kwOnlyArgs = ires[4]", 
                    "  19.          self.lmm_result = None", "  20.  ", 
                    "  21.      def __call__(self, *args, **dargs):", 
                    "  22.  ", "  23.          # Deepcopy the evaluator", 
                    Item[
                    "  24.          llmEvaluatorLocal = \
self.llm_evaluator.copy()", Background -> LightYellow], "  25.  ", 
                    "  26.          res = ''", 
                    "  27.          if isinstance(self.prompt, str):", 
                    "  28.  ", 
                    "  29.              args2 = [self.prompt, ] + list(args)",
                     "  30.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "args", "(4, 'sulfur and hydrogen')"}, {"dargs", "{}"}, {
                    "self", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless"], " in ", "copy"}], 
                    Column[{
                    
                    Column[{
                    " 130.          return self.post_process(res, \
form=args.get('form', None))", " 131.  ", 
                    " 132.      # \
------------------------------------------------------------------", 
                    " 133.      # Copying", 
                    " 134.      # \
------------------------------------------------------------------", 
                    " 135.      def copy(self):", 
                    " 136.          \"\"\"Deep copy.\"\"\"", 
                    Item[
                    " 137.          return pickle.loads(pickle.dumps(self, \
-1))", Background -> LightYellow], " 138.  ", 
                    " 139.      def __copy__(self):", 
                    " 140.          \"\"\"Deep copy.\"\"\"", 
                    " 141.          return pickle.loads(pickle.dumps(self, \
-1))", " 142.  ", " 143.      def __deepcopy__(self, memodict={}):"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "{'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Can't pickle <function chem_component2 at 0x134631ab0>: attribute lookup \
chem_component2 on __main__ failed", "MessageParameters" :> <||>, 
    "FailureCode" :> "PicklingError", "Traceback" :> OpenerView[{
       Row[{
        "PicklingError", " ", 
         "Can't pickle <function chem_component2 at 0x134631ab0>: attribute \
lookup chem_component2 on __main__ failed"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
               Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                "  20.      __traceback_hidden_variables__ = True", "  21.  ",
                 "  22.      try:", 
                Item[
                "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  24.      except Exception as export_exception:", 
                "  25.          try:", "  26.              try:", "  27.  ", 
                "  28.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  29.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
               Appearance -> "Frameless"], " in ", "handle_message"}], 
            Column[{
              
              Column[{" 130.  ", " 131.  ", 
                " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                " 134.      __traceback_hidden_variables__ = True", " 135.  ",
                 " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                Item[
                " 137.      result = evaluate_message(**message)", Background -> 
                 LightYellow], " 138.  ", " 139.      sys.stdout.flush()", 
                " 140.      return result", " 141.  ", " 142.  ", 
                " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
               Appearance -> "Frameless"], " in ", "evaluate_message"}], 
            Column[{
              
              Column[{" 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 112.  ", 
                " 113.      __traceback_hidden_variables__ = True", " 114.  ",
                 " 115.      result = None", " 116.  ", 
                " 117.      if isinstance(input, six.string_types):", 
                Item[
                " 118.          result = execute_from_string(input, **opts)", 
                 Background -> LightYellow], " 119.  ", 
                " 120.      if isinstance(args, (list, tuple)):", 
                " 121.          # then we have a function call to do", 
                " 122.          # first get the function object we need to \
call", " 123.          result = result(*args)", " 124.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
               Appearance -> "Frameless"], " in ", "execute_from_string"}], 
            Column[{
              
              Column[{"  81.  ", "  82.      last_expr = last(expressions)", 
                "  83.  ", "  84.      if isinstance(last_expr, ast.Expr):", 
                "  85.          result = expressions.pop(-1)", "  86.  ", 
                "  87.      if expressions:", 
                Item[
                "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                "  90.      if result:", 
                "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "code", 
                   "chemRes2 = cfnp(4, 'sulfur and hydrogen')\nchemRes2"}, {
                  "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                  "result", "<ast.Expr object at 0x134636980>"}, {
                  "expressions", "[<ast.Assign object at 0x134636e90>]"}, {
                  "last_expr", "<ast.Expr object at 0x134636980>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{"<module>", 
            Column[{
              Column[{
                Item[
                "   1.  chemRes2 = cfnp(4, 'sulfur and hydrogen')", 
                 Background -> LightYellow], "   2.  chemRes2"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "Configuration", 
                   "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {
                  "SubParser", 
                   "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                  "Evaluator", 
                   "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                  "EvaluatorChat", 
                   "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {
                  "EvaluatorChatGPT", 
                   "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                  "EvaluatorChatPaLM", 
                   "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                  "Functor", 
                   "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                  "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                  "LLMFunctions", 
                   "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {
                  "llm_configuration", 
                   "<function llm_configuration at 0x104799990>"}, {
                  "llm_evaluator", 
                   "<function llm_evaluator at 0x104799a20>"}, {
                  "llm_example_function", 
                   "<function llm_example_function at 0x104799b40>"}, {
                  "llm_function", "<function llm_function at 0x104799ab0>"}, {
                  "llm_synthesize", 
                   "<function llm_synthesize at 0x104799bd0>"}, {
                  "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                  "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                  "exact_parser", "<function exact_parser at 0x101dc0160>"}, {
                  "catch_by_pattern", 
                   "<function catch_by_pattern at 0x101d53400>"}, {
                  "extract_json_objects", 
                   "<function extract_json_objects at 0x101d53880>"}, {
                  "jsonify_text", "<function jsonify_text at 0x101dc0040>"}, {
                  "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                  "Predicates", 
                   "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {
                  "TypeClasses", 
                   "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {
                  "Examiner", 
                   "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {
                  "TypeSystem", 
                   "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {
                  "deduce_type", "<function deduce_type at 0x104799ea0>"}, {
                  "is_reshapable", 
                   "<function is_reshapable at 0x104799e10>"}, {
                  "record_types", "<function record_types at 0x104799f30>"}, {
                  "DataTypeSystem", 
                   "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {
                  "json", 
                   "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                   "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {
                  "re", "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                  "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                  "samples", "[]"}, {"home", "/Users/antonov"}, {
                  "myfile", 
                   "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {
                  "line", 
                   "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                  "match", "None"}, {
                  "openai_api_key", 
                   "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"}, {
                  "palm_api_key", 
                   "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                  "confOpenAI", 
                   "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {
                  "confPaLM", 
                   "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {
                  "io", "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                  "Image", 
                   "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                   "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {
                  "show_plt", "<function show_plt at 0x11de43250>"}, {
                  "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {
                  "fs", "{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                  "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                  "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                  "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                  "chemRes1", 
                   "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                  "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                  "chem_component", 
                   "<function chem_component at 0x1303d1c60>"}, {
                  "chem_masses_records", 
                   "<function chem_masses_records at 0x1345e67a0>"}, {
                  "pres", 
                   "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                  "pres2", 
                   "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {
                  "pres3", 
                   "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                  "pres4", 
                   "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                  "dfEqs", 
                   "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                   "<function chem_component2 at 0x134631ab0>"}, {
                  "cfnp", 
                   "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Functor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Functor.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless"], 
              " in ", "__call__"}], 
            Column[{
              
              Column[{"  17.              self.args = ires[0]", 
                "  18.              self.kwOnlyArgs = ires[4]", 
                "  19.          self.lmm_result = None", "  20.  ", 
                "  21.      def __call__(self, *args, **dargs):", "  22.  ", 
                "  23.          # Deepcopy the evaluator", 
                Item[
                "  24.          llmEvaluatorLocal = \
self.llm_evaluator.copy()", Background -> LightYellow], "  25.  ", 
                "  26.          res = ''", 
                "  27.          if isinstance(self.prompt, str):", "  28.  ", 
                "  29.              args2 = [self.prompt, ] + list(args)", 
                "  30.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "args", "(4, 'sulfur and hydrogen')"}, {"dargs", "{}"}, {
                  "self", 
                   "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Evaluator.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Evaluator.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> "Frameless"], 
              " in ", "copy"}], 
            Column[{
              
              Column[{" 130.          return self.post_process(res, \
form=args.get('form', None))", " 131.  ", 
                " 132.      # \
------------------------------------------------------------------", 
                " 133.      # Copying", 
                " 134.      # \
------------------------------------------------------------------", 
                " 135.      def copy(self):", 
                " 136.          \"\"\"Deep copy.\"\"\"", 
                Item[
                " 137.          return pickle.loads(pickle.dumps(self, -1))", 
                 Background -> LightYellow], " 138.  ", 
                " 139.      def __copy__(self):", 
                " 140.          \"\"\"Deep copy.\"\"\"", 
                " 141.          return pickle.loads(pickle.dumps(self, -1))", 
                " 142.  ", " 143.      def __deepcopy__(self, memodict={}):"},
                Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "{'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.905290929093395*^9, 3.905290934220066*^9}},
 CellLabel->"Out[29]=",ExpressionUUID->"f39f354b-7492-4a1f-ae1c-e8ef6200d576"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercise questions", "Subsection",ExpressionUUID->"98fe8aa4-9ba9-4e98-99a6-1f2c33f3e948"],

Cell["\<\
What is a good approach to evaluate the ability of LLMs to respect the \
conservation of mass law?\
\>", "Item",ExpressionUUID->"c48b296d-802e-4c75-9ff2-aec669046045"],

Cell["\<\
Is it better for that evaluation to use predominantly Python code or mostly \
LLM-functions?\
\>", "Item",ExpressionUUID->"ab14824e-aba4-4dd2-92f9-b0fc3d1a4c84"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"149f26d7-2e23-4fbb-b84f-9f9106ac8423"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Named entity recognition", "Section",ExpressionUUID->"4e36d066-cc53-4b68-9a52-8bcca9f0bb78"],

Cell[TextData[{
 StyleBox["Workflow:",
  FontWeight->"Bold"],
 " ",
 "We",
 " ",
 "want",
 " ",
 "to",
 " ",
 "download",
 " ",
 "text",
 " ",
 "from",
 " ",
 "the",
 " ",
 "Web,",
 " ",
 "extract",
 " ",
 "the",
 " ",
 "names",
 " ",
 "of",
 " ",
 "certain",
 " ",
 "types",
 " ",
 "of",
 " ",
 "entities",
 " ",
 "from",
 " ",
 "it,",
 " ",
 "and",
 " ",
 "visualize",
 " ",
 "relationships",
 " ",
 "between",
 " ",
 "them."
}], "Text",ExpressionUUID->"6bb5ae50-008c-43a3-bae5-7ebb28ea600b"],

Cell["\<\
For example, we might want to extract all album names and their release dates \
from a biographical web page of a certain music artist, and make a timeline \
plot.\
\>", "Text",ExpressionUUID->"0870dc48-eb25-43ca-a1dc-667709b5f954"],

Cell["\<\
fner = llm_function(lambda a, b: f\"Extract {a} from the text: {b} . Give the \
result in a JSON format\", e = confOpenAI, form = sub_parser('JSON'))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905290943060808*^9, 3.905290946570416*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"d2d3ff75-af41-4ac6-b739-9267cbd13c59"],

Cell["\<\
Here is a way to get a biography and discography text data of a music artist \
from Wikipedia:\
\>", "Text",ExpressionUUID->"0462f011-b480-4b86-9330-6470cf0d3147"],

Cell[CellGroupData[{

Cell["\<\
import urllib.request

url = 'https://en.wikipedia.org/wiki/Boris_Brejcha'

try:
   with urllib.request.urlopen(url) as f:
       text = f.read().strip().decode(\"utf-8\")
       print(len(text))
except urllib.error.URLError as e:
    print(e.reason)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[31]:=",ExpressionUUID->"8642d263-cd49-4edb-bce8-aace1fcd4be4"],

Cell[BoxData["\<\"87840\"\>"], "Print",
 CellChangeTimes->{3.905290949254181*^9},
 CellLabel->
  "During evaluation of \
In[31]:=",ExpressionUUID->"6443f6dd-5122-42ca-acc6-33f817fa902e"]
}, Open  ]],

Cell[TextData[{
 "But",
 " ",
 "now",
 " ",
 "we",
 " ",
 "have",
 " ",
 "to",
 " ",
 "convert",
 " ",
 "the",
 " ",
 "HTML",
 " ",
 "code",
 " ",
 "into",
 " ",
 "plain",
 " ",
 "text,",
 " ",
 StyleBox["and",
  FontSlant->"Italic"],
 " ",
 "the",
 " ",
 "text",
 " ",
 "is",
 " ",
 "too",
 " ",
 "large",
 " ",
 "to",
 " ",
 "process",
 " ",
 "all",
 " ",
 "at",
 " ",
 "once",
 " ",
 "with",
 " ",
 "LLMs.",
 " ",
 "(Currently",
 " ",
 "LLMs",
 " ",
 "have",
 " ",
 "\[AHat]\.89\.88",
 " ",
 "4096",
 " ",
 "\[CapitalAHat]\[PlusMinus]",
 " ",
 "2048",
 " ",
 "input",
 " ",
 "tokens",
 " ",
 "limits.)"
}], "Text",ExpressionUUID->"974ab497-4ba3-4037-a1cb-dff90b3dbb23"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "A",
 " ",
 "more",
 " ",
 "completely",
 " ",
 "worked",
 " ",
 "out",
 " ",
 "workflow",
 " ",
 "would",
 " ",
 "have",
 " ",
 "included",
 " ",
 "the",
 " ",
 "breaking",
 " ",
 "up",
 " ",
 "of",
 " ",
 "the",
 " ",
 "text",
 " ",
 "into",
 " ",
 "suitably",
 " ",
 "sized",
 " ",
 "chunks,",
 " ",
 "and",
 " ",
 "combining",
 " ",
 "the",
 " ",
 "LLM",
 " ",
 "processed",
 " ",
 "results."
}], "Text",ExpressionUUID->"3c8374ed-d38e-4a0c-9d2a-5016e212df2d"],

Cell["\<\
Instead, we are going to ask an LLM to produce artist's bio and discography \
and then we going to pretend we got it from some repository or encyclopedia.\
\>", "Text",ExpressionUUID->"02ed1d7a-265c-44ac-9295-f5ee93680c04"],

Cell["Here we get the text:", "Text",ExpressionUUID->"fc3bb607-94c2-43c1-9aec-01cbb807c30a"],

Cell[CellGroupData[{

Cell["\<\
text = llm_function('', e = llm_configuration(confOpenAI, \
max_tokens=500))(\"What is Boris Brejcha's bio and discography?\")
print(text)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905290955816866*^9, 3.905290959214738*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"b8dc2964-48bd-4e47-9d76-74edd8f37a54"],

Cell[CellGroupData[{

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.90529096540598*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"ca613746-9a73-412a-8966-50c824c401d2"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.9052909654079523`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"6f7d193f-1689-4dd5-9c0d-9b7f0435653b"],

Cell[BoxData["\<\"Boris Brejcha is a German electronic music producer and DJ, \
known for his unique style of minimal techno and high-energy live \
performances. He was born on November 26, 1981 in Ludwigshafen, \
Germany.\"\>"], "Print",
 CellChangeTimes->{3.9052909654100847`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"9e055ce7-0a0f-49f9-95fd-3e6c1cb1d324"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905290965411538*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"066dd7e1-27c8-4563-bc46-86c41782c207"],

Cell[BoxData["\<\"Brejcha began his music career in 2006, releasing his first \
EP \\\"Monster\\\" on Autist Records. He gained recognition in the \
underground techno scene with his track \\\"Die Maschinen Sind Gestrandet\\\" \
in 2007. He has since released numerous EPs and albums on his own label, \
Fckng Serious, as well as on other labels such as Harthouse and Minus.\"\>"], \
"Print",
 CellChangeTimes->{3.905290965412795*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"93f6b37b-d9ee-48fb-a5ed-a19bd2050244"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905290965414143*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"a197f3a2-095d-4200-ac45-b0367e6cf1da"],

Cell[BoxData["\<\"In addition to his solo work, Brejcha has collaborated with \
other artists such as Ann Clue and Deniz Bul. He has also remixed tracks for \
popular artists like Stephan Bodzin and Oliver Koletzki.\"\>"], "Print",
 CellChangeTimes->{3.905290965415207*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"fbcbc217-98a5-4e76-aae3-f136c547bb16"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.9052909654163733`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"cce3e664-e80e-4b65-8f0c-d881edd8d0e5"],

Cell[BoxData["\<\"Brejcha's live performances are known for their energetic \
and dynamic nature, often incorporating elements of visual art and lighting \
effects. He has performed at major music festivals such as Tomorrowland, \
Awakenings, and Time Warp.\"\>"], "Print",
 CellChangeTimes->{3.90529096541742*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"514df477-62e6-4c07-b833-3a1c33c21286"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905290965418631*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"90029f76-3b24-4f90-96a0-566935d06b3a"],

Cell[BoxData["\<\"Discography:\"\>"], "Print",
 CellChangeTimes->{3.905290965419601*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"59cd8b43-f9a5-4117-b889-d32bc399a9c2"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905290965420516*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"36b0718f-8ffd-4750-9463-11661595300e"],

Cell[BoxData["\<\"Albums:\"\>"], "Print",
 CellChangeTimes->{3.9052909654214287`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"f056e6a0-9a21-4425-bcb1-6a44b3ab4cf2"],

Cell[BoxData["\<\"- 2007: Die Maschinen Sind Gestrandet\"\>"], "Print",
 CellChangeTimes->{3.905290965422346*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"0a038eb8-64af-4b5d-bfad-77f522fc4066"],

Cell[BoxData["\<\"- 2010: My Name Is\"\>"], "Print",
 CellChangeTimes->{3.9052909654232693`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"5d2c13f9-5df5-4e49-98eb-67cd597a7a94"],

Cell[BoxData["\<\"- 2012: Feuerfalter Part 01\"\>"], "Print",
 CellChangeTimes->{3.905290965424197*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"8fe4391e-2556-49c1-b5c9-351357783b40"],

Cell[BoxData["\<\"- 2014: Feuerfalter Part 02\"\>"], "Print",
 CellChangeTimes->{3.9052909654251223`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"5fef8673-5d78-48e7-9dad-71e9299b771e"],

Cell[BoxData["\<\"- 2016: 22\"\>"], "Print",
 CellChangeTimes->{3.9052909654260473`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"4a42c593-37cf-495e-85b8-7378e5bd714a"],

Cell[BoxData["\<\"- 2018: Space Diver\"\>"], "Print",
 CellChangeTimes->{3.905290965426963*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"3a32737e-181d-462c-9a82-3afdc373444c"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905290965427782*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"260c5220-4b24-45cf-bca9-76bc619e930e"],

Cell[BoxData["\<\"EPs:\"\>"], "Print",
 CellChangeTimes->{3.905290965428588*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"c2dd61d2-9cd5-4d01-8695-d55cb6a804ae"],

Cell[BoxData["\<\"- 2006: Monster\"\>"], "Print",
 CellChangeTimes->{3.905290965429398*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"56b3a658-63ec-48dd-88b2-a36c4b839706"],

Cell[BoxData["\<\"- 2007: Outer Space\"\>"], "Print",
 CellChangeTimes->{3.905290965430208*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"ad64642a-4890-4718-9aaa-5d1bef173ea0"],

Cell[BoxData["\<\"- 2008: Mein Wahres Ich\"\>"], "Print",
 CellChangeTimes->{3.905290965431014*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"9bae168b-8d17-4377-9b8a-cc85a8717e43"],

Cell[BoxData["\<\"- 2009: Die Milchstrasse\"\>"], "Print",
 CellChangeTimes->{3.9052909654318533`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"86fc4482-fd0a-4791-8e7a-eb84af66477d"],

Cell[BoxData["\<\"- 2010: Die Maschinen Kontrollieren Uns\"\>"], "Print",
 CellChangeTimes->{3.9052909654326563`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"ff78d2db-33f5-4c34-82e5-cf350c9b08a2"],

Cell[BoxData["\<\"- 2011: Lost Memory\"\>"], "Print",
 CellChangeTimes->{3.905290965433413*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"e2c83fde-3f12-4cda-b680-f51fed7cf133"],

Cell[BoxData["\<\"- 2012: That's the Funky Shit\"\>"], "Print",
 CellChangeTimes->{3.9052909654341393`*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"1675a13a-59d6-4476-bdc9-6777bbe61fe8"],

Cell[BoxData["\<\"- 2013: Everybody Wants to Go to Heaven\"\>"], "Print",
 CellChangeTimes->{3.905290965434864*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"c9052421-6570-46f0-9582-6d98e2900760"],

Cell[BoxData["\<\"- 2014: R U FCKNG SERIOUS?\"\>"], "Print",
 CellChangeTimes->{3.905290965435596*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"df8f578b-56a8-4a56-9e62-bf949ab6f49f"],

Cell[BoxData["\<\"- 2015: Hashtag\"\>"], "Print",
 CellChangeTimes->{3.905290965436349*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"adc7448d-8629-4331-b408-7957b0377f57"],

Cell[BoxData["\<\"- 2016: DJ Mixes Single Tracks\"\>"], "Print",
 CellChangeTimes->{3.905290965437071*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"c5f346f1-6ff9-473f-9b37-d0595c6e20a4"],

Cell[BoxData["\<\"- 2017: Bleeding Heart\"\>"], "Print",
 CellChangeTimes->{3.905290965437801*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"d690724b-f0d6-4249-b205-16d257944a03"],

Cell[BoxData["\<\"- 2018: Devil\"\>"], "Print",
 CellChangeTimes->{3.90529096543853*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"fad06f21-eee4-44b9-ad23-d58a946ec32c"],

Cell[BoxData["\<\"- 2019: Space Diver Remixes\"\>"], "Print",
 CellChangeTimes->{3.905290965439253*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"51ab8693-d0d7-408e-b58e-0e0dfdee810c"],

Cell[BoxData["\<\"- 2020: Violet Pill\"\>"], "Print",
 CellChangeTimes->{3.905290965439981*^9},
 CellLabel->
  "During evaluation of \
In[32]:=",ExpressionUUID->"1f957275-55bc-4795-a61c-ccfe4962089e"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Here we do Named Entity Recognition (NER) via the LLM function defined above:\
\
\>", "Text",ExpressionUUID->"ba85342c-b266-48fb-8eef-985054ae4dc1"],

Cell[CellGroupData[{

Cell["\<\
albRes = fner('album names and years', text)
albRes\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[33]:=",ExpressionUUID->"71f989a7-2862-44dd-9885-7d8a3bf95079"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"\\n\\n\"\>", ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"\<\"albums\"\>", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"name\"\>", 
          "\[Rule]", "\<\"Die Maschinen Sind Gestrandet\"\>"}], ",", 
         RowBox[{"\<\"year\"\>", "\[Rule]", "2007"}]}], 
        "\[RightAssociation]"}], ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"My Name Is\"\>"}], ",", 
         RowBox[{"\<\"year\"\>", "\[Rule]", "2010"}]}], 
        "\[RightAssociation]"}], ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Feuerfalter Part 01\"\>"}], 
         ",", 
         RowBox[{"\<\"year\"\>", "\[Rule]", "2012"}]}], 
        "\[RightAssociation]"}], ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Feuerfalter Part 02\"\>"}], 
         ",", 
         RowBox[{"\<\"year\"\>", "\[Rule]", "2014"}]}], 
        "\[RightAssociation]"}], ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"22\"\>"}], ",", 
         RowBox[{"\<\"year\"\>", "\[Rule]", "2016"}]}], 
        "\[RightAssociation]"}], ",", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Space Diver\"\>"}], ",", 
         RowBox[{"\<\"year\"\>", "\[Rule]", "2018"}]}], 
        "\[RightAssociation]"}]}], "}"}]}], "\[RightAssociation]"}], 
   ",", "\<\"\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9052909676590548`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"ad0ef235-2ab3-47c7-a8b8-7902fdf76a29"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "LLMs",
 " ",
 "can",
 " ",
 "produce",
 " ",
 "NER",
 " ",
 "data",
 " ",
 "in",
 " ",
 "several",
 " ",
 "different",
 " ",
 "structures.",
 " ",
 "Using",
 " ",
 "the",
 " ",
 "function",
 " ",
 StyleBox["deduce_type", "Program"],
 " ",
 "from",
 " ",
 "Python's",
 " ",
 "package",
 " ",
 ButtonBox["\"DataTypeSystem\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/DataTypeSystem/"], None}],
 " ",
 ",",
 " ",
 "[AAp6],",
 " ",
 "can",
 " ",
 "help",
 " ",
 "required",
 " ",
 "post-processing:",
 " ",
 "see",
 " ",
 "[AA3]."
}], "Text",ExpressionUUID->"eb0170b5-3a36-4bb2-9535-8324c1c69e5d"],

Cell[TextData[{
 "Based",
 " ",
 "in",
 " ",
 "our",
 " ",
 "study",
 " ",
 "of",
 " ",
 "the",
 " ",
 "result",
 " ",
 "data",
 " ",
 "type",
 " ",
 "signatures,",
 " ",
 "in",
 " ",
 "this",
 " ",
 "workflow",
 " ",
 "we",
 " ",
 "process",
 " ",
 "result",
 " ",
 "of",
 " ",
 StyleBox["fner", "Program"],
 " ",
 "with",
 " ",
 "this",
 " ",
 "code:"
}], "Text",ExpressionUUID->"3e450302-2c06-4315-815f-a328edb8d587"],

Cell[CellGroupData[{

Cell["\<\
albRes2 = [x for x in albRes if isinstance(x, dict)]

if not any(isinstance(x, dict) for x in albRes2):
    albRes2 = {'albums': albRes2}

print(albRes2)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[34]:=",ExpressionUUID->"4664367c-d7e5-4a50-a916-7117952ef717"],

Cell[BoxData["\<\"[{'albums': [{'name': 'Die Maschinen Sind Gestrandet', \
'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': 'Feuerfalter \
Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': 2014}, \
{'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}]\"\>"], \
"Print",
 CellChangeTimes->{3.9052909702909718`*^9},
 CellLabel->
  "During evaluation of \
In[34]:=",ExpressionUUID->"efc0214f-f314-4c53-9814-ad7cc8e50a4c"]
}, Open  ]],

Cell["Here we tabulate the result:", "Text",ExpressionUUID->"113f589e-3073-46a6-996e-3ea86622be9d"],

Cell[CellGroupData[{

Cell["\<\
dfDiscography = pandas.DataFrame.from_dict(albRes2)
dfDiscography\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[35]:=",ExpressionUUID->"9ed38134-ae88-4f76-8999-f716ee0ef616"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      0 -> <|"albums" -> {<|
           "name" -> "Die Maschinen Sind Gestrandet", "year" -> 2007|>, <|
           "name" -> "My Name Is", "year" -> 2010|>, <|
           "name" -> "Feuerfalter Part 01", "year" -> 2012|>, <|
           "name" -> "Feuerfalter Part 02", "year" -> 2014|>, <|
           "name" -> "22", "year" -> 2016|>, <|
           "name" -> "Space Diver", "year" -> 2018|>}|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, All, All, 
          TypeSystem`PackageScope`KeyDummy[3]} -> 1, {All, All, All, 
          TypeSystem`PackageScope`KeyDummy[2]} -> 1, {All, All, All, "name"} -> 
        1, {All, All, All, "year"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[67.2], 
             TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                
                TypeSystem`PackageScope`RowShape[<|
                 "name" -> TypeSystem`PackageScope`AtomShape[324.8], "year" -> 
                  TypeSystem`PackageScope`AtomShape[34]|>], 
                DirectedInfinity[1], 2, {All, All, All}]], 6, 
              DirectedInfinity[1], {All, All}]]], 1, 
           DirectedInfinity[1], {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Assoc[
        TypeSystem`Atom[String], 
        TypeSystem`Vector[
         TypeSystem`Struct[{"name", "year"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}], 6], 1], 1], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, All, All, 
          TypeSystem`PackageScope`KeyDummy[3]} -> 1, {All, All, All, 
          TypeSystem`PackageScope`KeyDummy[2]} -> 1, {All, All, All, "name"} -> 
        1, {All, All, All, "year"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[34], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`KeyValueShape[
             TypeSystem`PackageScope`AtomShape[67.2], 
             TypeSystem`PackageScope`Limited[
              TypeSystem`PackageScope`ColumnShape[
               TypeSystem`PackageScope`Limited[
                
                TypeSystem`PackageScope`RowShape[<|
                 "name" -> TypeSystem`PackageScope`AtomShape[324.8], "year" -> 
                  TypeSystem`PackageScope`AtomShape[34]|>], 
                DirectedInfinity[1], 2, {All, All, All}]], 6, 
              DirectedInfinity[1], {All, All}]]], 1, 
           DirectedInfinity[1], {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[Integer], 
       TypeSystem`Assoc[
        TypeSystem`Atom[String], 
        TypeSystem`Vector[
         TypeSystem`Struct[{"name", "year"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}], 6], 1], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     1, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["year", 
                  Style[
                  "year", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, All, "year"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, All, "year"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["0"], 
                  Style[
                   RawBoxes["0"], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["albums", 
                  Style[
                  "albums", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[0], 
                    Key["albums"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Die Maschinen Sind Gestrandet", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 1, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2007"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 1, 
                 Key["year"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation["My Name Is", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 2, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2010"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 2, 
                 Key["year"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation["Feuerfalter Part 01", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 3, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2012"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 3, 
                 Key["year"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation["Feuerfalter Part 02", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 4, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2014"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 4, 
                 Key["year"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation["22", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 5, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2016"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 5, 
                 Key["year"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation["Space Diver", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 6, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{324.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2018"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[0], 
                 Key["albums"], 6, 
                 Key["year"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{495., {101.134033203125, 106.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{495., {101.134033203125, 106.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.9052909728022327`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"322d97d8-8708-4e31-a5d8-e1ad36063910"]
}, Open  ]],

Cell["\<\
Here we make a Mermaid-JS timeline plot (after we have figured out the \
structure of LLM's function output):\
\>", "Text",ExpressionUUID->"92bf0a61-550b-4b11-a8a7-f0239475b160"],

Cell[CellGroupData[{

Cell["\<\
codeRes = fjp(json.dumps(dfDiscography.to_dict()), \"time line plot\")
print(codeRes)\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[38]:=",ExpressionUUID->"12fa2db3-dd5f-40bb-b252-b7bc2d85775d"],

Cell[CellGroupData[{

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905291016386217*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"1c3e2dc9-0582-4923-8c7b-b3d27938b26e"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905291016387588*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"d7b6e2bf-c187-4099-9350-4094f63484a5"],

Cell[BoxData["\<\"import matplotlib.pyplot as plt\"\>"], "Print",
 CellChangeTimes->{3.905291016389351*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"1e4d7626-6532-4262-b242-61171631b5ce"],

Cell[BoxData["\<\"import json\"\>"], "Print",
 CellChangeTimes->{3.905291016390336*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"7adb4f60-c06a-4a61-a197-f0750fac9703"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905291016391302*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"75d92604-5a09-4251-9065-5169a48f6b78"],

Cell[BoxData["\<\"# Load JSON data\"\>"], "Print",
 CellChangeTimes->{3.905291016392247*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"7d089af5-a503-4c66-9fab-bd0867626436"],

Cell[BoxData["\<\"data = '{\\\"albums\\\": {\\\"0\\\": [{\\\"name\\\": \
\\\"Die Maschinen Sind Gestrandet\\\", \\\"year\\\": 2007}, {\\\"name\\\": \\\
\"My Name Is\\\", \\\"year\\\": 2010}, {\\\"name\\\": \\\"Feuerfalter Part 01\
\\\", \\\"year\\\": 2012}, {\\\"name\\\": \\\"Feuerfalter Part 02\\\", \
\\\"year\\\": 2014}, {\\\"name\\\": \\\"22\\\", \\\"year\\\": 2016}, \
{\\\"name\\\": \\\"Space Diver\\\", \\\"year\\\": 2018}]}}'\"\>"], "Print",
 CellChangeTimes->{3.90529101639321*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"866875ba-143e-4063-a80b-d20134bc82f7"],

Cell[BoxData["\<\"data = json.loads(data)\"\>"], "Print",
 CellChangeTimes->{3.905291016394305*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"ff351995-9e87-41ee-9e2c-ddfac494ab60"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905291016395153*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"c36e174a-c603-4ec1-8c7b-a9c859a9a900"],

Cell[BoxData["\<\"# Extract album names and years\"\>"], "Print",
 CellChangeTimes->{3.9052910163960238`*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"936ffe30-b23b-42ce-b16d-a1b4a5debccf"],

Cell[BoxData["\<\"albums = data['albums']['0']\"\>"], "Print",
 CellChangeTimes->{3.905291016396872*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"b4928d62-beed-45f9-a9a7-cae16aeb9530"],

Cell[BoxData["\<\"names = [album['name'] for album in albums]\"\>"], "Print",
 CellChangeTimes->{3.9052910163977213`*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"9e5e2225-96d9-4550-865e-28cc1400bb67"],

Cell[BoxData["\<\"years = [album['year'] for album in albums]\"\>"], "Print",
 CellChangeTimes->{3.905291016398576*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"fa8fce23-606a-4156-9eda-de2f4b473c0c"],

Cell[BoxData["\<\"\"\>"], "Print",
 CellChangeTimes->{3.905291016399431*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"db54577e-fba5-4c57-867e-70c8b2f5c9c7"],

Cell[BoxData["\<\"# Create time line plot\"\>"], "Print",
 CellChangeTimes->{3.905291016400264*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"55ec6157-86fa-4fb3-a7d0-6c97b1bfb0fb"],

Cell[BoxData["\<\"plt.plot(years, names)\"\>"], "Print",
 CellChangeTimes->{3.905291016401116*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"68f7085a-3556-40f0-ac2a-2bfa74ce9061"],

Cell[BoxData["\<\"plt.xlabel('Year')\"\>"], "Print",
 CellChangeTimes->{3.905291016401911*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"ab094dbc-a130-44f8-8080-38d2b1af9422"],

Cell[BoxData["\<\"plt.ylabel('Album Name')\"\>"], "Print",
 CellChangeTimes->{3.905291016402668*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"87b46027-3421-4b43-a5ff-c117e830af35"],

Cell[BoxData["\<\"plt.title('Album Release Timeline')\"\>"], "Print",
 CellChangeTimes->{3.9052910164034243`*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"2e5107cb-a2cd-4768-9dd2-77dcc0d8f1f6"],

Cell[BoxData["\<\"plt.show()\"\>"], "Print",
 CellChangeTimes->{3.9052910164041843`*^9},
 CellLabel->
  "During evaluation of \
In[38]:=",ExpressionUUID->"3f05726e-e5f0-49d6-87b9-2cd2470eebae"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Here the generated code above is pasted in the code cell and evaluated:\
\>", "Text",ExpressionUUID->"89a041f2-efd1-468b-bb9b-dade8a437a43"],

Cell["\<\
exec(codeRes.replace(\"plt.title('Album Release Timeline\", \"\"))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[39]:=",ExpressionUUID->"c267251a-70f2-4eac-a2be-9a9fc662a1cc"],

Cell[CellGroupData[{

Cell["Exercise questions", "Subsection",ExpressionUUID->"faa8ae6d-da49-4c7b-9ab0-216e163c3246"],

Cell["\<\
How the LLM-functions pipeline above should be changed in order to produce \
timeline plots of different wars?\
\>", "Item",ExpressionUUID->"53628486-2b79-44b3-a43e-6149f8ba6532"],

Cell[TextData[{
 "How",
 " ",
 "the",
 " ",
 "Python",
 " ",
 "code",
 " ",
 "should",
 " ",
 "be",
 " ",
 "changed",
 " ",
 "in",
 " ",
 "order",
 " ",
 "to",
 " ",
 "produce",
 " ",
 "timeline",
 " ",
 "plots",
 " ",
 "with",
 " ",
 ButtonBox["Mermaid-JS",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mermaid.js.org"], None}],
 " ",
 "?"
}], "Item",ExpressionUUID->"7c516384-b230-478b-8c49-fb125bde45f9"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"89fad1a1-cc31-4ab8-8125-eebaead57805"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Statistics of output data types", "Section",ExpressionUUID->"86f9e1fd-643d-4681-92c6-043f8e220fb2"],

Cell[TextData[{
 StyleBox["Workflow:",
  FontWeight->"Bold"],
 " ",
 "We",
 " ",
 "want",
 " ",
 "to",
 " ",
 "see",
 " ",
 "and",
 " ",
 "evaluate",
 " ",
 "the",
 " ",
 "distribution",
 " ",
 "of",
 " ",
 "data",
 " ",
 "types",
 " ",
 "of",
 " ",
 "LLM-function",
 " ",
 "results:"
}], "Text",ExpressionUUID->"162a4363-311c-49c4-9976-3268268505bd"],

Cell["Make a pipeline of LLM-functions", "ItemNumbered",ExpressionUUID->"bb13ccd8-cb4c-40f3-9ac6-6997e5500066"],

Cell[CellGroupData[{

Cell["Create a list of random inputs \"expected\" by the pipeline", \
"ItemNumbered",ExpressionUUID->"15228639-6e01-43d1-a59e-e232154d6a72"],

Cell["Or use the same input multiple times.", "Subsubitem",ExpressionUUID->"007365bd-da83-4372-b8e7-63be5c1ebf81"]
}, Open  ]],

Cell["Deduce the data type of each output", "ItemNumbered",ExpressionUUID->"e50c6123-77c1-46f8-9c59-e3a000a13138"],

Cell["Compute descriptive statistics", "ItemNumbered",ExpressionUUID->"38f93108-a846-425f-8062-e5c6e58c2416"],

Cell[TextData[{
 StyleBox["Remark:",
  FontWeight->"Bold"],
 " ",
 "These",
 " ",
 "kind",
 " ",
 "of",
 " ",
 "statistical",
 " ",
 "workflows",
 " ",
 "can",
 " ",
 "be",
 " ",
 "slow",
 " ",
 "and",
 " ",
 "expensive.",
 " ",
 "(With",
 " ",
 "the",
 " ",
 "current",
 " ",
 "line-up",
 " ",
 "of",
 " ",
 "LLM",
 " ",
 "services.)"
}], "Text",ExpressionUUID->"60901e47-743f-4f1f-b027-b7782de5a37e"],

Cell["\<\
Let us reuse the workflow from the previous section and enhance it with data \
type outputs finding. More precisely we:\
\>", "Text",ExpressionUUID->"22147938-8a79-4351-ba2d-fd2bcd039cd5"],

Cell["Generate random music artist names (using an LLM query)", "ItemNumbered",ExpressionUUID->"edd75f8d-d885-4de5-ba00-4d9368c370b8"],

Cell["\<\
Retrieve short biography and discography for each music artist\
\>", "ItemNumbered",ExpressionUUID->"adce7153-85b8-442d-8d4b-92995bc606f0"],

Cell["\<\
Extract album-and-release-date data for each artist (with NER-by-LLM)\
\>", "ItemNumbered",ExpressionUUID->"513d2de5-1952-434d-b71d-8b4a9dd4df23"],

Cell["\<\
Deduce the type for each output, using several different type representations\
\
\>", "ItemNumbered",ExpressionUUID->"9e68ee18-2e5d-476d-b6e6-954776ad9fdf"],

Cell[TextData[{
 "The",
 " ",
 "data",
 " ",
 "types",
 " ",
 "are",
 " ",
 "investigated",
 " ",
 "with",
 " ",
 "the",
 " ",
 "functions",
 " ",
 StyleBox["deduce_type", "Program"],
 " ",
 "and",
 " ",
 StyleBox["record_types", "Program"],
 " ",
 "of",
 " ",
 ButtonBox["\"DataTypeSystem\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/DataTypeSystem/"], None}],
 " ",
 ",",
 " ",
 "[AAp5]."
}], "Text",ExpressionUUID->"c20efe2b-fd18-4ea9-8299-a92d9eb0c7bc"],

Cell["Here we define a data retrieval function:", "Text",ExpressionUUID->"a483e511-11aa-430c-bc06-61a9093dcd89"],

Cell["\<\
fdb = llm_function(lambda x: f\"What is the short biography and discography \
of the artist {x}?\", e = llm_configuration(confPaLM, max_tokens= 500))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905291052409401*^9, 3.905291056413621*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"ec94dbfc-e809-473e-8c57-1f53a1e95cc6"],

Cell["Here we define (again) the NER function:", "Text",ExpressionUUID->"f1253b9f-1cbe-4835-92aa-830f2c69c10d"],

Cell["\<\
fner = llm_function(lambda a, b: f\"Extract {a} from the text: {b} . Give the \
result in a JSON format\", e = confPaLM, form = sub_parser('JSON'))\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905291059429309*^9, 3.905291061655663*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"cedb8529-ed04-46b7-b7ec-9a2de1995c9d"],

Cell["Here we find 10 random music artists:", "Text",ExpressionUUID->"6b253bf9-88ce-45f3-8aac-94e67dd1cd2a"],

Cell[CellGroupData[{

Cell["\<\
artistNames = llm_function('',e=confPaLM)(\"Give 10 random music artist names \
in a list in JSON format.\", 
                                        form = sub_parser('JSON'))
artistNames\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellChangeTimes->{{3.905291079206091*^9, 3.905291081614645*^9}, {
  3.905291146143956*^9, 3.905291175867442*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"1084c5b6-9a9b-45c6-b8c3-606b597eea80"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Your default credentials were not found. To set up \
Application Default Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"Your default credentials were not found. To set up \
Application Default Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information.\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"DefaultCredentialsError\"", HoldForm], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"DefaultCredentialsError\"", "\" \"", 
                    "\"Your default credentials were not found. To set up \
Application Default Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information.\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"DefaultCredentialsError\"", "\" \"", 
                    "\"Your default credentials were not found. To set up \
Application Default Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information.\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  16.  \""}, {"\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      __traceback_hidden_variables__ = True\""}, {
                    "\"  21.  \""}, {"\"  22.      try:\""}, {
                    ItemBox[
                    "\"  23.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  24.      except Exception as export_exception:\""}, {
                    "\"  25.          try:\""}, {
                    "\"  26.              try:\""}, {"\"  27.  \""}, {
                    "\"  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  29.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 130.  \""}, {"\" 131.  \""}, {
                    "\" 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):\""}, {"\" 133.  \""}, {
                    "\" 134.      __traceback_hidden_variables__ = True\""}, {
                    "\" 135.  \""}, {
                    "\" 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\""}, {
                    ItemBox[
                    "\" 137.      result = evaluate_message(**message)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 138.  \""}, {
                    "\" 139.      sys.stdout.flush()\""}, {
                    "\" 140.      return result\""}, {"\" 141.  \""}, {
                    "\" 142.  \""}, {
                    "\" 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{" 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"evaluate_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"evaluate_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):\""}, {"\" 112.  \""}, {
                    "\" 113.      __traceback_hidden_variables__ = True\""}, {
                    "\" 114.  \""}, {"\" 115.      result = None\""}, {
                    "\" 116.  \""}, {
                    "\" 117.      if isinstance(input, \
six.string_types):\""}, {
                    ItemBox[
                    "\" 118.          result = execute_from_string(input, \
**opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 119.  \""}, {
                    "\" 120.      if isinstance(args, (list, tuple)):\""}, {
                    "\" 121.          # then we have a function call to \
do\""}, {"\" 122.          # first get the function object we need to \
call\""}, {"\" 123.          result = result(*args)\""}, {"\" 124.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "evaluate_message"}], 
                    
                    Column[{
                    
                    Column[{
                    " 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 112.  ", 
                    " 113.      __traceback_hidden_variables__ = True", 
                    " 114.  ", " 115.      result = None", " 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    Item[
                    " 118.          result = execute_from_string(input, \
**opts)", Background -> LightYellow], " 119.  ", 
                    " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", " 123.          result = result(*args)", " 124.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"execute_from_string\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"execute_from_string\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  81.  \""}, {
                    "\"  82.      last_expr = last(expressions)\""}, {
                    "\"  83.  \""}, {
                    "\"  84.      if isinstance(last_expr, ast.Expr):\""}, {
                    "\"  85.          result = expressions.pop(-1)\""}, {
                    "\"  86.  \""}, {"\"  87.      if expressions:\""}, {
                    ItemBox[
                    "\"  88.          exec(compile(Module(expressions), \
\\\"\\\", \\\"exec\\\"), env)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\"  89.  \""}, {
                    "\"  90.      if result:\""}, {
                    "\"  91.          return \
eval(compile(ast.Expression(result.value), \\\"\\\", \\\"eval\\\"), env)\""}, \
{"\"  92.  \""}, {
                    "\"  93.      elif isinstance(last_expr, \
(ast.FunctionDef, ast.ClassDef)):\""}, {
                    "\"  94.          return env[last_expr.name]\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"code\"", 
                    "\"artistNames = llm_function('',e=confPaLM)(\\\"Give 10 \
random music artist names in a list in JSON format.\\\", \\n                  \
                      form = sub_parser('JSON'))\\nartistNames\""}, {
                    "\"globals\"", "\"{}\""}, {"\"opts\"", 
                    "\"{'constants': {}}\""}, {"\"result\"", 
                    "\"<ast.Expr object at 0x134635d80>\""}, {
                    "\"expressions\"", 
                    "\"[<ast.Assign object at 0x1306d8dc0>]\""}, {
                    "\"last_expr\"", "\"<ast.Expr object at 0x134635d80>\""}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"code", 
                    "artistNames = llm_function('',e=confPaLM)(\"Give 10 \
random music artist names in a list in JSON format.\", \n                     \
                   form = sub_parser('JSON'))\nartistNames"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x134635d80>"}, {
                    "expressions", "[<ast.Assign object at 0x1306d8dc0>]"}, {
                    "last_expr", "<ast.Expr object at 0x134635d80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "execute_from_string"}], 
                    Column[{
                    
                    Column[{"  81.  ", 
                    "  82.      last_expr = last(expressions)", "  83.  ", 
                    "  84.      if isinstance(last_expr, ast.Expr):", 
                    "  85.          result = expressions.pop(-1)", "  86.  ", 
                    "  87.      if expressions:", 
                    Item[
                    "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                    "  90.      if result:", 
                    "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                    "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"code", 
                    "artistNames = llm_function('',e=confPaLM)(\"Give 10 \
random music artist names in a list in JSON format.\", \n                     \
                   form = sub_parser('JSON'))\nartistNames"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x134635d80>"}, {
                    "expressions", "[<ast.Assign object at 0x1306d8dc0>]"}, {
                    "last_expr", "<ast.Expr object at 0x134635d80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    "\"   1.  artistNames = \
llm_function('',e=confPaLM)(\\\"Give 10 random music artist names in a list \
in JSON format.\\\", \"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"   2.                                          form = \
sub_parser('JSON'))\""}, {"\"   3.  artistNames\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"Configuration\"", 
                    "\"<class \
'LLMFunctionObjects.Configuration.Configuration'>\""}, {"\"SubParser\"", 
                    "\"<class 'LLMFunctionObjects.SubParser.SubParser'>\""}, {
                    "\"Evaluator\"", 
                    "\"<class 'LLMFunctionObjects.Evaluator.Evaluator'>\""}, {
                    "\"EvaluatorChat\"", 
                    "\"<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>\""}, {
                    "\"EvaluatorChatGPT\"", 
                    "\"<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>\""}, {
                    "\"EvaluatorChatPaLM\"", 
                    "\"<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>\""}, {
                    "\"Functor\"", 
                    "\"<class 'LLMFunctionObjects.Functor.Functor'>\""}, {
                    "\"Chat\"", 
                    "\"<class 'LLMFunctionObjects.Chat.Chat'>\""}, {
                    "\"LLMFunctions\"", 
                    "\"<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>\""}, {"\"llm_configuration\"", 
                    "\"<function llm_configuration at 0x104799990>\""}, {
                    "\"llm_evaluator\"", 
                    "\"<function llm_evaluator at 0x104799a20>\""}, {
                    "\"llm_example_function\"", 
                    "\"<function llm_example_function at 0x104799b40>\""}, {
                    "\"llm_function\"", 
                    "\"<function llm_function at 0x104799ab0>\""}, {
                    "\"llm_synthesize\"", 
                    "\"<function llm_synthesize at 0x104799bd0>\""}, {
                    "\"llm_chat\"", 
                    "\"<function llm_chat at 0x104799c60>\""}, {
                    "\"sub_parser\"", 
                    "\"<function sub_parser at 0x101dc00d0>\""}, {
                    "\"exact_parser\"", 
                    "\"<function exact_parser at 0x101dc0160>\""}, {
                    "\"catch_by_pattern\"", 
                    "\"<function catch_by_pattern at 0x101d53400>\""}, {
                    "\"extract_json_objects\"", 
                    "\"<function extract_json_objects at 0x101d53880>\""}, {
                    "\"jsonify_text\"", 
                    "\"<function jsonify_text at 0x101dc0040>\""}, {
                    "\"numify_text\"", 
                    "\"<function numify_text at 0x101d51cf0>\""}, {
                    "\"Predicates\"", 
                    "\"<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>\""}, {"\"TypeClasses\"", 
                    "\"<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>\""}, {"\"Examiner\"", 
                    "\"<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>\""}, {"\"TypeSystem\"", 
                    "\"<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>\""}, {"\"deduce_type\"", 
                    "\"<function deduce_type at 0x104799ea0>\""}, {
                    "\"is_reshapable\"", 
                    "\"<function is_reshapable at 0x104799e10>\""}, {
                    "\"record_types\"", 
                    "\"<function record_types at 0x104799f30>\""}, {
                    "\"DataTypeSystem\"", 
                    "\"<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>\""}, {"\"json\"", 
                    "\"<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
\""}, {"\"pandas\"", 
                    "\"<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>\""}, {"\"re\"", 
                    "\"<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>\""}, {
                    "\"os\"", 
                    "\"<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>\""}, {
                    "\"samples\"", "\"[]\""}, {"\"home\"", 
                    "\"/Users/antonov\""}, {"\"myfile\"", 
                    "\"<_io.TextIOWrapper name='/Users/antonov/.zshrc' \
mode='r' encoding='UTF-8'>\""}, {"\"line\"", 
                    "\"if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\\n\""}, {
                    "\"match\"", "\"None\""}, {"\"openai_api_key\"", 
                    "\"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\""}\
, {"\"palm_api_key\"", "\"AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI\""}, {
                    "\"confOpenAI\"", 
                    "\"{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}\""}, {"\"confPaLM\"", 
                    "\"{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}\""}, {"\"io\"", 
                    "\"<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>\""}, {
                    "\"Image\"", 
                    "\"<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>\""}, {"\"plt\"", 
                    "\"<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>\""}, {"\"show_plt\"", 
                    "\"<function show_plt at 0x11de43250>\""}, {"\"pu\"", 
                    "\"{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}\""}, {"\"fs\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}\""}, {
                    "\"rs1\"", "\"11,186 mps\""}, {"\"rs2\"", 
                    "\"11186 * u.m / u.s\""}, {"\"u\"", 
                    "\"<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>\""}, {"\"rs3\"", "\"11186.0 m / s\""}, {
                    "\"cfn\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}\""}, {
                    "\"chemRes1\"", 
                    "\"['\\\\n\\\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 \
-> 2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']\""}, {
                    "\"Substance\"", 
                    "\"<class 'chempy.chemistry.Substance'>\""}, {
                    "\"chem_component\"", 
                    "\"<function chem_component at 0x1303d1c60>\""}, {
                    "\"chem_masses_records\"", 
                    "\"<function chem_masses_records at 0x1345e67a0>\""}, {
                    "\"pres\"", 
                    "\"[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': \
'SO2', 'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 \
-> 2H2O + 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': \
'H2O', 'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', \
'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': \
'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, \
'formula': 'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': \
128.116}]]\""}, {"\"pres2\"", 
                    "\"[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]\""}, {"\"pres3\"", 
                    "\"[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]\""}, {"\"pres4\"", 
                    "\"[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]\""}, {"\"dfEqs\"", 
                    "\"                            eq side   term  factor \
formula     mass\\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S \
  68.152\\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   \
95.994\\n7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   \
36.030\\n8    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  \
128.116\\n4   FeS2 + 7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\
\\n5   FeS2 + 7O2 -> Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\\n9   \
FeS2 + 7O2 -> Fe2O3 + 2SO2  RHS  Fe2O3       1   Fe2O3  159.687\\n10  FeS2 + \
7O2 -> Fe2O3 + 2SO2  RHS   2SO2       2     SO2  128.116\\n0                S \
+ O2 -> SO2  LHS      S       1       S   32.060\\n1                S + O2 -> \
SO2  LHS     O2       1      O2   31.998\\n6                S + O2 -> SO2  \
RHS    SO2       1     SO2   64.058\""}, {"\"chem_component2\"", 
                    "\"<function chem_component2 at 0x134631ab0>\""}, {
                    "\"cfnp\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}\""}, {
                    "\"fner\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x102bd84c0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x134635cc0>}}\""}, {
                    "\"urllib\"", 
                    "\"<module 'urllib' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/urllib/__init__.\
py'>\""}, {"\"url\"", "\"https://en.wikipedia.org/wiki/Boris_Brejcha\""}, {
                    "\"f\"", 
                    "\"<http.client.HTTPResponse object at 0x134637d60>\""}, {
                    "\"text\"", 
                    "\"\\n\\nBoris Brejcha is a German electronic music \
producer and DJ, known for his unique style of minimal techno and high-energy \
live performances. He was born on November 26, 1981 in Ludwigshafen, Germany.\
\\n\\nBrejcha began his music career in 2006, releasing his first EP \
\\\"Monster\\\" on Autist Records. He gained recognition in the underground \
techno scene with his track \\\"Die Maschinen Sind Gestrandet\\\" in 2007. He \
has since released numerous EPs and albums on his own label, Fckng Serious, \
as well as on other labels such as Harthouse and Minus.\\n\\nIn addition to \
his solo work, Brejcha has collaborated with other artists such as Ann Clue \
and Deniz Bul. He has also remixed tracks for popular artists like Stephan \
Bodzin and Oliver Koletzki.\\n\\nBrejcha's live performances are known for \
their energetic and dynamic nature, often incorporating elements of visual \
art and lighting effects. He has performed at major music festivals such as \
Tomorrowland, Awakenings, and Time Warp.\\n\\nDiscography:\\n\\nAlbums:\\n- \
2007: Die Maschinen Sind Gestrandet\\n- 2010: My Name Is\\n- 2012: \
Feuerfalter Part 01\\n- 2014: Feuerfalter Part 02\\n- 2016: 22\\n- 2018: \
Space Diver\\n\\nEPs:\\n- 2006: Monster\\n- 2007: Outer Space\\n- 2008: Mein \
Wahres Ich\\n- 2009: Die Milchstrasse\\n- 2010: Die Maschinen Kontrollieren \
Uns\\n- 2011: Lost Memory\\n- 2012: That's the Funky Shit\\n- 2013: Everybody \
Wants to Go to Heaven\\n- 2014: R U FCKNG SERIOUS?\\n- 2015: Hashtag\\n- \
2016: DJ Mixes Single Tracks\\n- 2017: Bleeding Heart\\n- 2018: Devil\\n- \
2019: Space Diver Remixes\\n- 2020: Violet Pill\""}, {"\"albRes\"", 
                    "\"['\\\\n\\\\n', {'albums': [{'name': 'Die Maschinen \
Sind Gestrandet', 'year': 2007}, {'name': 'My Name Is', 'year': 2010}, \
{'name': 'Feuerfalter Part 01', 'year': 2012}, {'name': 'Feuerfalter Part \
02', 'year': 2014}, {'name': '22', 'year': 2016}, {'name': 'Space Diver', \
'year': 2018}]}, '']\""}, {"\"albRes2\"", 
                    "\"[{'albums': [{'name': 'Die Maschinen Sind Gestrandet', \
'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': 'Feuerfalter \
Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': 2014}, \
{'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}]\""}, {
                    "\"dfDiscography\"", 
                    "\"                                              \
albums\\n0  [{'name': 'Die Maschinen Sind Gestrandet', 'ye...\""}, {
                    "\"fjp\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x134631f30>', 'llm_evaluator': {'conf': None, 'formatron': None}}\""}, {
                    "\"codeRes\"", 
                    "\"\\n\\nimport matplotlib.pyplot as plt\\nimport json\\n\
\\n# Load JSON data\\ndata = '{\\\"albums\\\": {\\\"0\\\": [{\\\"name\\\": \\\
\"Die Maschinen Sind Gestrandet\\\", \\\"year\\\": 2007}, {\\\"name\\\": \
\\\"My Name Is\\\", \\\"year\\\": 2010}, {\\\"name\\\": \\\"Feuerfalter Part \
01\\\", \\\"year\\\": 2012}, {\\\"name\\\": \\\"Feuerfalter Part 02\\\", \
\\\"year\\\": 2014}, {\\\"name\\\": \\\"22\\\", \\\"year\\\": 2016}, \
{\\\"name\\\": \\\"Space Diver\\\", \\\"year\\\": 2018}]}}'\\ndata = \
json.loads(data)\\n\\n# Extract album names and years\\nalbums = \
data['albums']['0']\\nnames = [album['name'] for album in albums]\\nyears = \
[album['year'] for album in albums]\\n\\n# Create time line \
plot\\nplt.plot(years, names)\\nplt.xlabel('Year')\\nplt.ylabel('Album Name')\
\\nplt.title('Album Release Timeline')\\nplt.show()\""}, {"\"fdb\"", 
                    "\"{'type': 'functor', 'prompt': '<function <lambda> at \
0x134632440>', 'llm_evaluator': {'conf': None, 'formatron': None}}\""}, {
                    "\"dbRes\"", "\"[]\""}, {"\"artistNames\"", 
                    "\"['\\\\n\\\\n[\\\\n  \\\"Taylor Swift\\\",\\\\n  \
\\\"Kendrick Lamar\\\",\\\\n  \\\"Ariana Grande\\\",\\\\n  \\\"Ed \
Sheeran\\\",\\\\n  \\\"Beyonce\\\",\\\\n  \\\"Drake\\\",\\\\n  \
\\\"Rihanna\\\",\\\\n  \\\"The Weeknd\\\",\\\\n  \\\"Post Malone\\\",\\\\n  \
\\\"Billie Eilish\\\"\\\\n]']\""}, {"\"artistNames2\"", "\"[]\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"Configuration", 
                    "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {"SubParser", 
                    "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                    "Evaluator", 
                    "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                    "EvaluatorChat", 
                    "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {"EvaluatorChatGPT", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                    "EvaluatorChatPaLM", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                    "Functor", 
                    "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                    "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                    "LLMFunctions", 
                    "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {"llm_configuration", 
                    "<function llm_configuration at 0x104799990>"}, {
                    "llm_evaluator", 
                    "<function llm_evaluator at 0x104799a20>"}, {
                    "llm_example_function", 
                    "<function llm_example_function at 0x104799b40>"}, {
                    "llm_function", 
                    "<function llm_function at 0x104799ab0>"}, {
                    "llm_synthesize", 
                    "<function llm_synthesize at 0x104799bd0>"}, {
                    "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                    "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                    "exact_parser", 
                    "<function exact_parser at 0x101dc0160>"}, {
                    "catch_by_pattern", 
                    "<function catch_by_pattern at 0x101d53400>"}, {
                    "extract_json_objects", 
                    "<function extract_json_objects at 0x101d53880>"}, {
                    "jsonify_text", 
                    "<function jsonify_text at 0x101dc0040>"}, {
                    "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                    "Predicates", 
                    "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {"TypeClasses", 
                    "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {"Examiner", 
                    "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {"TypeSystem", 
                    "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {"deduce_type", 
                    "<function deduce_type at 0x104799ea0>"}, {
                    "is_reshapable", 
                    "<function is_reshapable at 0x104799e10>"}, {
                    "record_types", 
                    "<function record_types at 0x104799f30>"}, {
                    "DataTypeSystem", 
                    "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {"json", 
                    "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                    "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {"re", 
                    "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                    "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                    "samples", "[]"}, {"home", "/Users/antonov"}, {
                    "myfile", 
                    "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {"line", 
                    "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                    "match", "None"}, {"openai_api_key", 
                    "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"}, {
                    "palm_api_key", 
                    "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                    "confOpenAI", 
                    "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {"confPaLM", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {"io", 
                    "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                    "Image", 
                    "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                    "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {"show_plt", 
                    "<function show_plt at 0x11de43250>"}, {
                    "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {"fs", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                    "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                    "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                    "chemRes1", 
                    "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                    "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                    "chem_component", 
                    "<function chem_component at 0x1303d1c60>"}, {
                    "chem_masses_records", 
                    "<function chem_masses_records at 0x1345e67a0>"}, {
                    "pres", 
                    "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                    "pres2", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {"pres3", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "pres4", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "dfEqs", 
                    "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                    "<function chem_component2 at 0x134631ab0>"}, {
                    "cfnp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}, {
                    "fner", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x102bd84c0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x134635cc0>}}"}, {
                    "urllib", 
                    "<module 'urllib' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/urllib/__init__.\
py'>"}, {"url", "https://en.wikipedia.org/wiki/Boris_Brejcha"}, {
                    "f", "<http.client.HTTPResponse object at 0x134637d60>"}, \
{"text", "\n\nBoris Brejcha is a German electronic music producer and DJ, \
known for his unique style of minimal techno and high-energy live \
performances. He was born on November 26, 1981 in Ludwigshafen, Germany.\n\n\
Brejcha began his music career in 2006, releasing his first EP \"Monster\" on \
Autist Records. He gained recognition in the underground techno scene with \
his track \"Die Maschinen Sind Gestrandet\" in 2007. He has since released \
numerous EPs and albums on his own label, Fckng Serious, as well as on other \
labels such as Harthouse and Minus.\n\nIn addition to his solo work, Brejcha \
has collaborated with other artists such as Ann Clue and Deniz Bul. He has \
also remixed tracks for popular artists like Stephan Bodzin and Oliver \
Koletzki.\n\nBrejcha's live performances are known for their energetic and \
dynamic nature, often incorporating elements of visual art and lighting \
effects. He has performed at major music festivals such as Tomorrowland, \
Awakenings, and Time Warp.\n\nDiscography:\n\nAlbums:\n- 2007: Die Maschinen \
Sind Gestrandet\n- 2010: My Name Is\n- 2012: Feuerfalter Part 01\n- 2014: \
Feuerfalter Part 02\n- 2016: 22\n- 2018: Space Diver\n\nEPs:\n- 2006: Monster\
\n- 2007: Outer Space\n- 2008: Mein Wahres Ich\n- 2009: Die Milchstrasse\n- \
2010: Die Maschinen Kontrollieren Uns\n- 2011: Lost Memory\n- 2012: That's \
the Funky Shit\n- 2013: Everybody Wants to Go to Heaven\n- 2014: R U FCKNG \
SERIOUS?\n- 2015: Hashtag\n- 2016: DJ Mixes Single Tracks\n- 2017: Bleeding \
Heart\n- 2018: Devil\n- 2019: Space Diver Remixes\n- 2020: Violet Pill"}, {
                    "albRes", 
                    "['\\n\\n', {'albums': [{'name': 'Die Maschinen Sind \
Gestrandet', 'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': \
'Feuerfalter Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': \
2014}, {'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}, \
'']"}, {"albRes2", 
                    "[{'albums': [{'name': 'Die Maschinen Sind Gestrandet', \
'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': 'Feuerfalter \
Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': 2014}, \
{'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}]"}, {
                    "dfDiscography", 
                    "                                              albums\n0  \
[{'name': 'Die Maschinen Sind Gestrandet', 'ye..."}, {"fjp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x134631f30>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "codeRes", 
                    "\n\nimport matplotlib.pyplot as plt\nimport json\n\n# \
Load JSON data\ndata = '{\"albums\": {\"0\": [{\"name\": \"Die Maschinen Sind \
Gestrandet\", \"year\": 2007}, {\"name\": \"My Name Is\", \"year\": 2010}, \
{\"name\": \"Feuerfalter Part 01\", \"year\": 2012}, {\"name\": \"Feuerfalter \
Part 02\", \"year\": 2014}, {\"name\": \"22\", \"year\": 2016}, {\"name\": \
\"Space Diver\", \"year\": 2018}]}}'\ndata = json.loads(data)\n\n# Extract \
album names and years\nalbums = data['albums']['0']\nnames = [album['name'] \
for album in albums]\nyears = [album['year'] for album in albums]\n\n# Create \
time line plot\nplt.plot(years, names)\nplt.xlabel('Year')\nplt.ylabel('Album \
Name')\nplt.title('Album Release Timeline')\nplt.show()"}, {
                    "fdb", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x134632440>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "dbRes", "[]"}, {"artistNames", 
                    "['\\n\\n[\\n  \"Taylor Swift\",\\n  \"Kendrick \
Lamar\",\\n  \"Ariana Grande\",\\n  \"Ed Sheeran\",\\n  \"Beyonce\",\\n  \
\"Drake\",\\n  \"Rihanna\",\\n  \"The Weeknd\",\\n  \"Post Malone\",\\n  \
\"Billie Eilish\"\\n]']"}, {"artistNames2", "[]"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item[
                    "   1.  artistNames = llm_function('',e=confPaLM)(\"Give \
10 random music artist names in a list in JSON format.\", ", Background -> 
                    LightYellow], 
                    "   2.                                          form = \
sub_parser('JSON'))", "   3.  artistNames"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"Configuration", 
                    "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {
                    "SubParser", 
                    "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                    "Evaluator", 
                    "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                    "EvaluatorChat", 
                    "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {
                    "EvaluatorChatGPT", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                    "EvaluatorChatPaLM", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                    "Functor", 
                    "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                    "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                    "LLMFunctions", 
                    "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {"llm_configuration", 
                    "<function llm_configuration at 0x104799990>"}, {
                    "llm_evaluator", 
                    "<function llm_evaluator at 0x104799a20>"}, {
                    "llm_example_function", 
                    "<function llm_example_function at 0x104799b40>"}, {
                    "llm_function", 
                    "<function llm_function at 0x104799ab0>"}, {
                    "llm_synthesize", 
                    "<function llm_synthesize at 0x104799bd0>"}, {
                    "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                    "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                    "exact_parser", 
                    "<function exact_parser at 0x101dc0160>"}, {
                    "catch_by_pattern", 
                    "<function catch_by_pattern at 0x101d53400>"}, {
                    "extract_json_objects", 
                    "<function extract_json_objects at 0x101d53880>"}, {
                    "jsonify_text", 
                    "<function jsonify_text at 0x101dc0040>"}, {
                    "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                    "Predicates", 
                    "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {"TypeClasses", 
                    "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {"Examiner", 
                    "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {"TypeSystem", 
                    "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {"deduce_type", 
                    "<function deduce_type at 0x104799ea0>"}, {
                    "is_reshapable", 
                    "<function is_reshapable at 0x104799e10>"}, {
                    "record_types", 
                    "<function record_types at 0x104799f30>"}, {
                    "DataTypeSystem", 
                    "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {"json", 
                    "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                    "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {"re", 
                    "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                    "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                    "samples", "[]"}, {"home", "/Users/antonov"}, {
                    "myfile", 
                    "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {"line", 
                    "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                    "match", "None"}, {"openai_api_key", 
                    "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"}, {
                    "palm_api_key", 
                    "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                    "confOpenAI", 
                    "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {"confPaLM", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {
                    "io", "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                    "Image", 
                    "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                    "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {"show_plt", 
                    "<function show_plt at 0x11de43250>"}, {
                    "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {"fs", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                    "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                    "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                    "chemRes1", 
                    "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                    "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                    "chem_component", 
                    "<function chem_component at 0x1303d1c60>"}, {
                    "chem_masses_records", 
                    "<function chem_masses_records at 0x1345e67a0>"}, {
                    "pres", 
                    "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                    "pres2", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {"pres3", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "pres4", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "dfEqs", 
                    "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                    "<function chem_component2 at 0x134631ab0>"}, {
                    "cfnp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}, {
                    "fner", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x102bd84c0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x134635cc0>}}"}, {
                    "urllib", 
                    "<module 'urllib' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/urllib/__init__.\
py'>"}, {"url", "https://en.wikipedia.org/wiki/Boris_Brejcha"}, {
                    "f", "<http.client.HTTPResponse object at 0x134637d60>"}, \
{"text", "\n\nBoris Brejcha is a German electronic music producer and DJ, \
known for his unique style of minimal techno and high-energy live \
performances. He was born on November 26, 1981 in Ludwigshafen, Germany.\n\n\
Brejcha began his music career in 2006, releasing his first EP \"Monster\" on \
Autist Records. He gained recognition in the underground techno scene with \
his track \"Die Maschinen Sind Gestrandet\" in 2007. He has since released \
numerous EPs and albums on his own label, Fckng Serious, as well as on other \
labels such as Harthouse and Minus.\n\nIn addition to his solo work, Brejcha \
has collaborated with other artists such as Ann Clue and Deniz Bul. He has \
also remixed tracks for popular artists like Stephan Bodzin and Oliver \
Koletzki.\n\nBrejcha's live performances are known for their energetic and \
dynamic nature, often incorporating elements of visual art and lighting \
effects. He has performed at major music festivals such as Tomorrowland, \
Awakenings, and Time Warp.\n\nDiscography:\n\nAlbums:\n- 2007: Die Maschinen \
Sind Gestrandet\n- 2010: My Name Is\n- 2012: Feuerfalter Part 01\n- 2014: \
Feuerfalter Part 02\n- 2016: 22\n- 2018: Space Diver\n\nEPs:\n- 2006: Monster\
\n- 2007: Outer Space\n- 2008: Mein Wahres Ich\n- 2009: Die Milchstrasse\n- \
2010: Die Maschinen Kontrollieren Uns\n- 2011: Lost Memory\n- 2012: That's \
the Funky Shit\n- 2013: Everybody Wants to Go to Heaven\n- 2014: R U FCKNG \
SERIOUS?\n- 2015: Hashtag\n- 2016: DJ Mixes Single Tracks\n- 2017: Bleeding \
Heart\n- 2018: Devil\n- 2019: Space Diver Remixes\n- 2020: Violet Pill"}, {
                    "albRes", 
                    "['\\n\\n', {'albums': [{'name': 'Die Maschinen Sind \
Gestrandet', 'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': \
'Feuerfalter Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': \
2014}, {'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}, \
'']"}, {"albRes2", 
                    "[{'albums': [{'name': 'Die Maschinen Sind Gestrandet', \
'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': 'Feuerfalter \
Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': 2014}, \
{'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}]"}, {
                    "dfDiscography", 
                    "                                              albums\n0  \
[{'name': 'Die Maschinen Sind Gestrandet', 'ye..."}, {
                    "fjp", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x134631f30>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "codeRes", 
                    "\n\nimport matplotlib.pyplot as plt\nimport json\n\n# \
Load JSON data\ndata = '{\"albums\": {\"0\": [{\"name\": \"Die Maschinen Sind \
Gestrandet\", \"year\": 2007}, {\"name\": \"My Name Is\", \"year\": 2010}, \
{\"name\": \"Feuerfalter Part 01\", \"year\": 2012}, {\"name\": \"Feuerfalter \
Part 02\", \"year\": 2014}, {\"name\": \"22\", \"year\": 2016}, {\"name\": \
\"Space Diver\", \"year\": 2018}]}}'\ndata = json.loads(data)\n\n# Extract \
album names and years\nalbums = data['albums']['0']\nnames = [album['name'] \
for album in albums]\nyears = [album['year'] for album in albums]\n\n# Create \
time line plot\nplt.plot(years, names)\nplt.xlabel('Year')\nplt.ylabel('Album \
Name')\nplt.title('Album Release Timeline')\nplt.show()"}, {
                    "fdb", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x134632440>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "dbRes", "[]"}, {"artistNames", 
                    "['\\n\\n[\\n  \"Taylor Swift\",\\n  \"Kendrick \
Lamar\",\\n  \"Ariana Grande\",\\n  \"Ed Sheeran\",\\n  \"Beyonce\",\\n  \
\"Drake\",\\n  \"Rihanna\",\\n  \"The Weeknd\",\\n  \"Post Malone\",\\n  \
\"Billie Eilish\"\\n]']"}, {"artistNames2", "[]"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Functor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"__call__\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Functor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"__call__\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  25.  \""}, {
                    "\"  26.          res = ''\""}, {
                    "\"  27.          if isinstance(self.prompt, str):\""}, {
                    "\"  28.  \""}, {
                    "\"  29.              args2 = [self.prompt, ] + \
list(args)\""}, {"\"  30.  \""}, {"\"  31.              # LLM evaluate\""}, {
                    ItemBox[
                    "\"  32.              res = llmEvaluatorLocal.eval(args2, \
**dargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  33.  \""}, {
                    "\"  34.          elif callable(self.prompt):\""}, {
                    "\"  35.  \""}, {
                    "\"  36.              # Filter the prompt function\""}, {
                    "\"  37.              dargs2 = dict(filter(lambda x: x[0] \
in self.args, dargs.items()))\""}, {"\"  38.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"args\"", 
                    "\"('Give 10 random music artist names in a list in JSON \
format.',)\""}, {"\"dargs\"", 
                    "\"{'form': <LLMFunctionObjects.SubParser.SubParser \
object at 0x1306d8a00>}\""}, {"\"llmEvaluatorLocal\"", 
                    "\"{'conf': None, 'formatron': None}\""}, {"\"res\"", 
                    "\"\""}, {"\"args2\"", 
                    "\"['', 'Give 10 random music artist names in a list in \
JSON format.']\""}, {"\"self\"", 
                    "\"{'type': 'functor', 'prompt': \\\"''\\\", \
'llm_evaluator': {'conf': None, 'formatron': None}}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "('Give 10 random music artist names in a list in JSON \
format.',)"}, {"dargs", 
                    "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {"llmEvaluatorLocal", 
                    "{'conf': None, 'formatron': None}"}, {"res", ""}, {
                    "args2", 
                    "['', 'Give 10 random music artist names in a list in \
JSON format.']"}, {"self", 
                    "{'type': 'functor', 'prompt': \"''\", 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless"],
                     " in ", "__call__"}], 
                    Column[{
                    
                    Column[{"  25.  ", "  26.          res = ''", 
                    "  27.          if isinstance(self.prompt, str):", 
                    "  28.  ", 
                    "  29.              args2 = [self.prompt, ] + list(args)",
                     "  30.  ", "  31.              # LLM evaluate", 
                    Item[
                    "  32.              res = llmEvaluatorLocal.eval(args2, \
**dargs)", Background -> LightYellow], "  33.  ", 
                    "  34.          elif callable(self.prompt):", "  35.  ", 
                    "  36.              # Filter the prompt function", 
                    "  37.              dargs2 = dict(filter(lambda x: x[0] \
in self.args, dargs.items()))", "  38.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"args", 
                    "('Give 10 random music artist names in a list in JSON \
format.',)"}, {"dargs", 
                    "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {"llmEvaluatorLocal", 
                    "{'conf': None, 'formatron': None}"}, {"res", ""}, {
                    "args2", 
                    "['', 'Give 10 random music artist names in a list in \
JSON format.']"}, {"self", 
                    "{'type': 'functor', 'prompt': \"''\", 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Evaluator.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"eval\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/LLMFunctionObjects/Evaluator.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"eval\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 105.  \""}, {
                    "\" 106.          # Invoke the LLM function\""}, {
                    "\" 107.          args2[\\\"prompt\\\"] = messages\""}, {
                    "\" 108.          args2[\\\"messages\\\"] = messages\""}, \
{"\" 109.  \""}, {
                    "\" 110.          args2 = dict(filter(lambda x: x[0] in \
self.conf.known_params, args2.items()))\""}, {"\" 111.  \""}, {
                    ItemBox[
                    "\" 112.          res = self.conf.function(**args2)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 113.  \""}, {
                    "\" 114.          if echo:\""}, {
                    "\" 115.              print(f'LLM result: {res}')\""}, {
                    "\" 116.  \""}, {
                    "\" 117.          # Same LLM result\""}, {
                    "\" 118.          self.llm_result = res\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"texts\"", 
                    "\"['', 'Give 10 random music artist names in a list in \
JSON format.']\""}, {"\"args\"", 
                    "\"{'form': <LLMFunctionObjects.SubParser.SubParser \
object at 0x1306d8a00>}\""}, {"\"confDict\"", 
                    "\"{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}\""}, {"\"echo\"", 
                    "\"False\""}, {"\"args2\"", 
                    "\"{'model': 'models/text-bison-001', 'temperature': 0.2, \
'prompt': '  Give 10 random music artist names in a list in JSON \
format.'}\""}, {"\"fullPrompt\"", "\"\""}, {"\"messages\"", 
                    "\"  Give 10 random music artist names in a list in JSON \
format.\""}, {"\"self\"", "\"{'conf': None, 'formatron': None}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"texts", 
                    "['', 'Give 10 random music artist names in a list in \
JSON format.']"}, {"args", 
                    "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {"confDict", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {"echo", "False"}, {
                    "args2", 
                    "{'model': 'models/text-bison-001', 'temperature': 0.2, \
'prompt': '  Give 10 random music artist names in a list in JSON format.'}"}, \
{"fullPrompt", ""}, {"messages", 
                    "  Give 10 random music artist names in a list in JSON \
format."}, {"self", "{'conf': None, 'formatron': None}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless"], " in ", "eval"}], 
                    Column[{
                    
                    Column[{" 105.  ", 
                    " 106.          # Invoke the LLM function", 
                    " 107.          args2[\"prompt\"] = messages", 
                    " 108.          args2[\"messages\"] = messages", 
                    " 109.  ", 
                    " 110.          args2 = dict(filter(lambda x: x[0] in \
self.conf.known_params, args2.items()))", " 111.  ", 
                    Item[
                    " 112.          res = self.conf.function(**args2)", 
                    Background -> LightYellow], " 113.  ", 
                    " 114.          if echo:", 
                    " 115.              print(f'LLM result: {res}')", 
                    " 116.  ", " 117.          # Same LLM result", 
                    " 118.          self.llm_result = res"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"texts", 
                    "['', 'Give 10 random music artist names in a list in \
JSON format.']"}, {"args", 
                    "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {"confDict", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {"echo", "False"}, {
                    "args2", 
                    "{'model': 'models/text-bison-001', 'temperature': 0.2, \
'prompt': '  Give 10 random music artist names in a list in JSON format.'}"}, \
{"fullPrompt", ""}, {"messages", 
                    "  Give 10 random music artist names in a list in JSON \
format."}, {"self", "{'conf': None, 'formatron': None}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/generativeai/text.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"generate_text\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/generativeai/text.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"generate_text\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 132.          \
max_output_tokens=max_output_tokens,\""}, {
                    "\" 133.          top_p=top_p,\""}, {
                    "\" 134.          top_k=top_k,\""}, {
                    "\" 135.          safety_settings=safety_settings,\""}, {
                    "\" 136.          stop_sequences=stop_sequences,\""}, {
                    "\" 137.      )\""}, {"\" 138.  \""}, {
                    ItemBox[
                    "\" 139.      return _generate_response(client=client, \
request=request)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 140.  \""}, {"\" 141.  \""}, {
                    "\" 142.  @dataclasses.dataclass(init=False)\""}, {
                    "\" 143.  class Completion(text_types.Completion):\""}, {
                    "\" 144.      def __init__(self, **kwargs):\""}, {
                    "\" 145.          for key, value in kwargs.items():\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"model\"", 
                    "\"models/text-bison-001\""}, {"\"prompt\"", 
                    "\"  Give 10 random music artist names in a list in JSON \
format.\""}, {"\"temperature\"", "\"0.2\""}, {"\"candidate_count\"", 
                    "\"None\""}, {"\"max_output_tokens\"", "\"None\""}, {
                    "\"top_p\"", "\"None\""}, {"\"top_k\"", "\"None\""}, {
                    "\"safety_settings\"", "\"None\""}, {"\"stop_sequences\"",
                     "\"None\""}, {"\"client\"", "\"None\""}, {"\"request\"", 
                    "\"model: \\\"models/text-bison-001\\\"\\nprompt {\\n  \
text: \\\"  Give 10 random music artist names in a list in JSON \
format.\\\"\\n}\\ntemperature: 0.2\\n\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"model", 
                    "models/text-bison-001"}, {"prompt", 
                    "  Give 10 random music artist names in a list in JSON \
format."}, {"temperature", "0.2"}, {"candidate_count", "None"}, {
                    "max_output_tokens", "None"}, {"top_p", "None"}, {
                    "top_k", "None"}, {"safety_settings", "None"}, {
                    "stop_sequences", "None"}, {"client", "None"}, {
                    "request", 
                    "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless"], 
                    " in ", "generate_text"}], 
                    Column[{
                    
                    Column[{
                    " 132.          max_output_tokens=max_output_tokens,", 
                    " 133.          top_p=top_p,", 
                    " 134.          top_k=top_k,", 
                    " 135.          safety_settings=safety_settings,", 
                    " 136.          stop_sequences=stop_sequences,", 
                    " 137.      )", " 138.  ", 
                    Item[
                    " 139.      return _generate_response(client=client, \
request=request)", Background -> LightYellow], " 140.  ", " 141.  ", 
                    " 142.  @dataclasses.dataclass(init=False)", 
                    " 143.  class Completion(text_types.Completion):", 
                    " 144.      def __init__(self, **kwargs):", 
                    " 145.          for key, value in kwargs.items():"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"model", 
                    "models/text-bison-001"}, {
                    "prompt", 
                    "  Give 10 random music artist names in a list in JSON \
format."}, {"temperature", "0.2"}, {"candidate_count", "None"}, {
                    "max_output_tokens", "None"}, {"top_p", "None"}, {
                    "top_k", "None"}, {"safety_settings", "None"}, {
                    "stop_sequences", "None"}, {"client", "None"}, {
                    "request", 
                    "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/generativeai/text.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"_generate_response\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/generativeai/text.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"_generate_response\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 150.              self.result = self.candidates[0][\\\
\"output\\\"]\""}, {"\" 151.  \""}, {"\" 152.  \""}, {
                    "\" 153.  def _generate_response(\""}, {
                    "\" 154.      request: glm.GenerateTextRequest, client: \
glm.TextServiceClient = None\""}, {"\" 155.  ) -> Completion:\""}, {
                    "\" 156.      if client is None:\""}, {
                    ItemBox[
                    "\" 157.          client = get_default_text_client()\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 158.  \""}, {
                    "\" 159.      response = \
client.generate_text(request)\""}, {
                    "\" 160.      response = type(response).to_dict(response)\
\""}, {"\" 161.  \""}, {
                    "\" 162.      response[\\\"filters\\\"] = \
safety_types.convert_filters_to_enums(response[\\\"filters\\\"])\""}, {
                    "\" 163.      response[\\\"safety_feedback\\\"] = \
safety_types.convert_safety_feedback_to_enums(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"request\"", 
                    "\"model: \\\"models/text-bison-001\\\"\\nprompt {\\n  \
text: \\\"  Give 10 random music artist names in a list in JSON \
format.\\\"\\n}\\ntemperature: 0.2\\n\""}, {"\"client\"", "\"None\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"request", 
                    "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}, {"client", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless"], 
                    " in ", "_generate_response"}], 
                    Column[{
                    
                    Column[{
                    " 150.              self.result = \
self.candidates[0][\"output\"]", " 151.  ", " 152.  ", 
                    " 153.  def _generate_response(", 
                    " 154.      request: glm.GenerateTextRequest, client: \
glm.TextServiceClient = None", " 155.  ) -> Completion:", 
                    " 156.      if client is None:", 
                    Item[
                    " 157.          client = get_default_text_client()", 
                    Background -> LightYellow], " 158.  ", 
                    " 159.      response = client.generate_text(request)", 
                    " 160.      response = type(response).to_dict(response)", 
                    " 161.  ", 
                    " 162.      response[\"filters\"] = \
safety_types.convert_filters_to_enums(response[\"filters\"])", 
                    " 163.      response[\"safety_feedback\"] = \
safety_types.convert_safety_feedback_to_enums("}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"request", 
                    "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}, {"client", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/generativeai/client.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"get_default_text_client\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/generativeai/client.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"get_default_text_client\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 126.  \""}, {
                    "\" 127.  def get_default_text_client():\""}, {
                    "\" 128.      global default_text_client\""}, {
                    "\" 129.      if default_text_client is None:\""}, {
                    "\" 130.          # Attempt to configure using \
defaults.\""}, {"\" 131.          if not default_client_config:\""}, {
                    "\" 132.              configure()\""}, {
                    ItemBox[
                    "\" 133.          default_text_client = \
glm.TextServiceClient(**default_client_config)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 134.  \""}, {
                    "\" 135.      return default_text_client\""}, {
                    "\" 136.  \""}, {"\" 137.  \""}, {
                    "\" 138.  def get_default_discuss_async_client() -> \
glm.DiscussServiceAsyncClient:\""}, {
                    "\" 139.      global default_discuss_async_client\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"\"No local variables\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"]], Appearance -> "Frameless"],
                     " in ", "get_default_text_client"}], 
                    Column[{
                    
                    Column[{" 126.  ", 
                    " 127.  def get_default_text_client():", 
                    " 128.      global default_text_client", 
                    " 129.      if default_text_client is None:", 
                    " 130.          # Attempt to configure using defaults.", 
                    " 131.          if not default_client_config:", 
                    " 132.              configure()", 
                    Item[
                    " 133.          default_text_client = \
glm.TextServiceClient(**default_client_config)", Background -> LightYellow], 
                    " 134.  ", " 135.      return default_text_client", 
                    " 136.  ", " 137.  ", 
                    " 138.  def get_default_discuss_async_client() -> \
glm.DiscussServiceAsyncClient:", 
                    " 139.      global default_discuss_async_client"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    "No local variables"}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/ai/generativelanguage_v1beta2/services/text_\
service/client.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/ai/generativelanguage_v1beta2/services/text_\
service/client.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 421.                  google.auth._default, \
\\\"get_api_key_credentials\\\"\""}, {"\" 422.              ):\""}, {
                    "\" 423.                  credentials = \
google.auth._default.get_api_key_credentials(\""}, {
                    "\" 424.                      api_key_value\""}, {
                    "\" 425.                  )\""}, {"\" 426.  \""}, {
                    "\" 427.              Transport = \
type(self).get_transport_class(transport)\""}, {
                    ItemBox[
                    "\" 428.              self._transport = Transport(\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\" 429.                  credentials=credentials,\""}, {
                    "\" 430.                  \
credentials_file=client_options.credentials_file,\""}, {
                    "\" 431.                  host=api_endpoint,\""}, {
                    "\" 432.                  \
scopes=client_options.scopes,\""}, {
                    "\" 433.                  \
client_cert_source_for_mtls=client_cert_source_func,\""}, {
                    "\" 434.                  \
quota_project_id=client_options.quota_project_id,\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<google.ai.generativelanguage_v1beta2.services.text_\
service.client.TextServiceClient object at 0x134635330>\""}, {
                    "\"credentials\"", "\"None\""}, {"\"transport\"", 
                    "\"None\""}, {"\"client_options\"", 
                    "\"ClientOptions: {'api_endpoint': None, \
'client_cert_source': None, 'client_encrypted_cert_source': None, \
'quota_project_id': None, 'credentials_file': None, 'scopes': None, \
'api_key': None, 'api_audience': None}\""}, {"\"client_info\"", 
                    "\"<google.api_core.gapic_v1.client_info.ClientInfo \
object at 0x134657400>\""}, {"\"api_endpoint\"", 
                    "\"generativelanguage.googleapis.com\""}, {
                    "\"client_cert_source_func\"", "\"None\""}, {
                    "\"api_key_value\"", "\"None\""}, {"\"google\"", 
                    "\"<module 'google' \
(<_frozen_importlib_external._NamespaceLoader object at 0x100fad8a0>)>\""}, {
                    "\"Transport\"", 
                    "\"<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.client.TextServiceClient object at 0x134635330>"}, {
                    "credentials", "None"}, {"transport", "None"}, {
                    "client_options", 
                    "ClientOptions: {'api_endpoint': None, \
'client_cert_source': None, 'client_encrypted_cert_source': None, \
'quota_project_id': None, 'credentials_file': None, 'scopes': None, \
'api_key': None, 'api_audience': None}"}, {"client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"api_endpoint", "generativelanguage.googleapis.com"}, {
                    "client_cert_source_func", "None"}, {"api_key_value", 
                    "None"}, {"google", 
                    "<module 'google' \
(<_frozen_importlib_external._NamespaceLoader object at 0x100fad8a0>)>"}, {
                    "Transport", 
                    "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{
                    " 421.                  google.auth._default, \
\"get_api_key_credentials\"", " 422.              ):", 
                    " 423.                  credentials = \
google.auth._default.get_api_key_credentials(", 
                    " 424.                      api_key_value", 
                    " 425.                  )", " 426.  ", 
                    " 427.              Transport = \
type(self).get_transport_class(transport)", 
                    Item[
                    " 428.              self._transport = Transport(", 
                    Background -> LightYellow], 
                    " 429.                  credentials=credentials,", 
                    " 430.                  \
credentials_file=client_options.credentials_file,", 
                    " 431.                  host=api_endpoint,", 
                    " 432.                  scopes=client_options.scopes,", 
                    " 433.                  \
client_cert_source_for_mtls=client_cert_source_func,", 
                    " 434.                  \
quota_project_id=client_options.quota_project_id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.client.TextServiceClient object at 0x134635330>"}, {
                    "credentials", "None"}, {"transport", "None"}, {
                    "client_options", 
                    "ClientOptions: {'api_endpoint': None, \
'client_cert_source': None, 'client_encrypted_cert_source': None, \
'quota_project_id': None, 'credentials_file': None, 'scopes': None, \
'api_key': None, 'api_audience': None}"}, {"client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"api_endpoint", "generativelanguage.googleapis.com"}, {
                    "client_cert_source_func", "None"}, {
                    "api_key_value", "None"}, {
                    "google", 
                    "<module 'google' \
(<_frozen_importlib_external._NamespaceLoader object at 0x100fad8a0>)>"}, {
                    "Transport", 
                    "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/ai/generativelanguage_v1beta2/services/text_\
service/transports/grpc.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/ai/generativelanguage_v1beta2/services/text_\
service/transports/grpc.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 144.                  if client_cert_source_for_mtls \
and not ssl_channel_credentials:\""}, {
                    "\" 145.                      cert, key = \
client_cert_source_for_mtls()\""}, {
                    "\" 146.                      \
self._ssl_channel_credentials = grpc.ssl_channel_credentials(\""}, {
                    "\" 147.                          certificate_chain=cert, \
private_key=key\""}, {"\" 148.                      )\""}, {"\" 149.  \""}, {
                    "\" 150.          # The base transport sets the host, \
credentials and scopes\""}, {
                    ItemBox[
                    "\" 151.          super().__init__(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 152.              host=host,\""}, {
                    "\" 153.              credentials=credentials,\""}, {
                    "\" 154.              \
credentials_file=credentials_file,\""}, {
                    "\" 155.              scopes=scopes,\""}, {
                    "\" 156.              \
quota_project_id=quota_project_id,\""}, {
                    "\" 157.              client_info=client_info,\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>\""}, {
                    "\"host\"", "\"generativelanguage.googleapis.com\""}, {
                    "\"credentials\"", "\"None\""}, {"\"credentials_file\"", 
                    "\"None\""}, {"\"scopes\"", "\"None\""}, {"\"channel\"", 
                    "\"None\""}, {"\"api_mtls_endpoint\"", "\"None\""}, {
                    "\"client_cert_source\"", 
                    "\"None\""}, {"\"ssl_channel_credentials\"", 
                    "\"None\""}, {"\"client_cert_source_for_mtls\"", 
                    "\"None\""}, {"\"quota_project_id\"", "\"None\""}, {
                    "\"client_info\"", 
                    "\"<google.api_core.gapic_v1.client_info.ClientInfo \
object at 0x134657400>\""}, {"\"always_use_jwt_access\"", "\"True\""}, {
                    "\"api_audience\"", "\"None\""}, {"\"__class__\"", 
                    "\"<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                    "host", "generativelanguage.googleapis.com"}, {
                    "credentials", "None"}, {"credentials_file", "None"}, {
                    "scopes", "None"}, {"channel", "None"}, {
                    "api_mtls_endpoint", "None"}, {"client_cert_source", 
                    "None"}, {"ssl_channel_credentials", "None"}, {
                    "client_cert_source_for_mtls", "None"}, {
                    "quota_project_id", "None"}, {"client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {"api_audience", 
                    "None"}, {"__class__", 
                    "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{
                    " 144.                  if client_cert_source_for_mtls \
and not ssl_channel_credentials:", 
                    " 145.                      cert, key = \
client_cert_source_for_mtls()", 
                    " 146.                      self._ssl_channel_credentials \
= grpc.ssl_channel_credentials(", 
                    " 147.                          certificate_chain=cert, \
private_key=key", " 148.                      )", " 149.  ", 
                    " 150.          # The base transport sets the host, \
credentials and scopes", 
                    Item[
                    " 151.          super().__init__(", Background -> 
                    LightYellow], " 152.              host=host,", 
                    " 153.              credentials=credentials,", 
                    " 154.              credentials_file=credentials_file,", 
                    " 155.              scopes=scopes,", 
                    " 156.              quota_project_id=quota_project_id,", 
                    " 157.              client_info=client_info,"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                    "host", "generativelanguage.googleapis.com"}, {
                    "credentials", "None"}, {"credentials_file", "None"}, {
                    "scopes", "None"}, {"channel", "None"}, {
                    "api_mtls_endpoint", "None"}, {
                    "client_cert_source", "None"}, {
                    "ssl_channel_credentials", "None"}, {
                    "client_cert_source_for_mtls", "None"}, {
                    "quota_project_id", "None"}, {
                    "client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {
                    "api_audience", "None"}, {"__class__", 
                    "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/ai/generativelanguage_v1beta2/services/text_\
service/transports/base.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/ai/generativelanguage_v1beta2/services/text_\
service/transports/base.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", "\"__init__\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  90.              )\""}, {"\"  91.  \""}, {
                    "\"  92.          if credentials_file is not None:\""}, {
                    "\"  93.              credentials, _ = \
google.auth.load_credentials_from_file(\""}, {
                    "\"  94.                  credentials_file, \
**scopes_kwargs, quota_project_id=quota_project_id\""}, {
                    "\"  95.              )\""}, {
                    "\"  96.          elif credentials is None:\""}, {
                    ItemBox[
                    "\"  97.              credentials, _ = \
google.auth.default(\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  98.                  **scopes_kwargs, \
quota_project_id=quota_project_id\""}, {"\"  99.              )\""}, {
                    "\" 100.              # Don't apply audience if the \
credentials file passed from user.\""}, {
                    "\" 101.              if hasattr(credentials, \
\\\"with_gdch_audience\\\"):\""}, {
                    "\" 102.                  credentials = \
credentials.with_gdch_audience(\""}, {
                    "\" 103.                      api_audience if \
api_audience else host\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>\""}, {
                    "\"host\"", "\"generativelanguage.googleapis.com\""}, {
                    "\"credentials\"", "\"None\""}, {"\"credentials_file\"", 
                    "\"None\""}, {"\"scopes\"", 
                    "\"None\""}, {"\"quota_project_id\"", "\"None\""}, {
                    "\"client_info\"", 
                    "\"<google.api_core.gapic_v1.client_info.ClientInfo \
object at 0x134657400>\""}, {"\"always_use_jwt_access\"", "\"True\""}, {
                    "\"api_audience\"", "\"None\""}, {"\"kwargs\"", 
                    "\"{}\""}, {"\"scopes_kwargs\"", 
                    "\"{'scopes': None, 'default_scopes': ()}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                    "host", "generativelanguage.googleapis.com"}, {
                    "credentials", "None"}, {"credentials_file", "None"}, {
                    "scopes", "None"}, {"quota_project_id", "None"}, {
                    "client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {"api_audience", 
                    "None"}, {"kwargs", "{}"}, {"scopes_kwargs", 
                    "{'scopes': None, 'default_scopes': ()}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{"  90.              )", "  91.  ", 
                    "  92.          if credentials_file is not None:", 
                    "  93.              credentials, _ = \
google.auth.load_credentials_from_file(", 
                    "  94.                  credentials_file, \
**scopes_kwargs, quota_project_id=quota_project_id", "  95.              )", 
                    "  96.          elif credentials is None:", 
                    Item[
                    "  97.              credentials, _ = \
google.auth.default(", Background -> LightYellow], 
                    "  98.                  **scopes_kwargs, \
quota_project_id=quota_project_id", "  99.              )", 
                    
                    " 100.              # Don't apply audience if the \
credentials file passed from user.", 
                    " 101.              if hasattr(credentials, \
\"with_gdch_audience\"):", 
                    " 102.                  credentials = \
credentials.with_gdch_audience(", 
                    " 103.                      api_audience if api_audience \
else host"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                    "host", "generativelanguage.googleapis.com"}, {
                    "credentials", "None"}, {"credentials_file", "None"}, {
                    "scopes", "None"}, {"quota_project_id", "None"}, {
                    "client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {
                    "api_audience", "None"}, {"kwargs", "{}"}, {
                    "scopes_kwargs", 
                    "{'scopes': None, 'default_scopes': ()}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/auth/_default.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"default\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/antonov/miniforge3/envs/SciPyCentric/lib/\
python3.10/site-packages/google/auth/_default.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"]], Appearance -> "Frameless", 
                    Evaluator -> Automatic, Method -> "Preemptive"], 
                    "\" in \"", "\"default\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 685.                      \\\"No project ID could be \
determined. Consider running \\\"\""}, {
                    "\" 686.                      \\\"`gcloud config set \
project` or setting the %s \\\"\""}, {
                    "\" 687.                      \\\"environment \
variable\\\",\""}, {
                    "\" 688.                      \
environment_vars.PROJECT,\""}, {"\" 689.                  )\""}, {
                    "\" 690.              return credentials, \
effective_project_id\""}, {"\" 691.  \""}, {
                    ItemBox[
                    "\" 692.      raise \
exceptions.DefaultCredentialsError(_CLOUD_SDK_MISSING_CREDENTIALS)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"scopes\"", 
                    "\"None\""}, {"\"default_scopes\"", "\"()\""}, {
                    "\"with_scopes_if_required\"", 
                    "\"<function with_scopes_if_required at 0x104083010>\""}, \
{"\"CredentialsWithQuotaProject\"", 
                    "\"<class \
'google.auth.credentials.CredentialsWithQuotaProject'>\""}, {
                    "\"explicit_project_id\"", "\"None\""}, {"\"checkers\"", 
                    "\"(<function default.<locals>.<lambda> at 0x1303d1ea0>, \
<function default.<locals>.<lambda> at 0x1346913f0>, <function \
_get_gae_credentials at 0x104080e50>, <function default.<locals>.<lambda> at \
0x134691360>)\""}, {"\"checker\"", 
                    "\"<function default.<locals>.<lambda> at \
0x134691360>\""}, {"\"credentials\"", "\"None\""}, {"\"project_id\"", 
                    "\"None\""}, {"\"quota_project_id\"", "\"None\""}, {
                    "\"request\"", "\"None\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"scopes", "None"}, {
                    "default_scopes", "()"}, {"with_scopes_if_required", 
                    "<function with_scopes_if_required at 0x104083010>"}, {
                    "CredentialsWithQuotaProject", 
                    "<class \
'google.auth.credentials.CredentialsWithQuotaProject'>"}, {
                    "explicit_project_id", "None"}, {"checkers", 
                    "(<function default.<locals>.<lambda> at 0x1303d1ea0>, \
<function default.<locals>.<lambda> at 0x1346913f0>, <function \
_get_gae_credentials at 0x104080e50>, <function default.<locals>.<lambda> at \
0x134691360>)"}, {"checker", 
                    "<function default.<locals>.<lambda> at 0x134691360>"}, {
                    "credentials", "None"}, {"project_id", "None"}, {
                    "quota_project_id", "None"}, {"request", "None"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"]], Appearance -> "Frameless"], 
                    " in ", "default"}], 
                    Column[{
                    
                    Column[{
                    " 685.                      \"No project ID could be \
determined. Consider running \"", 
                    " 686.                      \"`gcloud config set project` \
or setting the %s \"", " 687.                      \"environment variable\",",
                     " 688.                      environment_vars.PROJECT,", 
                    " 689.                  )", 
                    " 690.              return credentials, \
effective_project_id", " 691.  ", 
                    Item[
                    " 692.      raise \
exceptions.DefaultCredentialsError(_CLOUD_SDK_MISSING_CREDENTIALS)", 
                    Background -> LightYellow]}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"scopes", "None"}, {
                    "default_scopes", "()"}, {"with_scopes_if_required", 
                    "<function with_scopes_if_required at 0x104083010>"}, {
                    "CredentialsWithQuotaProject", 
                    "<class \
'google.auth.credentials.CredentialsWithQuotaProject'>"}, {
                    "explicit_project_id", "None"}, {
                    "checkers", 
                    "(<function default.<locals>.<lambda> at 0x1303d1ea0>, \
<function default.<locals>.<lambda> at 0x1346913f0>, <function \
_get_gae_credentials at 0x104080e50>, <function default.<locals>.<lambda> at \
0x134691360>)"}, {"checker", 
                    "<function default.<locals>.<lambda> at 0x134691360>"}, {
                    "credentials", "None"}, {"project_id", "None"}, {
                    "quota_project_id", "None"}, {"request", "None"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"DefaultCredentialsError", " ", 
                    "Your default credentials were not found. To set up \
Application Default Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information."}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{" 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "evaluate_message"}], 
                    
                    Column[{
                    
                    Column[{
                    " 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 112.  ", 
                    " 113.      __traceback_hidden_variables__ = True", 
                    " 114.  ", " 115.      result = None", " 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    Item[
                    " 118.          result = execute_from_string(input, \
**opts)", Background -> LightYellow], " 119.  ", 
                    " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", " 123.          result = result(*args)", " 124.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "execute_from_string"}], 
                    Column[{
                    
                    Column[{"  81.  ", 
                    "  82.      last_expr = last(expressions)", "  83.  ", 
                    "  84.      if isinstance(last_expr, ast.Expr):", 
                    "  85.          result = expressions.pop(-1)", "  86.  ", 
                    "  87.      if expressions:", 
                    Item[
                    "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                    "  90.      if result:", 
                    "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                    "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "code", 
                    "artistNames = llm_function('',e=confPaLM)(\"Give 10 \
random music artist names in a list in JSON format.\", \n                     \
                   form = sub_parser('JSON'))\nartistNames"}, {
                    "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                    "result", "<ast.Expr object at 0x134635d80>"}, {
                    "expressions", "[<ast.Assign object at 0x1306d8dc0>]"}, {
                    "last_expr", "<ast.Expr object at 0x134635d80>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item[
                    "   1.  artistNames = llm_function('',e=confPaLM)(\"Give \
10 random music artist names in a list in JSON format.\", ", Background -> 
                    LightYellow], 
                    "   2.                                          form = \
sub_parser('JSON'))", "   3.  artistNames"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "Configuration", 
                    "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {
                    "SubParser", 
                    "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                    "Evaluator", 
                    "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                    "EvaluatorChat", 
                    "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {
                    "EvaluatorChatGPT", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                    "EvaluatorChatPaLM", 
                    "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                    "Functor", 
                    "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                    "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                    "LLMFunctions", 
                    "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {
                    "llm_configuration", 
                    "<function llm_configuration at 0x104799990>"}, {
                    "llm_evaluator", 
                    "<function llm_evaluator at 0x104799a20>"}, {
                    "llm_example_function", 
                    "<function llm_example_function at 0x104799b40>"}, {
                    "llm_function", 
                    "<function llm_function at 0x104799ab0>"}, {
                    "llm_synthesize", 
                    "<function llm_synthesize at 0x104799bd0>"}, {
                    "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                    "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                    "exact_parser", 
                    "<function exact_parser at 0x101dc0160>"}, {
                    "catch_by_pattern", 
                    "<function catch_by_pattern at 0x101d53400>"}, {
                    "extract_json_objects", 
                    "<function extract_json_objects at 0x101d53880>"}, {
                    "jsonify_text", 
                    "<function jsonify_text at 0x101dc0040>"}, {
                    "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                    "Predicates", 
                    "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {
                    "TypeClasses", 
                    "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {
                    "Examiner", 
                    "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {"TypeSystem", 
                    "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {
                    "deduce_type", "<function deduce_type at 0x104799ea0>"}, {
                    "is_reshapable", 
                    "<function is_reshapable at 0x104799e10>"}, {
                    "record_types", 
                    "<function record_types at 0x104799f30>"}, {
                    "DataTypeSystem", 
                    "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {"json", 
                    "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                    "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {"re", 
                    "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                    "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                    "samples", "[]"}, {"home", "/Users/antonov"}, {
                    "myfile", 
                    "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {"line", 
                    "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                    "match", "None"}, {
                    "openai_api_key", 
                    "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"}, {
                    "palm_api_key", 
                    "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                    "confOpenAI", 
                    "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {
                    "confPaLM", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {
                    "io", "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                    "Image", 
                    "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                    "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {"show_plt", 
                    "<function show_plt at 0x11de43250>"}, {
                    "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {
                    "fs", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                    "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                    "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                    "chemRes1", 
                    "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                    "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                    "chem_component", 
                    "<function chem_component at 0x1303d1c60>"}, {
                    "chem_masses_records", 
                    "<function chem_masses_records at 0x1345e67a0>"}, {
                    "pres", 
                    "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                    "pres2", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {"pres3", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "pres4", 
                    "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                    "dfEqs", 
                    "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                    "<function chem_component2 at 0x134631ab0>"}, {
                    "cfnp", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}, {
                    "fner", 
                    "{'type': 'functor', 'prompt': '<function <lambda> at \
0x102bd84c0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x134635cc0>}}"}, {
                    "urllib", 
                    "<module 'urllib' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/urllib/__init__.\
py'>"}, {"url", "https://en.wikipedia.org/wiki/Boris_Brejcha"}, {
                    "f", "<http.client.HTTPResponse object at 0x134637d60>"}, \
{"text", "\n\nBoris Brejcha is a German electronic music producer and DJ, \
known for his unique style of minimal techno and high-energy live \
performances. He was born on November 26, 1981 in Ludwigshafen, Germany.\n\n\
Brejcha began his music career in 2006, releasing his first EP \"Monster\" on \
Autist Records. He gained recognition in the underground techno scene with \
his track \"Die Maschinen Sind Gestrandet\" in 2007. He has since released \
numerous EPs and albums on his own label, Fckng Serious, as well as on other \
labels such as Harthouse and Minus.\n\nIn addition to his solo work, Brejcha \
has collaborated with other artists such as Ann Clue and Deniz Bul. He has \
also remixed tracks for popular artists like Stephan Bodzin and Oliver \
Koletzki.\n\nBrejcha's live performances are known for their energetic and \
dynamic nature, often incorporating elements of visual art and lighting \
effects. He has performed at major music festivals such as Tomorrowland, \
Awakenings, and Time Warp.\n\nDiscography:\n\nAlbums:\n- 2007: Die Maschinen \
Sind Gestrandet\n- 2010: My Name Is\n- 2012: Feuerfalter Part 01\n- 2014: \
Feuerfalter Part 02\n- 2016: 22\n- 2018: Space Diver\n\nEPs:\n- 2006: Monster\
\n- 2007: Outer Space\n- 2008: Mein Wahres Ich\n- 2009: Die Milchstrasse\n- \
2010: Die Maschinen Kontrollieren Uns\n- 2011: Lost Memory\n- 2012: That's \
the Funky Shit\n- 2013: Everybody Wants to Go to Heaven\n- 2014: R U FCKNG \
SERIOUS?\n- 2015: Hashtag\n- 2016: DJ Mixes Single Tracks\n- 2017: Bleeding \
Heart\n- 2018: Devil\n- 2019: Space Diver Remixes\n- 2020: Violet Pill"}, {
                    "albRes", 
                    "['\\n\\n', {'albums': [{'name': 'Die Maschinen Sind \
Gestrandet', 'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': \
'Feuerfalter Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': \
2014}, {'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}, \
'']"}, {"albRes2", 
                    "[{'albums': [{'name': 'Die Maschinen Sind Gestrandet', \
'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': 'Feuerfalter \
Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': 2014}, \
{'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}]"}, {
                    "dfDiscography", 
                    "                                              albums\n0  \
[{'name': 'Die Maschinen Sind Gestrandet', 'ye..."}, {
                    "fjp", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x134631f30>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "codeRes", 
                    "\n\nimport matplotlib.pyplot as plt\nimport json\n\n# \
Load JSON data\ndata = '{\"albums\": {\"0\": [{\"name\": \"Die Maschinen Sind \
Gestrandet\", \"year\": 2007}, {\"name\": \"My Name Is\", \"year\": 2010}, \
{\"name\": \"Feuerfalter Part 01\", \"year\": 2012}, {\"name\": \"Feuerfalter \
Part 02\", \"year\": 2014}, {\"name\": \"22\", \"year\": 2016}, {\"name\": \
\"Space Diver\", \"year\": 2018}]}}'\ndata = json.loads(data)\n\n# Extract \
album names and years\nalbums = data['albums']['0']\nnames = [album['name'] \
for album in albums]\nyears = [album['year'] for album in albums]\n\n# Create \
time line plot\nplt.plot(years, names)\nplt.xlabel('Year')\nplt.ylabel('Album \
Name')\nplt.title('Album Release Timeline')\nplt.show()"}, {
                    "fdb", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x134632440>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                    "dbRes", "[]"}, {
                    "artistNames", 
                    "['\\n\\n[\\n  \"Taylor Swift\",\\n  \"Kendrick \
Lamar\",\\n  \"Ariana Grande\",\\n  \"Ed Sheeran\",\\n  \"Beyonce\",\\n  \
\"Drake\",\\n  \"Rihanna\",\\n  \"The Weeknd\",\\n  \"Post Malone\",\\n  \
\"Billie Eilish\"\\n]']"}, {"artistNames2", "[]"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless"],
                     " in ", "__call__"}], 
                    Column[{
                    
                    Column[{"  25.  ", "  26.          res = ''", 
                    "  27.          if isinstance(self.prompt, str):", 
                    "  28.  ", 
                    "  29.              args2 = [self.prompt, ] + list(args)",
                     "  30.  ", "  31.              # LLM evaluate", 
                    Item[
                    "  32.              res = llmEvaluatorLocal.eval(args2, \
**dargs)", Background -> LightYellow], "  33.  ", 
                    "  34.          elif callable(self.prompt):", "  35.  ", 
                    "  36.              # Filter the prompt function", 
                    "  37.              dargs2 = dict(filter(lambda x: x[0] \
in self.args, dargs.items()))", "  38.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "args", 
                    "('Give 10 random music artist names in a list in JSON \
format.',)"}, {"dargs", 
                    "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {"llmEvaluatorLocal", 
                    "{'conf': None, 'formatron': None}"}, {"res", ""}, {
                    "args2", 
                    "['', 'Give 10 random music artist names in a list in \
JSON format.']"}, {"self", 
                    "{'type': 'functor', 'prompt': \"''\", 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> 
                    "Frameless"], " in ", "eval"}], 
                    Column[{
                    
                    Column[{" 105.  ", 
                    " 106.          # Invoke the LLM function", 
                    " 107.          args2[\"prompt\"] = messages", 
                    " 108.          args2[\"messages\"] = messages", 
                    " 109.  ", 
                    " 110.          args2 = dict(filter(lambda x: x[0] in \
self.conf.known_params, args2.items()))", " 111.  ", 
                    Item[
                    " 112.          res = self.conf.function(**args2)", 
                    Background -> LightYellow], " 113.  ", 
                    " 114.          if echo:", 
                    " 115.              print(f'LLM result: {res}')", 
                    " 116.  ", " 117.          # Same LLM result", 
                    " 118.          self.llm_result = res"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "texts", 
                    "['', 'Give 10 random music artist names in a list in \
JSON format.']"}, {"args", 
                    "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {"confDict", 
                    "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {"echo", "False"}, {
                    "args2", 
                    "{'model': 'models/text-bison-001', 'temperature': 0.2, \
'prompt': '  Give 10 random music artist names in a list in JSON format.'}"}, \
{"fullPrompt", ""}, {"messages", 
                    "  Give 10 random music artist names in a list in JSON \
format."}, {"self", "{'conf': None, 'formatron': None}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless"], 
                    " in ", "generate_text"}], 
                    Column[{
                    
                    Column[{
                    " 132.          max_output_tokens=max_output_tokens,", 
                    " 133.          top_p=top_p,", 
                    " 134.          top_k=top_k,", 
                    " 135.          safety_settings=safety_settings,", 
                    " 136.          stop_sequences=stop_sequences,", 
                    " 137.      )", " 138.  ", 
                    Item[
                    " 139.      return _generate_response(client=client, \
request=request)", Background -> LightYellow], " 140.  ", " 141.  ", 
                    " 142.  @dataclasses.dataclass(init=False)", 
                    " 143.  class Completion(text_types.Completion):", 
                    " 144.      def __init__(self, **kwargs):", 
                    " 145.          for key, value in kwargs.items():"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "model", "models/text-bison-001"}, {
                    "prompt", 
                    "  Give 10 random music artist names in a list in JSON \
format."}, {"temperature", "0.2"}, {"candidate_count", "None"}, {
                    "max_output_tokens", "None"}, {"top_p", "None"}, {
                    "top_k", "None"}, {"safety_settings", "None"}, {
                    "stop_sequences", "None"}, {"client", "None"}, {
                    "request", 
                    "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/text.py"]], Appearance -> "Frameless"], 
                    " in ", "_generate_response"}], 
                    Column[{
                    
                    Column[{
                    " 150.              self.result = \
self.candidates[0][\"output\"]", " 151.  ", " 152.  ", 
                    " 153.  def _generate_response(", 
                    " 154.      request: glm.GenerateTextRequest, client: \
glm.TextServiceClient = None", " 155.  ) -> Completion:", 
                    " 156.      if client is None:", 
                    Item[
                    " 157.          client = get_default_text_client()", 
                    Background -> LightYellow], " 158.  ", 
                    " 159.      response = client.generate_text(request)", 
                    " 160.      response = type(response).to_dict(response)", 
                    " 161.  ", 
                    " 162.      response[\"filters\"] = \
safety_types.convert_filters_to_enums(response[\"filters\"])", 
                    " 163.      response[\"safety_feedback\"] = \
safety_types.convert_safety_feedback_to_enums("}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "request", 
                    "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}, {"client", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/generativeai/client.py"]], Appearance -> "Frameless"],
                     " in ", "get_default_text_client"}], 
                    Column[{
                    
                    Column[{" 126.  ", 
                    " 127.  def get_default_text_client():", 
                    " 128.      global default_text_client", 
                    " 129.      if default_text_client is None:", 
                    " 130.          # Attempt to configure using defaults.", 
                    " 131.          if not default_client_config:", 
                    " 132.              configure()", 
                    Item[
                    " 133.          default_text_client = \
glm.TextServiceClient(**default_client_config)", Background -> LightYellow], 
                    " 134.  ", " 135.      return default_text_client", 
                    " 136.  ", " 137.  ", 
                    " 138.  def get_default_discuss_async_client() -> \
glm.DiscussServiceAsyncClient:", 
                    " 139.      global default_discuss_async_client"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    "No local variables"}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{
                    " 421.                  google.auth._default, \
\"get_api_key_credentials\"", " 422.              ):", 
                    " 423.                  credentials = \
google.auth._default.get_api_key_credentials(", 
                    " 424.                      api_key_value", 
                    " 425.                  )", " 426.  ", 
                    " 427.              Transport = \
type(self).get_transport_class(transport)", 
                    Item[
                    " 428.              self._transport = Transport(", 
                    Background -> LightYellow], 
                    " 429.                  credentials=credentials,", 
                    " 430.                  \
credentials_file=client_options.credentials_file,", 
                    " 431.                  host=api_endpoint,", 
                    " 432.                  scopes=client_options.scopes,", 
                    " 433.                  \
client_cert_source_for_mtls=client_cert_source_func,", 
                    " 434.                  \
quota_project_id=client_options.quota_project_id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.client.TextServiceClient object at 0x134635330>"}, {
                    "credentials", "None"}, {"transport", "None"}, {
                    "client_options", 
                    "ClientOptions: {'api_endpoint': None, \
'client_cert_source': None, 'client_encrypted_cert_source': None, \
'quota_project_id': None, 'credentials_file': None, 'scopes': None, \
'api_key': None, 'api_audience': None}"}, {
                    "client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"api_endpoint", "generativelanguage.googleapis.com"}, {
                    "client_cert_source_func", "None"}, {
                    "api_key_value", "None"}, {
                    "google", 
                    "<module 'google' \
(<_frozen_importlib_external._NamespaceLoader object at 0x100fad8a0>)>"}, {
                    "Transport", 
                    "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{
                    " 144.                  if client_cert_source_for_mtls \
and not ssl_channel_credentials:", 
                    " 145.                      cert, key = \
client_cert_source_for_mtls()", 
                    " 146.                      self._ssl_channel_credentials \
= grpc.ssl_channel_credentials(", 
                    " 147.                          certificate_chain=cert, \
private_key=key", " 148.                      )", " 149.  ", 
                    " 150.          # The base transport sets the host, \
credentials and scopes", 
                    Item[
                    " 151.          super().__init__(", Background -> 
                    LightYellow], " 152.              host=host,", 
                    " 153.              credentials=credentials,", 
                    " 154.              credentials_file=credentials_file,", 
                    " 155.              scopes=scopes,", 
                    " 156.              quota_project_id=quota_project_id,", 
                    " 157.              client_info=client_info,"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                    "host", "generativelanguage.googleapis.com"}, {
                    "credentials", "None"}, {"credentials_file", "None"}, {
                    "scopes", "None"}, {"channel", "None"}, {
                    "api_mtls_endpoint", "None"}, {
                    "client_cert_source", "None"}, {
                    "ssl_channel_credentials", "None"}, {
                    "client_cert_source_for_mtls", "None"}, {
                    "quota_project_id", "None"}, {
                    "client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {
                    "api_audience", "None"}, {
                    "__class__", 
                    "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
                    Column[{
                    
                    Column[{"  90.              )", "  91.  ", 
                    "  92.          if credentials_file is not None:", 
                    "  93.              credentials, _ = \
google.auth.load_credentials_from_file(", 
                    "  94.                  credentials_file, \
**scopes_kwargs, quota_project_id=quota_project_id", "  95.              )", 
                    "  96.          elif credentials is None:", 
                    Item[
                    "  97.              credentials, _ = \
google.auth.default(", Background -> LightYellow], 
                    "  98.                  **scopes_kwargs, \
quota_project_id=quota_project_id", "  99.              )", 
                    " 100.              # Don't apply audience if the \
credentials file passed from user.", 
                    " 101.              if hasattr(credentials, \
\"with_gdch_audience\"):", 
                    " 102.                  credentials = \
credentials.with_gdch_audience(", 
                    " 103.                      api_audience if api_audience \
else host"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                    "host", "generativelanguage.googleapis.com"}, {
                    "credentials", "None"}, {"credentials_file", "None"}, {
                    "scopes", "None"}, {"quota_project_id", "None"}, {
                    "client_info", 
                    "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {
                    "api_audience", "None"}, {"kwargs", "{}"}, {
                    "scopes_kwargs", 
                    "{'scopes': None, 'default_scopes': ()}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"], 
                    SystemOpen[
                    "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.\
10/site-packages/google/auth/_default.py"]], Appearance -> "Frameless"], 
                    " in ", "default"}], 
                    Column[{
                    
                    Column[{
                    " 685.                      \"No project ID could be \
determined. Consider running \"", 
                    " 686.                      \"`gcloud config set project` \
or setting the %s \"", " 687.                      \"environment variable\",",
                     " 688.                      environment_vars.PROJECT,", 
                    " 689.                  )", 
                    " 690.              return credentials, \
effective_project_id", " 691.  ", 
                    Item[
                    " 692.      raise \
exceptions.DefaultCredentialsError(_CLOUD_SDK_MISSING_CREDENTIALS)", 
                    Background -> LightYellow]}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"scopes", "None"}, {
                    "default_scopes", "()"}, {
                    "with_scopes_if_required", 
                    "<function with_scopes_if_required at 0x104083010>"}, {
                    "CredentialsWithQuotaProject", 
                    "<class \
'google.auth.credentials.CredentialsWithQuotaProject'>"}, {
                    "explicit_project_id", "None"}, {
                    "checkers", 
                    "(<function default.<locals>.<lambda> at 0x1303d1ea0>, \
<function default.<locals>.<lambda> at 0x1346913f0>, <function \
_get_gae_credentials at 0x104080e50>, <function default.<locals>.<lambda> at \
0x134691360>)"}, {"checker", 
                    "<function default.<locals>.<lambda> at 0x134691360>"}, {
                    "credentials", "None"}, {"project_id", "None"}, {
                    "quota_project_id", "None"}, {"request", "None"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> 
    "Your default credentials were not found. To set up Application Default \
Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information.", "MessageParameters" :> <||>, "FailureCode" :> 
    "DefaultCredentialsError", "Traceback" :> OpenerView[{
       Row[{
        "DefaultCredentialsError", " ", 
         "Your default credentials were not found. To set up Application \
Default Credentials, see \
https://cloud.google.com/docs/authentication/external/set-up-adc for more \
information."}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
               Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                "  20.      __traceback_hidden_variables__ = True", "  21.  ",
                 "  22.      try:", 
                Item[
                "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  24.      except Exception as export_exception:", 
                "  25.          try:", "  26.              try:", "  27.  ", 
                "  28.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  29.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
               Appearance -> "Frameless"], " in ", "handle_message"}], 
            Column[{
              
              Column[{" 130.  ", " 131.  ", 
                " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                " 134.      __traceback_hidden_variables__ = True", " 135.  ",
                 " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                Item[
                " 137.      result = evaluate_message(**message)", Background -> 
                 LightYellow], " 138.  ", " 139.      sys.stdout.flush()", 
                " 140.      return result", " 141.  ", " 142.  ", 
                " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
               Appearance -> "Frameless"], " in ", "evaluate_message"}], 
            Column[{
              
              Column[{" 111.  def evaluate_message(input=None, \
return_type=None, args=None, **opts):", " 112.  ", 
                " 113.      __traceback_hidden_variables__ = True", " 114.  ",
                 " 115.      result = None", " 116.  ", 
                " 117.      if isinstance(input, six.string_types):", 
                Item[
                " 118.          result = execute_from_string(input, **opts)", 
                 Background -> LightYellow], " 119.  ", 
                " 120.      if isinstance(args, (list, tuple)):", 
                " 121.          # then we have a function call to do", 
                " 122.          # first get the function object we need to \
call", " 123.          result = result(*args)", " 124.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Mathematica.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Mathematica.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
               Appearance -> "Frameless"], " in ", "execute_from_string"}], 
            Column[{
              
              Column[{"  81.  ", "  82.      last_expr = last(expressions)", 
                "  83.  ", "  84.      if isinstance(last_expr, ast.Expr):", 
                "  85.          result = expressions.pop(-1)", "  86.  ", 
                "  87.      if expressions:", 
                Item[
                "  88.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", Background -> LightYellow], "  89.  ", 
                "  90.      if result:", 
                "  91.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", "  92.  ", 
                "  93.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", "  94.          return env[last_expr.name]"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "code", 
                   "artistNames = llm_function('',e=confPaLM)(\"Give 10 \
random music artist names in a list in JSON format.\", \n                     \
                   form = sub_parser('JSON'))\nartistNames"}, {
                  "globals", "{}"}, {"opts", "{'constants': {}}"}, {
                  "result", "<ast.Expr object at 0x134635d80>"}, {
                  "expressions", "[<ast.Assign object at 0x1306d8dc0>]"}, {
                  "last_expr", "<ast.Expr object at 0x134635d80>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{"<module>", 
            Column[{
              Column[{
                Item[
                "   1.  artistNames = llm_function('',e=confPaLM)(\"Give 10 \
random music artist names in a list in JSON format.\", ", Background -> 
                 LightYellow], 
                "   2.                                          form = \
sub_parser('JSON'))", "   3.  artistNames"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "Configuration", 
                   "<class \
'LLMFunctionObjects.Configuration.Configuration'>"}, {
                  "SubParser", 
                   "<class 'LLMFunctionObjects.SubParser.SubParser'>"}, {
                  "Evaluator", 
                   "<class 'LLMFunctionObjects.Evaluator.Evaluator'>"}, {
                  "EvaluatorChat", 
                   "<class \
'LLMFunctionObjects.EvaluatorChat.EvaluatorChat'>"}, {
                  "EvaluatorChatGPT", 
                   "<class \
'LLMFunctionObjects.EvaluatorChatGPT.EvaluatorChatGPT'>"}, {
                  "EvaluatorChatPaLM", 
                   "<class \
'LLMFunctionObjects.EvaluatorChatPaLM.EvaluatorChatPaLM'>"}, {
                  "Functor", 
                   "<class 'LLMFunctionObjects.Functor.Functor'>"}, {
                  "Chat", "<class 'LLMFunctionObjects.Chat.Chat'>"}, {
                  "LLMFunctions", 
                   "<module 'LLMFunctionObjects.LLMFunctions' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
LLMFunctionObjects/LLMFunctions.py'>"}, {
                  "llm_configuration", 
                   "<function llm_configuration at 0x104799990>"}, {
                  "llm_evaluator", 
                   "<function llm_evaluator at 0x104799a20>"}, {
                  "llm_example_function", 
                   "<function llm_example_function at 0x104799b40>"}, {
                  "llm_function", "<function llm_function at 0x104799ab0>"}, {
                  "llm_synthesize", 
                   "<function llm_synthesize at 0x104799bd0>"}, {
                  "llm_chat", "<function llm_chat at 0x104799c60>"}, {
                  "sub_parser", "<function sub_parser at 0x101dc00d0>"}, {
                  "exact_parser", "<function exact_parser at 0x101dc0160>"}, {
                  "catch_by_pattern", 
                   "<function catch_by_pattern at 0x101d53400>"}, {
                  "extract_json_objects", 
                   "<function extract_json_objects at 0x101d53880>"}, {
                  "jsonify_text", "<function jsonify_text at 0x101dc0040>"}, {
                  "numify_text", "<function numify_text at 0x101d51cf0>"}, {
                  "Predicates", 
                   "<module 'DataTypeSystem.Predicates' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Predicates.py'>"}, {
                  "TypeClasses", 
                   "<module 'DataTypeSystem.TypeClasses' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeClasses.py'>"}, {
                  "Examiner", 
                   "<module 'DataTypeSystem.Examiner' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/Examiner.py'>"}, {
                  "TypeSystem", 
                   "<module 'DataTypeSystem.TypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/TypeSystem.py'>"}, {
                  "deduce_type", "<function deduce_type at 0x104799ea0>"}, {
                  "is_reshapable", 
                   "<function is_reshapable at 0x104799e10>"}, {
                  "record_types", "<function record_types at 0x104799f30>"}, {
                  "DataTypeSystem", 
                   "<module 'DataTypeSystem' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
DataTypeSystem/__init__.py'>"}, {
                  "json", 
                   "<module 'json' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/json/__init__.py'>\
"}, {"pandas", 
                   "<module 'pandas' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
pandas/__init__.py'>"}, {
                  "re", "<module 're' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/re.py'>"}, {
                  "os", "<module 'os' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/os.py'>"}, {
                  "samples", "[]"}, {"home", "/Users/antonov"}, {
                  "myfile", 
                   "<_io.TextIOWrapper name='/Users/antonov/.zshrc' mode='r' \
encoding='UTF-8'>"}, {
                  "line", 
                   "if [ -f \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . \
'/Users/antonov/Downloads/google-cloud-sdk/completion.zsh.inc'; fi\n"}, {
                  "match", "None"}, {
                  "openai_api_key", 
                   "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"}, {
                  "palm_api_key", 
                   "AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI"}, {
                  "confOpenAI", 
                   "{'name': 'openai', 'api_key': \
'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', 'api_user_id': 'user', \
'module': 'openai', 'model': 'gpt-3.5-turbo-instruct', 'function': <bound \
method Completion.create of <class \
'openai.api_resources.completion.Completion'>>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['api_key', 'model', 'prompt', 'suffix', \
'max_tokens', 'temperature', 'top_p', 'n', 'stream', 'logprobs', 'stop', \
'presence_penalty', 'frequency_penalty', 'best_of', 'logit_bias', 'user'], \
'response_object_attribute': None, 'response_value_keys': ['choices', 0, \
'text'], 'llm_evaluator': None}"}, {
                  "confPaLM", 
                   "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {
                  "io", "<module 'io' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/io.py'>"}, {
                  "Image", 
                   "<module 'PIL.Image' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/PIL/\
Image.py'>"}, {"plt", 
                   "<module 'matplotlib.pyplot' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
matplotlib/pyplot.py'>"}, {
                  "show_plt", "<function show_plt at 0x11de43250>"}, {
                  "pu", "{'type': 'functor', 'prompt': '<function \
llm_example_function.<locals>.<lambda> at 0x11de432e0>', 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}, {
                  "fs", "{'type': 'functor', 'prompt': '<function <lambda> at \
0x11f8a8dc0>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                  "rs1", "11,186 mps"}, {"rs2", "11186 * u.m / u.s"}, {
                  "u", "<module 'astropy.units' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/site-packages/\
astropy/units/__init__.py'>"}, {"rs3", "11186.0 m / s"}, {
                  "cfn", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x1303d1750>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1013e8ca0>}}"}, {
                  "chemRes1", 
                   "['\\n\\n', {'1': 'S + O2 -> SO2', '2': '2H2S + 3O2 -> \
2H2O + 2SO2', '3': 'FeS2 + 7O2 -> Fe2O3 + 2SO2'}, '']"}, {
                  "Substance", "<class 'chempy.chemistry.Substance'>"}, {
                  "chem_component", 
                   "<function chem_component at 0x1303d1c60>"}, {
                  "chem_masses_records", 
                   "<function chem_masses_records at 0x1345e67a0>"}, {
                  "pres", 
                   "[[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}], [{'eq': '2H2S + 3O2 -> 2H2O \
+ 2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', \
'mass': 36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}], [{'eq': 'FeS2 + 7O2 \
-> Fe2O3 + 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': \
'Fe2O3', 'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': \
'RHS', 'term': '2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]]"}, {
                  "pres2", 
                   "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}]"}, {
                  "pres3", 
                   "[{'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                  "pres4", 
                   "[{'eq': 'S + O2 -> SO2', 'side': 'LHS', 'term': 'S', \
'factor': 1, 'formula': 'S', 'mass': 32.06}, {'eq': 'S + O2 -> SO2', 'side': \
'LHS', 'term': 'O2', 'factor': 1, 'formula': 'O2', 'mass': 31.998}, {'eq': \
'2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'LHS', 'term': '2H2S', 'factor': 2, \
'formula': 'H2S', 'mass': 68.152}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', \
'side': 'LHS', 'term': '3O2', 'factor': 3, 'formula': 'O2', 'mass': 95.994}, \
{'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'LHS', 'term': 'FeS2', 'factor': \
1, 'formula': 'FeS2', 'mass': 119.965}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', \
'side': 'LHS', 'term': '7O2', 'factor': 7, 'formula': 'O2', 'mass': \
223.98600000000002}, {'eq': 'S + O2 -> SO2', 'side': 'RHS', 'term': 'SO2', \
'factor': 1, 'formula': 'SO2', 'mass': 64.058}, {'eq': '2H2S + 3O2 -> 2H2O + \
2SO2', 'side': 'RHS', 'term': '2H2O', 'factor': 2, 'formula': 'H2O', 'mass': \
36.03}, {'eq': '2H2S + 3O2 -> 2H2O + 2SO2', 'side': 'RHS', 'term': '2SO2', \
'factor': 2, 'formula': 'SO2', 'mass': 128.116}, {'eq': 'FeS2 + 7O2 -> Fe2O3 \
+ 2SO2', 'side': 'RHS', 'term': 'Fe2O3', 'factor': 1, 'formula': 'Fe2O3', \
'mass': 159.687}, {'eq': 'FeS2 + 7O2 -> Fe2O3 + 2SO2', 'side': 'RHS', 'term': \
'2SO2', 'factor': 2, 'formula': 'SO2', 'mass': 128.116}]"}, {
                  "dfEqs", 
                   "                            eq side   term  factor \
formula     mass\n2    2H2S + 3O2 -> 2H2O + 2SO2  LHS   2H2S       2     H2S  \
 68.152\n3    2H2S + 3O2 -> 2H2O + 2SO2  LHS    3O2       3      O2   95.994\n\
7    2H2S + 3O2 -> 2H2O + 2SO2  RHS   2H2O       2     H2O   36.030\n8    \
2H2S + 3O2 -> 2H2O + 2SO2  RHS   2SO2       2     SO2  128.116\n4   FeS2 + \
7O2 -> Fe2O3 + 2SO2  LHS   FeS2       1    FeS2  119.965\n5   FeS2 + 7O2 -> \
Fe2O3 + 2SO2  LHS    7O2       7      O2  223.986\n9   FeS2 + 7O2 -> Fe2O3 + \
2SO2  RHS  Fe2O3       1   Fe2O3  159.687\n10  FeS2 + 7O2 -> Fe2O3 + 2SO2  \
RHS   2SO2       2     SO2  128.116\n0                S + O2 -> SO2  LHS      \
S       1       S   32.060\n1                S + O2 -> SO2  LHS     O2       \
1      O2   31.998\n6                S + O2 -> SO2  RHS    SO2       1     \
SO2   64.058"}, {"chem_component2", 
                   "<function chem_component2 at 0x134631ab0>"}, {
                  "cfnp", 
                   "{'type': 'functor', 'prompt': '<function <lambda> at \
0x1346325f0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x1346364d0>}}"}, {
                  "fner", 
                   "{'type': 'functor', 'prompt': '<function <lambda> at \
0x102bd84c0>', 'llm_evaluator': {'conf': None, 'formatron': \
<LLMFunctionObjects.SubParser.SubParser object at 0x134635cc0>}}"}, {
                  "urllib", 
                   "<module 'urllib' from \
'/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/urllib/__init__.\
py'>"}, {"url", "https://en.wikipedia.org/wiki/Boris_Brejcha"}, {
                  "f", "<http.client.HTTPResponse object at 0x134637d60>"}, {
                  "text", 
                   "\n\nBoris Brejcha is a German electronic music producer \
and DJ, known for his unique style of minimal techno and high-energy live \
performances. He was born on November 26, 1981 in Ludwigshafen, Germany.\n\n\
Brejcha began his music career in 2006, releasing his first EP \"Monster\" on \
Autist Records. He gained recognition in the underground techno scene with \
his track \"Die Maschinen Sind Gestrandet\" in 2007. He has since released \
numerous EPs and albums on his own label, Fckng Serious, as well as on other \
labels such as Harthouse and Minus.\n\nIn addition to his solo work, Brejcha \
has collaborated with other artists such as Ann Clue and Deniz Bul. He has \
also remixed tracks for popular artists like Stephan Bodzin and Oliver \
Koletzki.\n\nBrejcha's live performances are known for their energetic and \
dynamic nature, often incorporating elements of visual art and lighting \
effects. He has performed at major music festivals such as Tomorrowland, \
Awakenings, and Time Warp.\n\nDiscography:\n\nAlbums:\n- 2007: Die Maschinen \
Sind Gestrandet\n- 2010: My Name Is\n- 2012: Feuerfalter Part 01\n- 2014: \
Feuerfalter Part 02\n- 2016: 22\n- 2018: Space Diver\n\nEPs:\n- 2006: Monster\
\n- 2007: Outer Space\n- 2008: Mein Wahres Ich\n- 2009: Die Milchstrasse\n- \
2010: Die Maschinen Kontrollieren Uns\n- 2011: Lost Memory\n- 2012: That's \
the Funky Shit\n- 2013: Everybody Wants to Go to Heaven\n- 2014: R U FCKNG \
SERIOUS?\n- 2015: Hashtag\n- 2016: DJ Mixes Single Tracks\n- 2017: Bleeding \
Heart\n- 2018: Devil\n- 2019: Space Diver Remixes\n- 2020: Violet Pill"}, {
                  "albRes", 
                   "['\\n\\n', {'albums': [{'name': 'Die Maschinen Sind \
Gestrandet', 'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': \
'Feuerfalter Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': \
2014}, {'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}, \
'']"}, {"albRes2", 
                   "[{'albums': [{'name': 'Die Maschinen Sind Gestrandet', \
'year': 2007}, {'name': 'My Name Is', 'year': 2010}, {'name': 'Feuerfalter \
Part 01', 'year': 2012}, {'name': 'Feuerfalter Part 02', 'year': 2014}, \
{'name': '22', 'year': 2016}, {'name': 'Space Diver', 'year': 2018}]}]"}, {
                  "dfDiscography", 
                   "                                              albums\n0  \
[{'name': 'Die Maschinen Sind Gestrandet', 'ye..."}, {
                  "fjp", "{'type': 'functor', 'prompt': '<function <lambda> \
at 0x134631f30>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                  "codeRes", 
                   "\n\nimport matplotlib.pyplot as plt\nimport json\n\n# \
Load JSON data\ndata = '{\"albums\": {\"0\": [{\"name\": \"Die Maschinen Sind \
Gestrandet\", \"year\": 2007}, {\"name\": \"My Name Is\", \"year\": 2010}, \
{\"name\": \"Feuerfalter Part 01\", \"year\": 2012}, {\"name\": \"Feuerfalter \
Part 02\", \"year\": 2014}, {\"name\": \"22\", \"year\": 2016}, {\"name\": \
\"Space Diver\", \"year\": 2018}]}}'\ndata = json.loads(data)\n\n# Extract \
album names and years\nalbums = data['albums']['0']\nnames = [album['name'] \
for album in albums]\nyears = [album['year'] for album in albums]\n\n# Create \
time line plot\nplt.plot(years, names)\nplt.xlabel('Year')\nplt.ylabel('Album \
Name')\nplt.title('Album Release Timeline')\nplt.show()"}, {
                  "fdb", 
                   "{'type': 'functor', 'prompt': '<function <lambda> at \
0x134632440>', 'llm_evaluator': {'conf': None, 'formatron': None}}"}, {
                  "dbRes", "[]"}, {
                  "artistNames", 
                   "['\\n\\n[\\n  \"Taylor Swift\",\\n  \"Kendrick \
Lamar\",\\n  \"Ariana Grande\",\\n  \"Ed Sheeran\",\\n  \"Beyonce\",\\n  \
\"Drake\",\\n  \"Rihanna\",\\n  \"The Weeknd\",\\n  \"Post Malone\",\\n  \
\"Billie Eilish\"\\n]']"}, {"artistNames2", "[]"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Functor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Functor.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Functor.py"]], Appearance -> "Frameless"], 
              " in ", "__call__"}], 
            Column[{
              
              Column[{"  25.  ", "  26.          res = ''", 
                "  27.          if isinstance(self.prompt, str):", "  28.  ", 
                "  29.              args2 = [self.prompt, ] + list(args)", 
                "  30.  ", "  31.              # LLM evaluate", 
                Item[
                "  32.              res = llmEvaluatorLocal.eval(args2, \
**dargs)", Background -> LightYellow], "  33.  ", 
                "  34.          elif callable(self.prompt):", "  35.  ", 
                "  36.              # Filter the prompt function", 
                "  37.              dargs2 = dict(filter(lambda x: x[0] in \
self.args, dargs.items()))", "  38.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "args", 
                   "('Give 10 random music artist names in a list in JSON \
format.',)"}, {"dargs", 
                   "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {
                  "llmEvaluatorLocal", "{'conf': None, 'formatron': None}"}, {
                  "res", ""}, {
                  "args2", 
                   "['', 'Give 10 random music artist names in a list in JSON \
format.']"}, {"self", 
                   "{'type': 'functor', 'prompt': \"''\", 'llm_evaluator': \
{'conf': None, 'formatron': None}}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Evaluator.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Evaluator.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/LLMFunctionObjects/Evaluator.py"]], Appearance -> "Frameless"], 
              " in ", "eval"}], 
            Column[{
              
              Column[{" 105.  ", " 106.          # Invoke the LLM function", 
                " 107.          args2[\"prompt\"] = messages", 
                " 108.          args2[\"messages\"] = messages", " 109.  ", 
                " 110.          args2 = dict(filter(lambda x: x[0] in \
self.conf.known_params, args2.items()))", " 111.  ", 
                Item[
                " 112.          res = self.conf.function(**args2)", 
                 Background -> LightYellow], " 113.  ", 
                " 114.          if echo:", 
                " 115.              print(f'LLM result: {res}')", " 116.  ", 
                " 117.          # Same LLM result", 
                " 118.          self.llm_result = res"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "texts", 
                   "['', 'Give 10 random music artist names in a list in JSON \
format.']"}, {"args", 
                   "{'form': <LLMFunctionObjects.SubParser.SubParser object \
at 0x1306d8a00>}"}, {
                  "confDict", 
                   "{'name': 'palm', 'api_key': \
'AIzaSyAYPfYy_pCTgstwcR9T43RUJrUocqzhncI', 'api_user_id': 'user', 'module': \
'google.generativeai', 'model': 'models/text-bison-001', 'function': \
<function generate_text at 0x104798820>, 'temperature': 0.2, \
'total_probability_cutoff': 0.03, 'max_tokens': 300, 'fmt': 'values', \
'prompts': [], 'prompt_delimiter': ' ', 'stop_tokens': None, 'tools': [], \
'tool_prompt': '', 'tool_request_parser': None, \
'tool_response_insertion_function': None, 'argument_renames': {}, \
'evaluator': None, 'known_params': ['model', 'prompt', 'temperature', \
'candidate_count', 'max_output_tokens', 'top_p', 'top_k', 'safety_settings', \
'stop_sequences', 'client'], 'response_object_attribute': 'result', \
'response_value_keys': [], 'llm_evaluator': None}"}, {"echo", "False"}, {
                  "args2", 
                   "{'model': 'models/text-bison-001', 'temperature': 0.2, \
'prompt': '  Give 10 random music artist names in a list in JSON format.'}"}, \
{"fullPrompt", ""}, {
                  "messages", 
                   "  Give 10 random music artist names in a list in JSON \
format."}, {"self", "{'conf': None, 'formatron': None}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/text.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/text.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/text.py"]], Appearance -> "Frameless"], 
              " in ", "generate_text"}], 
            Column[{
              
              Column[{" 132.          max_output_tokens=max_output_tokens,", 
                " 133.          top_p=top_p,", " 134.          top_k=top_k,", 
                " 135.          safety_settings=safety_settings,", 
                " 136.          stop_sequences=stop_sequences,", 
                " 137.      )", " 138.  ", 
                Item[
                " 139.      return _generate_response(client=client, \
request=request)", Background -> LightYellow], " 140.  ", " 141.  ", 
                " 142.  @dataclasses.dataclass(init=False)", 
                " 143.  class Completion(text_types.Completion):", 
                " 144.      def __init__(self, **kwargs):", 
                " 145.          for key, value in kwargs.items():"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {"model", "models/text-bison-001"}, {
                  "prompt", 
                   "  Give 10 random music artist names in a list in JSON \
format."}, {"temperature", "0.2"}, {"candidate_count", "None"}, {
                  "max_output_tokens", "None"}, {"top_p", "None"}, {
                  "top_k", "None"}, {"safety_settings", "None"}, {
                  "stop_sequences", "None"}, {"client", "None"}, {
                  "request", 
                   "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}}, Background -> {Null, {LightGray}}, Alignment -> Left, 
                 Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/text.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/text.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/text.py"]], Appearance -> "Frameless"], 
              " in ", "_generate_response"}], 
            Column[{
              
              Column[{" 150.              self.result = \
self.candidates[0][\"output\"]", " 151.  ", " 152.  ", 
                " 153.  def _generate_response(", 
                " 154.      request: glm.GenerateTextRequest, client: \
glm.TextServiceClient = None", " 155.  ) -> Completion:", 
                " 156.      if client is None:", 
                Item[
                " 157.          client = get_default_text_client()", 
                 Background -> LightYellow], " 158.  ", 
                " 159.      response = client.generate_text(request)", 
                " 160.      response = type(response).to_dict(response)", 
                " 161.  ", 
                " 162.      response[\"filters\"] = \
safety_types.convert_filters_to_enums(response[\"filters\"])", 
                " 163.      response[\"safety_feedback\"] = \
safety_types.convert_safety_feedback_to_enums("}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "request", 
                   "model: \"models/text-bison-001\"\nprompt {\n  text: \"  \
Give 10 random music artist names in a list in JSON format.\"\n}\n\
temperature: 0.2\n"}, {"client", "None"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/client.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/client.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/generativeai/client.py"]], Appearance -> "Frameless"], 
              " in ", "get_default_text_client"}], 
            Column[{
              
              Column[{" 126.  ", " 127.  def get_default_text_client():", 
                " 128.      global default_text_client", 
                " 129.      if default_text_client is None:", 
                " 130.          # Attempt to configure using defaults.", 
                " 131.          if not default_client_config:", 
                " 132.              configure()", 
                Item[
                " 133.          default_text_client = \
glm.TextServiceClient(**default_client_config)", Background -> LightYellow], 
                " 134.  ", " 135.      return default_text_client", " 136.  ",
                 " 137.  ", 
                " 138.  def get_default_discuss_async_client() -> \
glm.DiscussServiceAsyncClient:", 
                " 139.      global default_discuss_async_client"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              "No local variables"}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
client.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
            Column[{
              
              Column[{" 421.                  google.auth._default, \
\"get_api_key_credentials\"", " 422.              ):", 
                " 423.                  credentials = \
google.auth._default.get_api_key_credentials(", 
                " 424.                      api_key_value", 
                " 425.                  )", " 426.  ", 
                " 427.              Transport = \
type(self).get_transport_class(transport)", 
                Item[
                " 428.              self._transport = Transport(", Background -> 
                 LightYellow], 
                " 429.                  credentials=credentials,", 
                " 430.                  \
credentials_file=client_options.credentials_file,", 
                " 431.                  host=api_endpoint,", 
                " 432.                  scopes=client_options.scopes,", 
                " 433.                  \
client_cert_source_for_mtls=client_cert_source_func,", 
                " 434.                  \
quota_project_id=client_options.quota_project_id,"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<google.ai.generativelanguage_v1beta2.services.text_\
service.client.TextServiceClient object at 0x134635330>"}, {
                  "credentials", "None"}, {"transport", "None"}, {
                  "client_options", 
                   "ClientOptions: {'api_endpoint': None, \
'client_cert_source': None, 'client_encrypted_cert_source': None, \
'quota_project_id': None, 'credentials_file': None, 'scopes': None, \
'api_key': None, 'api_audience': None}"}, {
                  "client_info", 
                   "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"api_endpoint", "generativelanguage.googleapis.com"}, {
                  "client_cert_source_func", "None"}, {
                  "api_key_value", "None"}, {
                  "google", 
                   "<module 'google' \
(<_frozen_importlib_external._NamespaceLoader object at 0x100fad8a0>)>"}, {
                  "Transport", 
                   "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/grpc.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
            Column[{
              
              Column[{" 144.                  if client_cert_source_for_mtls \
and not ssl_channel_credentials:", 
                " 145.                      cert, key = \
client_cert_source_for_mtls()", 
                " 146.                      self._ssl_channel_credentials = \
grpc.ssl_channel_credentials(", 
                " 147.                          certificate_chain=cert, \
private_key=key", " 148.                      )", " 149.  ", 
                " 150.          # The base transport sets the host, \
credentials and scopes", 
                Item[
                " 151.          super().__init__(", Background -> 
                 LightYellow], " 152.              host=host,", 
                " 153.              credentials=credentials,", 
                " 154.              credentials_file=credentials_file,", 
                " 155.              scopes=scopes,", 
                " 156.              quota_project_id=quota_project_id,", 
                " 157.              client_info=client_info,"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                  "host", "generativelanguage.googleapis.com"}, {
                  "credentials", "None"}, {"credentials_file", "None"}, {
                  "scopes", "None"}, {"channel", "None"}, {
                  "api_mtls_endpoint", "None"}, {
                  "client_cert_source", "None"}, {
                  "ssl_channel_credentials", "None"}, {
                  "client_cert_source_for_mtls", "None"}, {
                  "quota_project_id", "None"}, {
                  "client_info", 
                   "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {
                  "api_audience", "None"}, {
                  "__class__", 
                   "<class \
'google.ai.generativelanguage_v1beta2.services.text_service.transports.grpc.\
TextServiceGrpcTransport'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/ai/generativelanguage_v1beta2/services/text_service/\
transports/base.py"]], Appearance -> "Frameless"], " in ", "__init__"}], 
            Column[{
              
              Column[{"  90.              )", "  91.  ", 
                "  92.          if credentials_file is not None:", 
                "  93.              credentials, _ = \
google.auth.load_credentials_from_file(", 
                "  94.                  credentials_file, **scopes_kwargs, \
quota_project_id=quota_project_id", "  95.              )", 
                "  96.          elif credentials is None:", 
                Item[
                "  97.              credentials, _ = google.auth.default(", 
                 Background -> LightYellow], 
                "  98.                  **scopes_kwargs, \
quota_project_id=quota_project_id", "  99.              )", 
                " 100.              # Don't apply audience if the credentials \
file passed from user.", 
                " 101.              if hasattr(credentials, \
\"with_gdch_audience\"):", 
                " 102.                  credentials = \
credentials.with_gdch_audience(", 
                " 103.                      api_audience if api_audience else \
host"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", 
                   "<google.ai.generativelanguage_v1beta2.services.text_\
service.transports.grpc.TextServiceGrpcTransport object at 0x134636a40>"}, {
                  "host", "generativelanguage.googleapis.com"}, {
                  "credentials", "None"}, {"credentials_file", "None"}, {
                  "scopes", "None"}, {"quota_project_id", "None"}, {
                  "client_info", 
                   "<google.api_core.gapic_v1.client_info.ClientInfo object \
at 0x134657400>"}, {"always_use_jwt_access", "True"}, {
                  "api_audience", "None"}, {"kwargs", "{}"}, {
                  "scopes_kwargs", "{'scopes': None, 'default_scopes': ()}"}},
                  Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/auth/_default.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/auth/_default.py"], 
                SystemOpen[
                "/Users/antonov/miniforge3/envs/SciPyCentric/lib/python3.10/\
site-packages/google/auth/_default.py"]], Appearance -> "Frameless"], " in ", 
              "default"}], 
            Column[{
              
              Column[{" 685.                      \"No project ID could be \
determined. Consider running \"", 
                " 686.                      \"`gcloud config set project` or \
setting the %s \"", " 687.                      \"environment variable\",", 
                " 688.                      environment_vars.PROJECT,", 
                " 689.                  )", 
                " 690.              return credentials, effective_project_id",
                 " 691.  ", 
                Item[
                " 692.      raise \
exceptions.DefaultCredentialsError(_CLOUD_SDK_MISSING_CREDENTIALS)", 
                 Background -> LightYellow]}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {"scopes", "None"}, {
                  "default_scopes", "()"}, {
                  "with_scopes_if_required", 
                   "<function with_scopes_if_required at 0x104083010>"}, {
                  "CredentialsWithQuotaProject", 
                   "<class \
'google.auth.credentials.CredentialsWithQuotaProject'>"}, {
                  "explicit_project_id", "None"}, {
                  "checkers", 
                   "(<function default.<locals>.<lambda> at 0x1303d1ea0>, \
<function default.<locals>.<lambda> at 0x1346913f0>, <function \
_get_gae_credentials at 0x104080e50>, <function default.<locals>.<lambda> at \
0x134691360>)"}, {
                  "checker", 
                   "<function default.<locals>.<lambda> at 0x134691360>"}, {
                  "credentials", "None"}, {"project_id", "None"}, {
                  "quota_project_id", "None"}, {"request", "None"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.905291156491623*^9, 3.905291182543457*^9}},
 CellLabel->"Out[51]=",ExpressionUUID->"bf376bc6-72e4-4e15-a62d-33168ceca2fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
artistNames2 = [list(item.items())[0][1] for item in artistNames if \
isinstance(item, dict)]
artistNames2\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[49]:=",ExpressionUUID->"9269b05f-d872-4d1f-aed6-71d681bb7f64"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.905291069822474*^9, 3.905291156521495*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"4801659d-4e11-43cf-8f97-ce55f1a2fa53"]
}, Open  ]],

Cell["\<\
Here is a loop that generates the biographies and does NER over them:\
\>", "Text",ExpressionUUID->"b1242869-20f6-4286-84a3-1d2e1bb36d64"],

Cell[CellGroupData[{

Cell["\<\
dbRes = []
for a in artistNames2:
    text = fdb(a)
    recs = fner('album names and release dates', text)    
    dbRes = dbRes + [recs, ]

dbRes\
\>", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[50]:=",ExpressionUUID->"9c54dc68-411a-499c-b6ed-4548dd327b67"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.905291069875242*^9, 3.905291160784322*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"047c2e35-691c-4499-9f2c-4b35020152e8"]
}, Open  ]],

Cell[TextData[{
 "Here",
 " ",
 "we",
 " ",
 "call",
 " ",
 StyleBox["deduce_type", "Program"],
 " ",
 "on",
 " ",
 "each",
 " ",
 "LLM",
 " ",
 "output:"
}], "Text",ExpressionUUID->"dd60cf1a-319b-4254-ace0-6e0beacb59bf"],

Cell[CellGroupData[{

Cell["[deduce_type(x) for x in dbRes]", "ExternalLanguage",
 CellEvaluationLanguage->"Python",
 CellLabel->"In[45]:=",ExpressionUUID->"6dbca221-6a5e-4a3e-b91a-029595ade7ed"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.905291069910597*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"bd710f09-456e-4451-891d-7b2ea693183e"]
}, Open  ]],

Cell[TextData[{
 "Here",
 " ",
 "we",
 " ",
 "redo",
 " ",
 "the",
 " ",
 "type",
 " ",
 "deduction",
 " ",
 "using",
 " ",
 "the",
 " ",
 "argument",
 " ",
 "setting",
 " ",
 StyleBox["tally=True", "Program"],
 " ",
 ":"
}], "Text",ExpressionUUID->"51f18bf3-3d70-4a26-bc6c-f7817d799d5f"],

Cell["[deduce_type(x, tally=True) for x in dbRes]", "ExternalLanguage",
 CellEvaluationLanguage->
  "Python",ExpressionUUID->"77fc29a4-fd8c-4519-83ab-92fdc4c70177"],

Cell[TextData[{
 "We",
 " ",
 "see",
 " ",
 "that",
 " ",
 "the",
 " ",
 "LLM",
 " ",
 "outputs",
 " ",
 "produce",
 " ",
 "lists",
 " ",
 "of",
 " ",
 StyleBox["Pair", "Program"],
 " ",
 "objects",
 " ",
 "\"surrounded\"",
 " ",
 "by",
 " ",
 "strings:"
}], "Text",ExpressionUUID->"c7560797-84b1-4608-b67e-e358042ef429"],

Cell["[record_types(x) for x in dbRes]", "ExternalLanguage",
 CellEvaluationLanguage->
  "Python",ExpressionUUID->"031c592b-fcc7-4b5c-98b6-f7fc32deec51"],

Cell["Another record types finding call over the dictionaries:", "Text",ExpressionUUID->"d1888f92-c718-4082-bf09-b3397e569a3e"],

Cell["[record_types(x[1]) for x in dbRes]", "ExternalLanguage",
 CellEvaluationLanguage->
  "Python",ExpressionUUID->"8254b17f-772e-4cee-a246-3d4c51e72869"],

Cell["\<\
The statistics show that most likely the output we get from the execution of \
the LLM-functions pipeline is a list of a string and a dictionary. The \
dictionaries are most likely to be of length one, with \"albums\" as the key.\
\
\>", "Text",ExpressionUUID->"4c09f9cb-ae4a-4e71-a798-42d95e7bb9ce"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"7cc55c5a-d257-4a78-861c-37596f0ff343"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other workflows", "Section",ExpressionUUID->"97c3da03-c955-4ad5-82f1-cbe418779306"],

Cell["In the future other workflows are going to be described:", "Text",ExpressionUUID->"90ffc454-e8d7-49d1-a702-0caf703300f5"],

Cell["Interactive building of grammars", "Item",ExpressionUUID->"ba831b56-6aac-43c1-b34a-338a09ef51c4"],

Cell["Using LLM-based code writing assistants", "Item",ExpressionUUID->"e8b4e370-d49f-4919-ba32-8cc19710bcbf"],

Cell[CellGroupData[{

Cell["Test suite generation via Gherkin specifications", "Item",ExpressionUUID->"13015470-1520-41f7-b7a0-689a17e0f856"],

Cell[TextData[{
 "Here",
 " ",
 "is",
 " ",
 "a",
 " ",
 ButtonBox["teaser",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/Raku-LLM-Functions/blob/main/docs/\
Convert-tests-into-Gherkin-specs_woven.md"], None}],
 " ",
 "."
}], "Subitem",ExpressionUUID->"d1b0bf96-8a87-4d43-ab59-fc743d4dc0ad"]
}, Open  ]],

Cell["(Reliable) code generation from help pages", "Item",ExpressionUUID->"1b81e3dc-a201-4053-b645-0bdd80fce4e0"],

Cell["\<\
Most likely all of the listed workflows would use chat objects and engineered \
prompts.\
\>", "Text",ExpressionUUID->"4b1a1ca8-1982-4470-a2c0-1256bd4f7f15"],

Cell["\t",
 ShowCellBracket->Automatic,
 TabFilling->"\[LongDash]\[NegativeThickSpace]",
 TabSpacings->Scaled[1],
 FontColor->GrayLevel[
  0.4],ExpressionUUID->"1928a612-c47c-4023-b318-2853095b432c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",ExpressionUUID->"f09d7496-a238-4f42-95e3-1719ecbdd408"],

Cell[CellGroupData[{

Cell["Articles", "Subsection",ExpressionUUID->"045b45fa-d430-408f-8568-8deef82961de"],

Cell[TextData[{
 "[AA1]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["\"Generating documents via templates and LLMs\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://rakuforprediction.wordpress.com/2023/07/11/generating-\
documents-via-templates-and-llms/"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["RakuForPrediction at WordPress",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://rakuforprediction.wordpress.com"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"a8a07a50-360d-4b2e-83e2-485e67e0fbf8"],

Cell[TextData[{
 "[AA2]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["\"Connecting Mathematica and Raku\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://rakuforprediction.wordpress.com/2021/12/30/connecting-\
mathematica-and-raku/"], None}],
 " ",
 ",",
 " ",
 "(2021),",
 " ",
 ButtonBox["RakuForPrediction at WordPress",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://rakuforprediction.wordpress.com"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"cb5f25f0-9dd8-49e6-87c8-34546fd95068"],

Cell[TextData[{
 "[SW1]",
 " ",
 "Stephen",
 " ",
 "Wolfram,",
 " ",
 ButtonBox["\"The New World of LLM Functions: Integrating LLM Technology into \
the Wolfram Language\"",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://writings.stephenwolfram.com/2023/05/the-new-world-of-llm-\
functions-integrating-llm-technology-into-the-wolfram-language/"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["Stephen Wolfram Writings",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://writings.stephenwolfram.com"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"49dd7446-3f63-42fc-9b94-baa1c44bb4e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Repositories, sites", "Subsection",ExpressionUUID->"4e3ac04f-99fb-480e-83e6-46bf51bf010e"],

Cell[TextData[{
 "[WRIr1]",
 " ",
 "Wolfram",
 " ",
 "Research,",
 " ",
 "Inc.",
 " ",
 ButtonBox["Wolfram Prompt Repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PromptRepository/"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"4d191e2c-4897-49c5-ae35-4eafd75b1832"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Packages, paclets", "Subsection",ExpressionUUID->"598e9f2c-35cc-435a-8e87-4ac028cafc24"],

Cell[TextData[{
 "[AAp1]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["LLMFunctionObjects Python package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/Python-packages/tree/main/\
LLMFunctionObjects"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["Python-packages at GitHub/antononcube",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/Python-packages"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"5b3d6346-14fe-41fd-9775-2b2a07945f87"],

Cell[TextData[{
 "[AAp2]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["LLMPrompts Python package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["hhttps://github.com/antononcube/Python-packages/tree/main/\
LLMPrompts"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["Python-packages at GitHub/antononcube",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/Python-packages"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"703eee00-7911-4c63-ac39-786564c4186b"],

Cell[TextData[{
 "[AAp3]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["LLM::Functions Raku package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/Raku-LLM-Functions"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["GitHub/antononcube",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"29db18da-013c-481e-a632-8df8e56ca9db"],

Cell[TextData[{
 "[AAp4]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["LLM::Prompts Raku package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube/Raku-LLM-Prompts"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["GitHub/antononcube",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/antononcube"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"5aff7be3-bd2b-44ad-9be0-e0787212b1d8"],

Cell[TextData[{
 "[AAp5]",
 " ",
 "Anton",
 " ",
 "Antonov,",
 " ",
 ButtonBox["DataTypeSystem Python package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/DataTypeSystem/"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["PyPI.org/antononcube",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/user/antononcube/"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"2b872d0c-f573-496f-81db-b8cd82791515"],

Cell[TextData[{
 "[APY1]",
 " ",
 "Astropy,",
 " ",
 ButtonBox["Astropy",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/astropy/astropy"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["GitHub/astropy",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/astropy"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"518aa330-a184-479f-a4df-497e755cbe91"],

Cell[TextData[{
 "[GAIp1]",
 " ",
 "Google",
 " ",
 "AI,",
 " ",
 ButtonBox["google-generativeai (Google Generative AI Python Client)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/google-generativeai/"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["PyPI.org/google-ai",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/user/google-ai/"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"9985c238-17b8-4058-a1cd-15eb49fa6a0e"],

Cell[TextData[{
 "[OAIp1]",
 " ",
 "OpenAI,",
 " ",
 ButtonBox["openai (OpenAI Python Library)",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/project/openai/"], None}],
 " ",
 ",",
 " ",
 "(2020-2023),",
 " ",
 ButtonBox["PyPI.org",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://pypi.org/"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"3497af4f-579b-4ee5-a833-9cbbbc401ab3"],

Cell[TextData[{
 "[WRIp1]",
 " ",
 "Wolfram",
 " ",
 "Research,",
 " ",
 "Inc.,",
 " ",
 ButtonBox["LLMFunctions WL paclet",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/resources/\
Wolfram/LLMFunctions/"], None}],
 " ",
 ",",
 " ",
 "(2023),",
 " ",
 ButtonBox["Wolfram Language Paclet Repository",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/PacletRepository/"], None}],
 " ",
 "."
}], "Text",ExpressionUUID->"9ca9b57c-28c6-424a-9a67-19310fe953a6"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 1066},
WindowMargins->{{863, Automatic}, {Automatic, 66}},
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (June 3, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c103b3b1-93d2-4043-b558-be0760cff804"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 100, 0, 98, "Title",ExpressionUUID->"6c69736b-12bd-42e4-bf14-900289336607"],
Cell[CellGroupData[{
Cell[705, 26, 86, 0, 67, "Section",ExpressionUUID->"226eb981-28d1-4758-beb4-7f0f6d31445d"],
Cell[794, 28, 250, 4, 35, "Text",ExpressionUUID->"e25ad530-da24-4c5c-8c34-a60e5db283e4"],
Cell[1047, 34, 415, 6, 58, "Text",ExpressionUUID->"1122982f-46c5-4c62-8336-c31a0d4bd06c"],
Cell[1465, 42, 454, 35, 35, "Text",ExpressionUUID->"0a2ac6e0-e8e1-4836-91b8-7d7c789b486e"],
Cell[CellGroupData[{
Cell[1944, 81, 88, 0, 54, "Subsection",ExpressionUUID->"2c60636f-f380-4239-9aff-5e0b91f9f712"],
Cell[2035, 83, 542, 8, 58, "Text",ExpressionUUID->"28d40f67-02c2-4ef5-9f3c-776baadca516"],
Cell[2580, 93, 243, 4, 35, "Text",ExpressionUUID->"e8bd3f67-93eb-4a2d-abd7-40807c6aabc3"],
Cell[2826, 99, 1088, 121, 58, "Text",ExpressionUUID->"e7dad165-361e-46d0-9cca-5a4ceff2f786"],
Cell[3917, 222, 358, 5, 58, "Text",ExpressionUUID->"b47a4b73-ab63-4d00-8e4b-dd5b91ab1d0f"],
Cell[4278, 229, 419, 41, 35, "Text",ExpressionUUID->"b0b5ecf7-a225-4e31-9537-42527c5875c1"],
Cell[4700, 272, 277, 5, 35, "Text",ExpressionUUID->"1c23288c-15d6-4aa3-90c3-748791da6245"],
Cell[4980, 279, 344, 5, 58, "Text",ExpressionUUID->"06b2afc1-3094-4985-98af-dc67eeef9438"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5361, 289, 98, 0, 54, "Subsection",ExpressionUUID->"f429d17c-a9c1-4ff6-889b-c8bc00b27072"],
Cell[5462, 291, 322, 29, 35, "Text",ExpressionUUID->"7099fca3-a223-4b10-ba7a-577e83597646"],
Cell[5787, 322, 126, 0, 32, "Item",ExpressionUUID->"4348955d-70d9-4484-8cd6-db687d7b621b"],
Cell[5916, 324, 171, 3, 32, "Item",ExpressionUUID->"59cbb6dd-93ef-4aad-858b-152687d7d3e6"],
Cell[6090, 329, 283, 4, 35, "Text",ExpressionUUID->"35248c6f-eff5-43f7-aee2-75b963f37492"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6410, 338, 100, 0, 54, "Subsection",ExpressionUUID->"34b7f233-d6d2-4e50-99d5-7081b9aac0b8"],
Cell[6513, 340, 554, 42, 35, "Text",ExpressionUUID->"b77df5d9-64dc-4a38-a4cb-a0e3b21b0bf7"],
Cell[7070, 384, 330, 5, 58, "Text",ExpressionUUID->"29778a36-f3a3-4426-80b5-508dceaf63c4"],
Cell[7403, 391, 128, 0, 35, "Text",ExpressionUUID->"17603f06-2bc8-4149-898a-2e90a083c4be"],
Cell[7534, 393, 347, 14, 32, "ItemNumbered",ExpressionUUID->"413d41c5-9f5a-42aa-acf0-e0cd7336d03f"],
Cell[7884, 409, 278, 11, 32, "ItemNumbered",ExpressionUUID->"73e129d0-2648-429f-96b0-38b97a736959"],
Cell[8165, 422, 452, 13, 32, "ItemNumbered",ExpressionUUID->"4d7d51d0-4582-4c80-aafe-4edddbbfa3d8"],
Cell[8620, 437, 356, 22, 35, "Text",ExpressionUUID->"9a505bb3-312a-44b0-ab2d-0920dc017ed6"],
Cell[8979, 461, 203, 3, 35, "Text",ExpressionUUID->"d058b15c-ae21-4d1a-a4f6-8793a4edaa12"],
Cell[9185, 466, 140, 2, 32, "Item",ExpressionUUID->"351fab33-7c4b-465d-9dd0-d4dfe565f26d"],
Cell[9328, 470, 144, 2, 32, "Item",ExpressionUUID->"fc3731d8-916d-4518-996e-9d76055d3372"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9509, 477, 94, 0, 54, "Subsection",ExpressionUUID->"2e2029a4-d2a3-414d-9c90-bfc3b85e50af"],
Cell[9606, 479, 104, 0, 35, "Text",ExpressionUUID->"a758173d-e19f-450a-963f-70f621da2b7b"],
Cell[9713, 481, 154, 2, 32, "Item",ExpressionUUID->"5ced672c-e867-4ac9-b108-cec87aded96f"],
Cell[9870, 485, 167, 3, 35, "Text",ExpressionUUID->"8432e99b-36b6-4b21-b54a-030fa8d957da"],
Cell[10040, 490, 121, 1, 32, "Item",ExpressionUUID->"f0f53ce4-0594-4ab4-a781-0218441f8196"],
Cell[10164, 493, 103, 0, 35, "Text",ExpressionUUID->"b3c1e769-e3aa-49dc-80f7-0e0cd2feda20"],
Cell[10270, 495, 131, 1, 32, "Item",ExpressionUUID->"daae5223-3bb3-41f9-a65e-28ea9dfdb540"],
Cell[10404, 498, 170, 3, 35, "Text",ExpressionUUID->"b694f3fc-a464-439b-9d26-b590eae01eef"],
Cell[10577, 503, 142, 2, 32, "Item",ExpressionUUID->"6d089305-4278-41d9-b71f-15d80d0e42bb"],
Cell[10722, 507, 142, 2, 35, "Text",ExpressionUUID->"8afe3edf-23b5-43f5-a93d-f8033565a5d3"],
Cell[10867, 511, 129, 1, 32, "Item",ExpressionUUID->"74db5e09-0d2c-4112-ba54-0f71094f2d53"],
Cell[10999, 514, 127, 0, 35, "Text",ExpressionUUID->"3fcec9e1-5460-4bb2-be7d-d9632f37a526"],
Cell[11129, 516, 148, 2, 32, "Item",ExpressionUUID->"61cd353c-e476-421d-8132-cb30f6b42a30"],
Cell[11280, 520, 161, 3, 35, "Text",ExpressionUUID->"05482b84-b8fe-4c27-9d6e-bfa2871573d6"],
Cell[11444, 525, 138, 2, 32, "Item",ExpressionUUID->"4fac82e9-0737-4ea1-89ab-c5e4c563cd2e"],
Cell[11585, 529, 161, 3, 35, "Text",ExpressionUUID->"f519c658-76b2-425f-8121-afb331efc349"],
Cell[11749, 534, 145, 2, 32, "Item",ExpressionUUID->"c5f65828-c0dc-4f4f-9751-8d486186f98c"],
Cell[11897, 538, 149, 2, 35, "Text",ExpressionUUID->"de0378f9-14a3-4319-af82-556f7d63e250"],
Cell[12049, 542, 127, 1, 32, "Item",ExpressionUUID->"d4c33e1d-733c-4f57-a35d-c75c8e0d3188"],
Cell[12179, 545, 174, 3, 35, "Text",ExpressionUUID->"fc1f0338-d20a-4535-bfd0-819e210f7398"],
Cell[12356, 550, 806, 87, 58, "Text",ExpressionUUID->"972dd3d5-4483-4a31-bf91-b85e86a49913"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13199, 642, 100, 0, 54, "Subsection",ExpressionUUID->"0b96acf0-b0a3-488c-8ffd-a1d9f8a629a1"],
Cell[13302, 644, 112, 0, 35, "Text",ExpressionUUID->"a3f87f65-3b33-45fc-8305-6a5f774f566c"],
Cell[13417, 646, 373, 11, 135, "ExternalLanguage",ExpressionUUID->"f07165bb-6a66-4209-bd0b-4d728e24da12"],
Cell[13793, 659, 828, 57, 35, "Text",ExpressionUUID->"79ece691-ba6e-42c5-a7d6-87ef1428311d"],
Cell[14624, 718, 235, 3, 35, "Text",ExpressionUUID->"c9162750-0d36-4a65-82e8-f396dc6c7acb"],
Cell[14862, 723, 201, 3, 35, "Text",ExpressionUUID->"8867ac40-01a8-454a-8b34-0e78982d5933"],
Cell[CellGroupData[{
Cell[15088, 730, 858, 20, 237, "ExternalLanguage",ExpressionUUID->"a8f1c435-fb95-4cc7-8a53-036675455007"],
Cell[15949, 752, 293, 5, 34, "Output",ExpressionUUID->"7385a963-51c4-4fc0-82a9-ca4990545bad"]
}, Open  ]],
Cell[16257, 760, 237, 4, 35, "Text",ExpressionUUID->"f487c0f0-e46f-4129-a4b5-750376a98a28"],
Cell[16497, 766, 387, 7, 67, "ExternalLanguage",ExpressionUUID->"0464bf60-3a52-46ad-b842-056764589b72"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16921, 778, 238, 4, 54, "Subsection",ExpressionUUID->"57b81f5c-66a9-476f-9408-b7ef772cb877"],
Cell[17162, 784, 489, 12, 35, "Text",ExpressionUUID->"0053a1dc-c2fa-47ee-996d-821393b44c62"],
Cell[CellGroupData[{
Cell[17676, 800, 514, 16, 220, "ExternalLanguage",ExpressionUUID->"ed809b5d-7e4e-45a0-8e01-ccc2ffc1517c"],
Cell[18193, 818, 51428, 962, 65, "Output",ExpressionUUID->"ab90dfcb-1819-4a48-b86e-50b17ebaf0a2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[69670, 1786, 91, 0, 54, "Subsection",ExpressionUUID->"1f3e8173-eddc-435c-90cc-405f1306104f"],
Cell[69764, 1788, 187, 3, 35, "Text",ExpressionUUID->"4ee14601-a65a-4126-8f74-c6afc032b5df"],
Cell[69954, 1793, 245, 4, 32, "Item",ExpressionUUID->"ca6771c0-9be1-4e07-b261-0a27a65de81a"],
Cell[70202, 1799, 243, 4, 32, "Item",ExpressionUUID->"64443e14-2992-42f4-ae3d-0401d75f086f"],
Cell[70448, 1805, 199, 5, 20, InheritFromParent,ExpressionUUID->"3a494bd8-7b52-4679-9e9a-1fd55244013f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[70696, 1816, 114, 0, 67, "Section",ExpressionUUID->"bd135be9-36b4-40bc-b060-b2dc0773d6cb"],
Cell[70813, 1818, 252, 4, 35, "Text",ExpressionUUID->"b64ee95f-6fd3-4dc0-bd37-fb51459a0406"],
Cell[71068, 1824, 122, 0, 35, "Text",ExpressionUUID->"b4ffe539-4f54-44d9-839d-7face8042629"],
Cell[71193, 1826, 279176, 4580, 1465, "Output",ExpressionUUID->"cd726e1e-f176-48f8-b325-7b4a9031c906"],
Cell[350372, 6408, 107, 0, 35, "Text",ExpressionUUID->"5b1826be-dd5a-4994-8d48-1590ca4672c3"],
Cell[350482, 6410, 215, 15, 32, "Item",ExpressionUUID->"0a56ce37-8410-4ae6-96ae-95d6cd944688"],
Cell[350700, 6427, 337, 29, 32, "Item",ExpressionUUID->"53bb769c-b18e-4065-bcc4-b345e3f84f1e"],
Cell[351040, 6458, 238, 15, 32, "Item",ExpressionUUID->"1408c425-f6b8-4b07-a258-c7ed1e620b22"],
Cell[351281, 6475, 294, 23, 32, "Item",ExpressionUUID->"8cef4a4d-2ea0-492b-8dd5-73c19fab5be7"],
Cell[351578, 6500, 257, 17, 32, "Item",ExpressionUUID->"7367dfe1-a5cb-4523-90b3-11bb7c262cb0"],
Cell[351838, 6519, 272, 21, 32, "Item",ExpressionUUID->"b6463c39-a45e-4131-b948-caa0476d541e"],
Cell[352113, 6542, 343, 29, 32, "Item",ExpressionUUID->"76010d55-f535-455e-9a85-fa29f759bcf0"],
Cell[CellGroupData[{
Cell[352481, 6575, 419, 35, 32, "Item",ExpressionUUID->"8436f512-dbc3-4eb9-8de8-fea3fea56660"],
Cell[352903, 6612, 156, 2, 27, "Subitem",ExpressionUUID->"207f64c3-f5fe-4159-84d7-bad26ec97072"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353096, 6619, 389, 33, 32, "Item",ExpressionUUID->"5cead472-5746-4094-ac8f-e79f98d664da"],
Cell[353488, 6654, 164, 2, 27, "Subitem",ExpressionUUID->"d1f10df6-863b-4c34-82e7-68158980d69c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[353689, 6661, 451, 39, 32, "Item",ExpressionUUID->"1c534bd8-90e8-4522-92ad-8a4c8199bb02"],
Cell[354143, 6702, 222, 3, 27, "Subitem",ExpressionUUID->"973f4ae8-8ab2-46f9-9538-da92932a36a0"]
}, Open  ]],
Cell[354380, 6708, 639, 63, 32, "Item",ExpressionUUID->"989e1287-f4d5-42dc-a22f-dac2d1520b74"],
Cell[355022, 6773, 373, 31, 32, "Item",ExpressionUUID->"0cea0a8b-3922-4896-9978-3a09b91c7080"],
Cell[355398, 6806, 284, 19, 32, "Item",ExpressionUUID->"3f3107e7-2fa3-4067-9907-73df64f54951"],
Cell[355685, 6827, 322, 21, 32, "Item",ExpressionUUID->"63189085-ea75-41e6-b7b5-212fee5f676d"],
Cell[356010, 6850, 443, 39, 32, "Item",ExpressionUUID->"b6b815fd-7f37-4ac4-b48b-3092fb058726"],
Cell[356456, 6891, 293, 19, 32, "Item",ExpressionUUID->"eb24284e-8403-49db-b815-b9fe1364f4b3"],
Cell[CellGroupData[{
Cell[356774, 6914, 358, 27, 32, "Item",ExpressionUUID->"7336fd7c-09e5-4b90-b6d7-3a0c5d3d47b6"],
Cell[357135, 6943, 207, 3, 27, "Subitem",ExpressionUUID->"08d22d40-b983-44d7-b2b4-676dc95ac331"]
}, Open  ]],
Cell[CellGroupData[{
Cell[357379, 6951, 512, 44, 32, "Item",ExpressionUUID->"0c62b7cd-d5fd-4b79-831b-b6f2b34b2d9b"],
Cell[357894, 6997, 252, 4, 27, "Subitem",ExpressionUUID->"b7922720-b2bb-4649-ab10-b7ab214644d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[358183, 7006, 332, 27, 32, "Item",ExpressionUUID->"10332333-a7db-4d6d-889e-f828db50a78b"],
Cell[358518, 7035, 224, 3, 27, "Subitem",ExpressionUUID->"d437914d-5224-4683-ab71-f75e70d2134c"]
}, Open  ]],
Cell[358757, 7041, 390, 35, 32, "Item",ExpressionUUID->"4f3ea52f-3f23-4549-b725-7a3b2f94f554"],
Cell[359150, 7078, 207, 15, 32, "Item",ExpressionUUID->"ce1b8ac5-80f1-408d-99e3-bfd8d9b908cf"],
Cell[359360, 7095, 84, 0, 35, "Text",ExpressionUUID->"670e7ed9-ba82-4b7a-b97f-f3f7fc44e69f"],
Cell[359447, 7097, 170, 3, 32, "Item",ExpressionUUID->"1d3ea08e-eef7-406f-8806-a04fd972029b"],
Cell[359620, 7102, 171, 3, 32, "Item",ExpressionUUID->"0116aac9-e88f-46db-b136-656fb17c216d"],
Cell[359794, 7107, 160, 3, 32, "Item",ExpressionUUID->"7f5674f6-8f19-4092-b006-5b5f0499f257"],
Cell[359957, 7112, 173, 3, 32, "Item",ExpressionUUID->"567f1288-c016-40a3-92d8-77918c35b73c"],
Cell[360133, 7117, 195, 3, 32, "Item",ExpressionUUID->"4004679a-002f-4689-822b-4195a57e4f52"],
Cell[360331, 7122, 408, 39, 35, "Text",ExpressionUUID->"0bb52c03-df48-4555-adf4-1fde80d6d6c6"],
Cell[360742, 7163, 357, 33, 35, "Text",ExpressionUUID->"23d7ff4e-b14a-4233-bea4-b80e66e7879f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361136, 7201, 83, 0, 67, "Section",ExpressionUUID->"ec1037db-499f-422b-88b9-efd9202a129c"],
Cell[361222, 7203, 243, 17, 35, "Text",ExpressionUUID->"ff8ee189-fdae-4825-b231-1e05f4af4696"],
Cell[361468, 7222, 197, 3, 32, "ItemNumbered",ExpressionUUID->"e8a1c702-412e-4859-b344-7007aa63061f"],
Cell[361668, 7227, 170, 3, 32, "ItemNumbered",ExpressionUUID->"e4922141-3d3b-4ea5-ac72-73ab5f203621"],
Cell[361841, 7232, 128, 0, 32, "ItemNumbered",ExpressionUUID->"ef3edac7-9b89-4530-b8aa-a41ff8dccca8"],
Cell[361972, 7234, 117, 0, 32, "ItemNumbered",ExpressionUUID->"e61cda90-6ce3-4df9-8a35-54282aec2c2f"],
Cell[362092, 7236, 120, 0, 35, "Text",ExpressionUUID->"3e60f52e-1038-4b37-8662-fe7b54792dab"],
Cell[362215, 7238, 490, 10, 101, "ExternalLanguage",ExpressionUUID->"6e71cd2d-24d4-46ee-932b-121052a08647"],
Cell[CellGroupData[{
Cell[362730, 7252, 90, 0, 54, "Subsection",ExpressionUUID->"78287a48-4128-48f6-906a-93dcffcd2d9d"],
Cell[362823, 7254, 145, 2, 35, "Text",ExpressionUUID->"3bfe317c-710d-4f9c-932d-3d45f4633fba"],
Cell[CellGroupData[{
Cell[362993, 7260, 208, 5, 67, "ExternalLanguage",ExpressionUUID->"c2798298-506e-4cb5-b87d-343f6393c6e7"],
Cell[363204, 7267, 870, 17, 34, "Output",ExpressionUUID->"5ce4569a-b672-4151-8c9a-267564638ecb"]
}, Open  ]],
Cell[364089, 7287, 216, 3, 35, "Text",ExpressionUUID->"f7cfbd53-f5b3-4c3e-895d-4818347800cc"],
Cell[CellGroupData[{
Cell[364330, 7294, 213, 5, 67, "ExternalLanguage",ExpressionUUID->"27966532-2082-44c2-8e6c-356e9ed4ab22"],
Cell[364546, 7301, 820, 16, 34, "Output",ExpressionUUID->"97ae62b5-7231-42cb-bb9f-e6a2dab9197f"]
}, Open  ]],
Cell[365381, 7320, 116, 0, 35, "Text",ExpressionUUID->"a316a02e-d9f3-4f48-ab3b-6893800b2c9e"],
Cell[CellGroupData[{
Cell[365522, 7324, 187, 2, 50, "ExternalLanguage",ExpressionUUID->"1010d5f3-e189-40b6-a148-839524ffd1ce"],
Cell[365712, 7328, 60069, 1129, 309, "Output",ExpressionUUID->"1f1a2930-6e59-46ce-89f7-47af2df14c7f"]
}, Open  ]],
Cell[425796, 8460, 237, 4, 35, "Text",ExpressionUUID->"be347b01-2cf4-401d-811f-fa81ad5533a1"],
Cell[426036, 8466, 521, 10, 84, "ExternalLanguage",ExpressionUUID->"9936fa63-d4af-415d-a7ec-0f5cedb7d069"],
Cell[426560, 8478, 123, 0, 35, "Text",ExpressionUUID->"3cdc55bf-ed6c-472a-82f7-ee723715982c"],
Cell[CellGroupData[{
Cell[426708, 8482, 263, 6, 67, "ExternalLanguage",ExpressionUUID->"0aa02f19-3990-4ca9-b0c3-0d86db9719fb"],
Cell[426974, 8490, 52756, 1006, 335, "Output",ExpressionUUID->"3276be0f-eb7e-42a9-927f-08fdc30254eb"]
}, Open  ]],
Cell[479745, 9499, 341, 10, 35, "Text",ExpressionUUID->"7911ee9a-aecc-4b84-bfda-98d8d168985e"],
Cell[480089, 9511, 345, 7, 50, "ExternalLanguage",ExpressionUUID->"2663215d-bd26-4434-bbe1-cfca71b581a7"],
Cell[480437, 9520, 94, 0, 35, "Text",ExpressionUUID->"b31876db-5ff8-4530-9cc0-692c7e5c5dac"],
Cell[CellGroupData[{
Cell[480556, 9524, 664, 19, 220, "ExternalLanguage",ExpressionUUID->"4347e401-9bbb-49a6-b458-361833b014b2"],
Cell[481223, 9545, 15239, 254, 497, "Output",ExpressionUUID->"036af154-881e-4ad2-93b4-a5ee1a92a089"]
}, Open  ]],
Cell[496477, 9802, 171, 3, 35, "Text",ExpressionUUID->"d725b5f2-9547-4279-aa2c-e199e46fc4ae"],
Cell[CellGroupData[{
Cell[496673, 9809, 204, 6, 67, "ExternalLanguage",ExpressionUUID->"155a1e00-58f8-4ecd-825f-55d3ddfd4277"],
Cell[496880, 9817, 2099, 37, 77, "Output",ExpressionUUID->"9f7457ce-52b9-44cf-856a-1563751cdb77"]
}, Open  ]],
Cell[498994, 9857, 94, 0, 35, "Text",ExpressionUUID->"22d602d0-0daf-47ec-9757-8737ca686cf8"],
Cell[CellGroupData[{
Cell[499113, 9861, 726, 23, 322, "ExternalLanguage",ExpressionUUID->"79600920-904b-4945-a476-5e68bfeb538b"],
Cell[499842, 9886, 19333, 321, 497, "Output",ExpressionUUID->"467d04c6-ee86-48a6-86c6-56c9a2b773d1"]
}, Open  ]],
Cell[519190, 10210, 158, 3, 35, "Text",ExpressionUUID->"88f2523c-1d0a-4107-ad2b-312edcc79db4"],
Cell[CellGroupData[{
Cell[519373, 10217, 224, 5, 50, "ExternalLanguage",ExpressionUUID->"6204b125-c05f-49ef-bfba-1298ad358adb"],
Cell[519600, 10224, 19312, 321, 497, "Output",ExpressionUUID->"c8925c17-4f69-4ce3-846a-bb5b56e35c71"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[538961, 10551, 88, 0, 54, "Subsection",ExpressionUUID->"2281df5f-705e-4146-a509-2748df3eda9a"],
Cell[539052, 10553, 123, 0, 35, "Text",ExpressionUUID->"cb788994-6317-4cdd-933d-61126cf8b624"],
Cell[CellGroupData[{
Cell[539200, 10557, 240, 7, 67, "ExternalLanguage",ExpressionUUID->"8a5b881f-49f4-432b-88cf-20bbc4cd3694"],
Cell[539443, 10566, 818, 17, 34, "Output",ExpressionUUID->"61fc42bc-76ec-48d1-a1ff-d282cb883d43"]
}, Open  ]],
Cell[540276, 10586, 106, 0, 35, "Text",ExpressionUUID->"74ea9393-db66-406a-b8a8-1eea5aa68bb6"],
Cell[CellGroupData[{
Cell[540407, 10590, 322, 8, 101, "ExternalLanguage",ExpressionUUID->"ca0084ba-a577-433a-809a-587643599c78"],
Cell[540732, 10600, 52910, 1007, 335, "Output",ExpressionUUID->"17b86e8c-cebc-4116-af7a-4dcd1a860aec"]
}, Open  ]],
Cell[593657, 11610, 94, 0, 35, "Text",ExpressionUUID->"79878836-ddf3-48ae-8ab1-be600e39b7b0"],
Cell[CellGroupData[{
Cell[593776, 11614, 180, 3, 50, "ExternalLanguage",ExpressionUUID->"9751723a-0291-48a5-9d05-ba581506f4e1"],
Cell[593959, 11619, 18398, 306, 497, "Output",ExpressionUUID->"ee781724-a5f9-41ce-b8e3-4a8d410d5cf1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[612406, 11931, 95, 0, 54, "Subsection",ExpressionUUID->"7ecbd2ed-eae1-4a4e-a67f-b726dac46500"],
Cell[612504, 11933, 197, 3, 32, "Item",ExpressionUUID->"ea2693f7-52e8-4b62-a4cc-c0456a0e3226"],
Cell[612704, 11938, 345, 32, 32, "Item",ExpressionUUID->"ea9d3292-2108-427e-b7a5-4b4e7f91eb49"],
Cell[613052, 11972, 199, 5, 20, InheritFromParent,ExpressionUUID->"83bebae5-5e03-4834-8d04-ace2c5de7387"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[613300, 11983, 103, 0, 67, "Section",ExpressionUUID->"754e2a1d-f3d8-4c66-b496-ed43ee9d3216"],
Cell[613406, 11985, 447, 43, 35, "Text",ExpressionUUID->"674fe72a-e6c3-4d55-bee2-23e506d3fda8"],
Cell[613856, 12030, 128, 0, 32, "Item",ExpressionUUID->"532881ba-006e-4fbd-8822-767e8697c7f9"],
Cell[613987, 12032, 171, 3, 32, "Item",ExpressionUUID->"7c91c529-5325-4144-be55-1963b6b194c1"],
Cell[614161, 12037, 118, 0, 32, "Item",ExpressionUUID->"8709a86b-6277-4870-b411-c196ab33204b"],
Cell[CellGroupData[{
Cell[614304, 12041, 106, 0, 54, "Subsection",ExpressionUUID->"36a52536-f378-4992-b942-8613905c4a47"],
Cell[614413, 12043, 415, 35, 35, "Text",ExpressionUUID->"cc8eb638-c3b7-4c4c-b531-dcfb81804160"],
Cell[614831, 12080, 810, 15, 186, "ExternalLanguage",ExpressionUUID->"061d6d72-1427-4ff7-8aa6-e634911e85e2"],
Cell[615644, 12097, 198, 3, 35, "Text",ExpressionUUID->"7099ae66-2f29-495e-a747-bc2fe2b5106e"],
Cell[615845, 12102, 155, 2, 35, "Text",ExpressionUUID->"41d0b78f-7f15-4e5c-bcfc-e2c776fa79c9"],
Cell[CellGroupData[{
Cell[616025, 12108, 329, 8, 67, "ExternalLanguage",ExpressionUUID->"b269726c-f5dc-4e2a-afe0-da4fe6b12d2c"],
Cell[616357, 12118, 288, 4, 34, "Output",ExpressionUUID->"14765d0c-2503-4e8f-8a37-28cbdd4bd006"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[616694, 12128, 104, 0, 54, "Subsection",ExpressionUUID->"427b0bed-d637-44bf-80aa-8c53956c6879"],
Cell[616801, 12130, 176, 3, 35, "Text",ExpressionUUID->"bc15b3ae-4ced-44ba-b27f-c7ccfa396649"],
Cell[616980, 12135, 326, 7, 50, "ExternalLanguage",ExpressionUUID->"077755b1-6c49-49d2-ac9e-9e36518fc1c3"],
Cell[617309, 12144, 102, 0, 35, "Text",ExpressionUUID->"b8ecb3a6-e850-46bf-8edf-7f08a91d18c7"],
Cell[CellGroupData[{
Cell[617436, 12148, 388, 11, 118, "ExternalLanguage",ExpressionUUID->"a0531510-8d59-46cd-96ef-645df9eaed00"],
Cell[617827, 12161, 583, 9, 308, "Output",ExpressionUUID->"990a38c6-884c-43ac-a890-d98676df00e1"]
}, Open  ]],
Cell[618425, 12173, 219, 3, 35, "Text",ExpressionUUID->"de9c209d-e1c3-4452-913b-48ae715414c2"],
Cell[618647, 12178, 324, 7, 50, "ExternalLanguage",ExpressionUUID->"c3d945f1-bed8-4ae0-928a-ed2046bbd76d"],
Cell[618974, 12187, 102, 0, 35, "Text",ExpressionUUID->"ac7164ca-1a36-4bd3-9a88-01fc57185248"],
Cell[CellGroupData[{
Cell[619101, 12191, 298, 7, 67, "ExternalLanguage",ExpressionUUID->"a397cf88-de0d-4a60-9d1e-8968e1a3582d"],
Cell[619402, 12200, 521, 8, 308, "Output",ExpressionUUID->"e4f40499-6b70-47e7-ab9b-33ef4fd3d940"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[619972, 12214, 98, 0, 54, "Subsection",ExpressionUUID->"ddd4f233-30d4-4dd7-99e9-9d6c5729062b"],
Cell[620073, 12216, 204, 3, 35, "Text",ExpressionUUID->"df76934f-d4e5-491a-bea4-933753823151"],
Cell[620280, 12221, 330, 6, 50, "ExternalLanguage",ExpressionUUID->"bcc81926-5d47-4879-bd3c-34372efa75ee"],
Cell[620613, 12229, 145, 2, 35, "Text",ExpressionUUID->"798239d8-2396-41b2-8a42-18a39b082083"],
Cell[CellGroupData[{
Cell[620783, 12235, 212, 6, 67, "ExternalLanguage",ExpressionUUID->"1fffbc98-2677-42b4-bb24-43b607a4a103"],
Cell[CellGroupData[{
Cell[621020, 12245, 182, 4, 24, "Print",ExpressionUUID->"93d7b85a-1381-4911-b00e-6ddf02d095cb"],
Cell[621205, 12251, 182, 4, 24, "Print",ExpressionUUID->"a3d13d12-1c59-4653-9529-937c904e234d"],
Cell[621390, 12257, 215, 4, 24, "Print",ExpressionUUID->"315df58a-2c44-40c5-bda6-eee6069d86b2"],
Cell[621608, 12263, 182, 4, 24, "Print",ExpressionUUID->"84636793-a015-4d5d-99b8-afd94c87c451"],
Cell[621793, 12269, 424, 7, 24, "Print",ExpressionUUID->"65409b0c-b087-4390-b103-0bcc609eab40"],
Cell[622220, 12278, 181, 4, 24, "Print",ExpressionUUID->"8f6cb9cd-6368-449c-a440-466738311b17"],
Cell[622404, 12284, 244, 5, 24, "Print",ExpressionUUID->"45255f2e-a777-4be8-b70d-3334d3b88f87"],
Cell[622651, 12291, 214, 4, 24, "Print",ExpressionUUID->"4d64469c-6d15-4596-991b-53a35445974f"],
Cell[622868, 12297, 218, 4, 24, "Print",ExpressionUUID->"2d43a51b-53d0-4c05-a358-ad9b1663c9bc"],
Cell[623089, 12303, 182, 4, 24, "Print",ExpressionUUID->"294822e5-5998-4a0e-ba84-272bbf3b4ac8"],
Cell[623274, 12309, 204, 4, 24, "Print",ExpressionUUID->"5811aefb-edcd-4b4f-bb0e-f5fa7a7c17ff"],
Cell[623481, 12315, 242, 5, 24, "Print",ExpressionUUID->"82288cd5-6d8c-498b-a832-7b8dd2f24776"],
Cell[623726, 12322, 226, 4, 24, "Print",ExpressionUUID->"443c46cc-0fc9-46a7-a8cc-1b4763f75218"],
Cell[623955, 12328, 194, 4, 24, "Print",ExpressionUUID->"41656590-f9bc-4955-991d-341bf4a04225"]
}, Open  ]]
}, Open  ]],
Cell[624176, 12336, 114, 0, 35, "Text",ExpressionUUID->"4f08eb46-1ae2-40fc-b77c-4c2c6f5d0033"],
Cell[624293, 12338, 159, 3, 50, "ExternalLanguage",ExpressionUUID->"17f6f4b6-e731-45d4-a902-bf10ea040b0b"],
Cell[624455, 12343, 171986, 2824, 446, "Input",ExpressionUUID->"a504f3d8-a16c-422d-9999-66adb9dbcc96"],
Cell[796444, 15169, 112, 0, 35, "Text",ExpressionUUID->"f979fc29-06dd-4e0c-9ab1-bb75d1f717bb"],
Cell[796559, 15171, 123, 0, 32, "ItemNumbered",ExpressionUUID->"4f0e917f-2b4e-45e0-b250-8768e9b8d332"],
Cell[796685, 15173, 177, 3, 32, "ItemNumbered",ExpressionUUID->"3c108466-1515-4448-9f3f-246a2ad60330"],
Cell[796865, 15178, 166, 3, 35, "Text",ExpressionUUID->"8bbdb8fa-0761-494c-9f31-34ffcddd0e02"],
Cell[CellGroupData[{
Cell[797056, 15185, 272, 8, 67, "ExternalLanguage",ExpressionUUID->"b12cc3d5-ec40-4761-9c52-ad88592806de"],
Cell[797331, 15195, 224122, 4327, 653, "Output",ExpressionUUID->"7d1217fc-a67b-4d18-8a23-394124111146"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1021490, 19527, 242, 7, 67, "ExternalLanguage",ExpressionUUID->"b6ea7af6-56de-4c73-b545-52adc1daf1a8"],
Cell[1021735, 19536, 37427, 695, 201, "Output",ExpressionUUID->"e5af25bf-fab7-4022-9c1d-d03d17e3343c"]
}, Open  ]],
Cell[1059177, 20234, 129, 0, 35, "Text",ExpressionUUID->"72afdf53-0953-44ec-b3e6-0f2c7f142470"],
Cell[1059309, 20236, 328, 7, 50, "ExternalLanguage",ExpressionUUID->"868cfa5e-54ef-440e-b139-c1fab7bfc78d"],
Cell[1059640, 20245, 128, 0, 35, "Text",ExpressionUUID->"2d3d6de0-46f6-43b1-a04c-13e99369c6f1"],
Cell[CellGroupData[{
Cell[1059793, 20249, 261, 4, 50, "ExternalLanguage",ExpressionUUID->"b5ae7c73-299f-4300-a180-0c445d87cceb"],
Cell[1060057, 20255, 279, 4, 140, "Output",ExpressionUUID->"03bdbcfb-c0fc-41ce-a017-dcf16ef8c3fc"]
}, Open  ]],
Cell[1060351, 20262, 113, 0, 35, "Text",ExpressionUUID->"c911c06b-dca1-4f3a-95d4-bca5d58b12d2"],
Cell[CellGroupData[{
Cell[1060489, 20266, 268, 6, 30, "Input",ExpressionUUID->"bc64f8a8-50eb-40df-ac93-3af39433ccde"],
Cell[1060760, 20274, 95433, 1569, 333, "Output",ExpressionUUID->"262aae41-57c9-4289-98bb-80c3a2f5ad3d"]
}, Open  ]],
Cell[1156208, 21846, 140, 2, 35, "Text",ExpressionUUID->"cc29b934-40cc-4881-b438-763d2be87940"],
Cell[CellGroupData[{
Cell[1156373, 21852, 262, 4, 50, "ExternalLanguage",ExpressionUUID->"9a386bcd-4f09-446e-abfc-e543bac99f0d"],
Cell[1156638, 21858, 370, 6, 266, "Output",ExpressionUUID->"2ec4c2e6-67e9-4b25-9d8a-096fbae88d1c"]
}, Open  ]],
Cell[1157023, 21867, 113, 0, 35, "Text",ExpressionUUID->"50e7a196-e739-4d7b-ad81-4dc148082d92"],
Cell[CellGroupData[{
Cell[1157161, 21871, 266, 6, 30, "Input",ExpressionUUID->"256ab51a-3dd8-40f1-85fd-1c50ab3f6efb"],
Cell[1157430, 21879, 49261, 813, 234, "Output",ExpressionUUID->"1b3d33ba-48c1-4d3c-aa75-6d9fc4133270"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1206740, 22698, 95, 0, 54, "Subsection",ExpressionUUID->"d24dcaba-50a2-41a2-abe3-afbf09346b52"],
Cell[1206838, 22700, 163, 3, 32, "Item",ExpressionUUID->"9fad2b3b-ad62-4fc0-a3c4-e0d542fe0b95"],
Cell[1207004, 22705, 161, 3, 32, "Item",ExpressionUUID->"1fe534fd-92e2-40bc-8d5e-7674dc8d17a6"],
Cell[1207168, 22710, 149, 2, 35, "Text",ExpressionUUID->"8920210d-e100-473b-a73d-2d11e3058acf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1207366, 22718, 102, 0, 67, "Section",ExpressionUUID->"8d9fb9cb-0ceb-4aa1-bb09-692a4d0c9ef5"],
Cell[1207471, 22720, 445, 39, 35, "Text",ExpressionUUID->"9cee65d8-1848-4a56-955b-405f18dbb5e5"],
Cell[1207919, 22761, 536, 45, 35, "Text",ExpressionUUID->"d52fe82a-4a90-4f36-abce-6a9ffceba518"],
Cell[1208458, 22808, 400, 9, 118, "ExternalLanguage",ExpressionUUID->"405fa745-04ce-4614-ae22-b01f35eebf57"],
Cell[1208861, 22819, 114, 0, 35, "Text",ExpressionUUID->"02f67ea3-5b94-4922-8e87-42bca3b8b5b1"],
Cell[1208978, 22821, 321, 6, 50, "ExternalLanguage",ExpressionUUID->"41e941ad-de7a-4e0b-a82e-11dfbc4fabf6"],
Cell[1209302, 22829, 96, 0, 35, "Text",ExpressionUUID->"7647a761-3250-4fba-be00-d8990eb4cb49"],
Cell[CellGroupData[{
Cell[1209423, 22833, 206, 5, 67, "ExternalLanguage",ExpressionUUID->"2aad1186-b9ca-4f0a-b3e2-3c5c729423ce"],
Cell[1209632, 22840, 238, 3, 34, "Output",ExpressionUUID->"c3abb8b8-ef2b-47e9-a23f-ca76938b1239"]
}, Open  ]],
Cell[1209885, 22846, 152, 2, 35, "Text",ExpressionUUID->"b4cb8925-e770-40a1-8462-68846bc79556"],
Cell[CellGroupData[{
Cell[1210062, 22852, 166, 5, 67, "ExternalLanguage",ExpressionUUID->"bfcfe016-618b-4049-8933-a7e353c5edc9"],
Cell[1210231, 22859, 193, 2, 34, "Output",ExpressionUUID->"3dbc1a9b-9897-4ffe-98ca-76bda13f0abe"]
}, Open  ]],
Cell[1210439, 22864, 121, 0, 35, "Text",ExpressionUUID->"090ce670-84c2-40a6-a8bf-844985d61c6c"],
Cell[1210563, 22866, 252, 9, 101, "ExternalLanguage",ExpressionUUID->"738d36e8-47b5-4dad-a853-82be019628ed"],
Cell[1210818, 22877, 284, 4, 35, "Text",ExpressionUUID->"a57abb33-8cbc-42bd-8858-36ac40cc08a4"],
Cell[CellGroupData[{
Cell[1211127, 22885, 95, 0, 54, "Subsection",ExpressionUUID->"292ede82-8139-4a77-b836-ec44c04ac7f8"],
Cell[1211225, 22887, 161, 3, 32, "Item",ExpressionUUID->"26bcdf8c-3e03-480b-a7ba-0e30a8f2b773"],
Cell[1211389, 22892, 140, 2, 32, "Item",ExpressionUUID->"a6fa696b-1675-4f08-94dc-46c8878e17ee"],
Cell[1211532, 22896, 199, 5, 20, InheritFromParent,ExpressionUUID->"885dfbd7-9c55-498c-a99b-8fc655ed1786"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1211780, 22907, 91, 0, 67, "Section",ExpressionUUID->"3fa6bf87-5722-435e-a624-bda197045460"],
Cell[1211874, 22909, 201, 13, 35, "Text",ExpressionUUID->"2e811e52-f3f4-4a83-a170-dbfcad08ac02"],
Cell[1212078, 22924, 146, 2, 32, "Item",ExpressionUUID->"3f5ab9a6-d129-4742-8687-3a93b2018088"],
Cell[1212227, 22928, 112, 0, 32, "Item",ExpressionUUID->"c715b8e4-af3d-4c4d-874d-6cd0a8b4d4d8"],
Cell[1212342, 22930, 140, 2, 32, "Item",ExpressionUUID->"6c7d4b1f-4015-48fc-ada0-a5affa3dbc36"],
Cell[1212485, 22934, 129, 0, 32, "Item",ExpressionUUID->"907b9763-603e-4bf4-9e03-e7075493bb2b"],
Cell[1212617, 22936, 166, 3, 35, "Text",ExpressionUUID->"a5973ae8-f4ce-438b-ac30-d9e32a0b9a36"],
Cell[1212786, 22941, 466, 9, 84, "ExternalLanguage",ExpressionUUID->"73ab4b8a-1346-4bc0-b429-2bd6b3e0fb59"],
Cell[1213255, 22952, 87, 0, 35, "Text",ExpressionUUID->"33cb137a-8373-4869-8eb5-83a6dfa0486e"],
Cell[CellGroupData[{
Cell[1213367, 22956, 186, 5, 67, "ExternalLanguage",ExpressionUUID->"e57626d2-0a18-42e4-9d0d-133c738a065c"],
Cell[1213556, 22963, 534, 11, 77, "Output",ExpressionUUID->"0673be5e-f109-48f2-8661-db0c865e7787"]
}, Open  ]],
Cell[1214105, 22977, 144, 2, 35, "Text",ExpressionUUID->"87059022-4b7f-4090-bd5f-c1c1573ca33f"],
Cell[CellGroupData[{
Cell[1214274, 22983, 236, 3, 50, "ExternalLanguage",ExpressionUUID->"d0686397-c6ed-4dcb-b462-21803e11b39a"],
Cell[1214513, 22988, 284, 5, 24, "Print",ExpressionUUID->"642886ba-e811-4a19-ac1f-e111f617d2a7"]
}, Open  ]],
Cell[1214812, 22996, 849, 76, 58, "Text",ExpressionUUID->"4524a142-0c1f-4210-97a5-b8e1977a8f4d"],
Cell[1215664, 23074, 126, 0, 35, "Text",ExpressionUUID->"a7071b7c-9a9b-45d9-ab1b-ec359bf4f503"],
Cell[CellGroupData[{
Cell[1215815, 23078, 291, 11, 169, "ExternalLanguage",ExpressionUUID->"53c06923-63aa-406d-b8dd-ff854d8c2069"],
Cell[1216109, 23091, 51537, 964, 65, "Output",ExpressionUUID->"e8e066bf-ec79-46f4-93a0-8158f12c167a"]
}, Open  ]],
Cell[1267661, 24058, 110, 0, 35, "Text",ExpressionUUID->"045b3fa7-3f63-43e9-95ba-fbd2187bba34"],
Cell[CellGroupData[{
Cell[1267796, 24062, 221, 6, 84, "ExternalLanguage",ExpressionUUID->"e53a3716-899f-4ca0-a0fe-0dcfd423e1b5"],
Cell[1268020, 24070, 612, 15, 34, "Output",ExpressionUUID->"024607d1-db59-4174-a501-7ab63f271ae4"]
}, Open  ]],
Cell[1268647, 24088, 182, 3, 35, "Text",ExpressionUUID->"6d935e8a-a5eb-48ca-9cde-2ebad5f4a2b8"],
Cell[CellGroupData[{
Cell[1268854, 24095, 244, 5, 50, "ExternalLanguage",ExpressionUUID->"f50ec47c-023e-4378-8fc2-64187e9bf6ee"],
Cell[1269101, 24102, 532, 14, 34, "Output",ExpressionUUID->"158470b0-4b4f-4597-8ff9-b3c655573fa4"]
}, Open  ]],
Cell[1269648, 24119, 293, 4, 35, "Text",ExpressionUUID->"f5353cec-35f4-463a-b788-281b45e86785"],
Cell[CellGroupData[{
Cell[1269966, 24127, 750, 20, 288, "ExternalLanguage",ExpressionUUID->"051cd3c7-e412-46ae-9d28-d387322805c7"],
Cell[1270719, 24149, 51612, 965, 65, "Output",ExpressionUUID->"191a92f5-38c9-45ea-943f-7cf771843cf0"]
}, Open  ]],
Cell[1322346, 25117, 102, 0, 35, "Text",ExpressionUUID->"19d06836-0740-405f-8f45-b77f938a201d"],
Cell[CellGroupData[{
Cell[1322473, 25121, 171, 2, 50, "ExternalLanguage",ExpressionUUID->"b88a52d0-e38f-429f-8652-4e8a9d94a7ae"],
Cell[1322647, 25125, 478, 10, 34, "Output",ExpressionUUID->"87ee2290-e282-4fde-9bc6-048d77076cea"]
}, Open  ]],
Cell[1323140, 25138, 218, 3, 35, "Text",ExpressionUUID->"f766b770-411f-46a9-9ecc-f53233e2af20"],
Cell[CellGroupData[{
Cell[1323383, 25145, 619, 13, 169, "ExternalLanguage",ExpressionUUID->"dfdc889f-74c4-466b-bfa5-1044f5211663"],
Cell[1324005, 25160, 87523, 1720, 363, "Output",ExpressionUUID->"62fb86c5-6578-46f6-aa69-bc7dcdaf67eb"]
}, Open  ]],
Cell[1411543, 26883, 155, 2, 35, "Text",ExpressionUUID->"2312a1b7-74d9-4f85-bb79-67aac088e2d1"],
Cell[CellGroupData[{
Cell[1411723, 26889, 200, 3, 50, "ExternalLanguage",ExpressionUUID->"5f2b9716-f89b-4257-b6be-b98718ae152c"],
Cell[1411926, 26894, 33859, 618, 147, "Output",ExpressionUUID->"e46c916f-daed-4828-8133-8f8f769aa349"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1445822, 27517, 110, 0, 54, "Subsection",ExpressionUUID->"f82b5ef2-3e67-46b1-83b4-6c579777fd03"],
Cell[1445935, 27519, 213, 3, 35, "Text",ExpressionUUID->"e863d444-3012-4399-a92d-48b09f07d0ed"],
Cell[1446151, 27524, 79, 0, 35, "Text",ExpressionUUID->"708a0ae4-f252-434b-96e9-735b75df4fb8"],
Cell[1446233, 27526, 366, 32, 32, "Item",ExpressionUUID->"991a23db-2dd2-40f8-b522-28255e36d063"],
Cell[1446602, 27560, 146, 2, 32, "Item",ExpressionUUID->"c975b8d1-e49d-4890-a4cd-7a35e3903210"],
Cell[1446751, 27564, 103, 0, 35, "Text",ExpressionUUID->"9113342c-b375-4ce8-8310-cac0ce2181cd"],
Cell[CellGroupData[{
Cell[1446879, 27568, 393, 11, 169, "ExternalLanguage",ExpressionUUID->"530147b5-abcf-43db-81b7-f89c64ad7e40"],
Cell[1447275, 27581, 51583, 964, 65, "Output",ExpressionUUID->"747531f7-a90d-4871-ae19-c8ae3ba2c11e"]
}, Open  ]],
Cell[1498873, 28548, 96, 0, 35, "Text",ExpressionUUID->"b2e30465-cd96-4d26-9f1d-19fe08360704"],
Cell[1498972, 28550, 385, 7, 50, "ExternalLanguage",ExpressionUUID->"e986937b-8899-4b0c-8c59-3ef7a8aa8719"],
Cell[1499360, 28559, 93, 0, 35, "Text",ExpressionUUID->"01ecd56b-5858-4a23-be36-36c0d67e5412"],
Cell[CellGroupData[{
Cell[1499478, 28563, 200, 5, 67, "ExternalLanguage",ExpressionUUID->"40d75255-bfef-41e4-986f-d88671be7fb4"],
Cell[1499681, 28570, 163953, 2853, 63, "Output",ExpressionUUID->"f39f354b-7492-4a1f-ae1c-e8ef6200d576"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1663683, 31429, 95, 0, 54, "Subsection",ExpressionUUID->"98fe8aa4-9ba9-4e98-99a6-1f2c33f3e948"],
Cell[1663781, 31431, 177, 3, 32, "Item",ExpressionUUID->"c48b296d-802e-4c75-9ff2-aec669046045"],
Cell[1663961, 31436, 171, 3, 32, "Item",ExpressionUUID->"ab14824e-aba4-4dd2-92f9-b0fc3d1a4c84"],
Cell[1664135, 31441, 199, 5, 20, InheritFromParent,ExpressionUUID->"149f26d7-2e23-4fbb-b84f-9f9106ac8423"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1664383, 31452, 98, 0, 67, "Section",ExpressionUUID->"4e36d066-cc53-4b68-9a52-8bcca9f0bb78"],
Cell[1664484, 31454, 494, 49, 35, "Text",ExpressionUUID->"6bb5ae50-008c-43a3-bae5-7ebb28ea600b"],
Cell[1664981, 31505, 242, 4, 35, "Text",ExpressionUUID->"0870dc48-eb25-43ca-a1dc-667709b5f954"],
Cell[1665226, 31511, 365, 6, 50, "ExternalLanguage",ExpressionUUID->"d2d3ff75-af41-4ac6-b739-9267cbd13c59"],
Cell[1665594, 31519, 173, 3, 35, "Text",ExpressionUUID->"0462f011-b480-4b86-9330-6470cf0d3147"],
Cell[CellGroupData[{
Cell[1665792, 31526, 400, 13, 203, "ExternalLanguage",ExpressionUUID->"8642d263-cd49-4edb-bce8-aace1fcd4be4"],
Cell[1666195, 31541, 186, 4, 24, "Print",ExpressionUUID->"6443f6dd-5122-42ca-acc6-33f817fa902e"]
}, Open  ]],
Cell[1666396, 31548, 672, 71, 35, "Text",ExpressionUUID->"974ab497-4ba3-4037-a1cb-dff90b3dbb23"],
Cell[1667071, 31621, 530, 53, 35, "Text",ExpressionUUID->"3c8374ed-d38e-4a0c-9d2a-5016e212df2d"],
Cell[1667604, 31676, 233, 3, 35, "Text",ExpressionUUID->"02ed1d7a-265c-44ac-9295-f5ee93680c04"],
Cell[1667840, 31681, 92, 0, 35, "Text",ExpressionUUID->"fc3bb607-94c2-43c1-9aec-01cbb807c30a"],
Cell[CellGroupData[{
Cell[1667957, 31685, 354, 7, 67, "ExternalLanguage",ExpressionUUID->"b8dc2964-48bd-4e47-9d76-74edd8f37a54"],
Cell[CellGroupData[{
Cell[1668336, 31696, 180, 4, 24, "Print",ExpressionUUID->"ca613746-9a73-412a-8966-50c824c401d2"],
Cell[1668519, 31702, 183, 4, 24, "Print",ExpressionUUID->"6f7d193f-1689-4dd5-9c0d-9b7f0435653b"],
Cell[1668705, 31708, 387, 7, 24, "Print",ExpressionUUID->"9e055ce7-0a0f-49f9-95fd-3e6c1cb1d324"],
Cell[1669095, 31717, 181, 4, 24, "Print",ExpressionUUID->"066dd7e1-27c8-4563-bc46-86c41782c207"],
Cell[1669279, 31723, 539, 9, 44, "Print",ExpressionUUID->"93f6b37b-d9ee-48fb-a5ed-a19bd2050244"],
Cell[1669821, 31734, 181, 4, 24, "Print",ExpressionUUID->"a197f3a2-095d-4200-ac45-b0367e6cf1da"],
Cell[1670005, 31740, 378, 6, 24, "Print",ExpressionUUID->"fbcbc217-98a5-4e76-aae3-f136c547bb16"],
Cell[1670386, 31748, 183, 4, 24, "Print",ExpressionUUID->"cce3e664-e80e-4b65-8f0c-d881edd8d0e5"],
Cell[1670572, 31754, 419, 7, 44, "Print",ExpressionUUID->"514df477-62e6-4c07-b833-3a1c33c21286"],
Cell[1670994, 31763, 181, 4, 24, "Print",ExpressionUUID->"90029f76-3b24-4f90-96a0-566935d06b3a"],
Cell[1671178, 31769, 193, 4, 24, "Print",ExpressionUUID->"59cd8b43-f9a5-4117-b889-d32bc399a9c2"],
Cell[1671374, 31775, 181, 4, 24, "Print",ExpressionUUID->"36b0718f-8ffd-4750-9463-11661595300e"],
Cell[1671558, 31781, 190, 4, 24, "Print",ExpressionUUID->"f056e6a0-9a21-4425-bcb1-6a44b3ab4cf2"],
Cell[1671751, 31787, 218, 4, 24, "Print",ExpressionUUID->"0a038eb8-64af-4b5d-bfad-77f522fc4066"],
Cell[1671972, 31793, 201, 4, 24, "Print",ExpressionUUID->"5d2c13f9-5df5-4e49-98eb-67cd597a7a94"],
Cell[1672176, 31799, 208, 4, 24, "Print",ExpressionUUID->"8fe4391e-2556-49c1-b5c9-351357783b40"],
Cell[1672387, 31805, 210, 4, 24, "Print",ExpressionUUID->"5fef8673-5d78-48e7-9dad-71e9299b771e"],
Cell[1672600, 31811, 193, 4, 24, "Print",ExpressionUUID->"4a42c593-37cf-495e-85b8-7378e5bd714a"],
Cell[1672796, 31817, 200, 4, 24, "Print",ExpressionUUID->"3a32737e-181d-462c-9a82-3afdc373444c"],
Cell[1672999, 31823, 181, 4, 24, "Print",ExpressionUUID->"260c5220-4b24-45cf-bca9-76bc619e930e"],
Cell[1673183, 31829, 185, 4, 24, "Print",ExpressionUUID->"c2dd61d2-9cd5-4d01-8695-d55cb6a804ae"],
Cell[1673371, 31835, 196, 4, 24, "Print",ExpressionUUID->"56b3a658-63ec-48dd-88b2-a36c4b839706"],
Cell[1673570, 31841, 200, 4, 24, "Print",ExpressionUUID->"ad64642a-4890-4718-9aaa-5d1bef173ea0"],
Cell[1673773, 31847, 204, 4, 24, "Print",ExpressionUUID->"9bae168b-8d17-4377-9b8a-cc85a8717e43"],
Cell[1673980, 31853, 207, 4, 24, "Print",ExpressionUUID->"86fc4482-fd0a-4791-8e7a-eb84af66477d"],
Cell[1674190, 31859, 222, 4, 24, "Print",ExpressionUUID->"ff78d2db-33f5-4c34-82e5-cf350c9b08a2"],
Cell[1674415, 31865, 200, 4, 24, "Print",ExpressionUUID->"e2c83fde-3f12-4cda-b680-f51fed7cf133"],
Cell[1674618, 31871, 212, 4, 24, "Print",ExpressionUUID->"1675a13a-59d6-4476-bdc9-6777bbe61fe8"],
Cell[1674833, 31877, 220, 4, 24, "Print",ExpressionUUID->"c9052421-6570-46f0-9582-6d98e2900760"],
Cell[1675056, 31883, 207, 4, 24, "Print",ExpressionUUID->"df8f578b-56a8-4a56-9e62-bf949ab6f49f"],
Cell[1675266, 31889, 196, 4, 24, "Print",ExpressionUUID->"adc7448d-8629-4331-b408-7957b0377f57"],
Cell[1675465, 31895, 211, 4, 24, "Print",ExpressionUUID->"c5f346f1-6ff9-473f-9b37-d0595c6e20a4"],
Cell[1675679, 31901, 203, 4, 24, "Print",ExpressionUUID->"d690724b-f0d6-4249-b205-16d257944a03"],
Cell[1675885, 31907, 193, 4, 24, "Print",ExpressionUUID->"fad06f21-eee4-44b9-ad23-d58a946ec32c"],
Cell[1676081, 31913, 208, 4, 24, "Print",ExpressionUUID->"51ab8693-d0d7-408e-b58e-0e0dfdee810c"],
Cell[1676292, 31919, 200, 4, 24, "Print",ExpressionUUID->"1f957275-55bc-4795-a61c-ccfe4962089e"]
}, Open  ]]
}, Open  ]],
Cell[1676519, 31927, 158, 3, 35, "Text",ExpressionUUID->"ba85342c-b266-48fb-8eef-985054ae4dc1"],
Cell[CellGroupData[{
Cell[1676702, 31934, 201, 5, 67, "ExternalLanguage",ExpressionUUID->"71f989a7-2862-44dd-9885-7d8a3bf95079"],
Cell[1676906, 31941, 1777, 42, 98, "Output",ExpressionUUID->"ad0ef235-2ab3-47c7-a8b8-7902fdf76a29"]
}, Open  ]],
Cell[1678698, 31986, 696, 56, 35, "Text",ExpressionUUID->"eb0170b5-3a36-4bb2-9535-8324c1c69e5d"],
Cell[1679397, 32044, 420, 42, 35, "Text",ExpressionUUID->"3e450302-2c06-4315-815f-a328edb8d587"],
Cell[CellGroupData[{
Cell[1679842, 32090, 303, 9, 135, "ExternalLanguage",ExpressionUUID->"4664367c-d7e5-4a50-a916-7117952ef717"],
Cell[1680148, 32101, 463, 8, 44, "Print",ExpressionUUID->"efc0214f-f314-4c53-9814-ad7cc8e50a4c"]
}, Open  ]],
Cell[1680626, 32112, 99, 0, 35, "Text",ExpressionUUID->"113f589e-3073-46a6-996e-3ea86622be9d"],
Cell[CellGroupData[{
Cell[1680750, 32116, 215, 5, 67, "ExternalLanguage",ExpressionUUID->"9ed38134-ae88-4f76-8999-f716ee0ef616"],
Cell[1680968, 32123, 38108, 717, 227, "Output",ExpressionUUID->"322d97d8-8708-4e31-a5d8-e1ad36063910"]
}, Open  ]],
Cell[1719091, 32843, 188, 3, 35, "Text",ExpressionUUID->"92bf0a61-550b-4b11-a8a7-f0239475b160"],
Cell[CellGroupData[{
Cell[1719304, 32850, 235, 5, 67, "ExternalLanguage",ExpressionUUID->"12fa2db3-dd5f-40bb-b252-b7bc2d85775d"],
Cell[CellGroupData[{
Cell[1719564, 32859, 181, 4, 24, "Print",ExpressionUUID->"1c3e2dc9-0582-4923-8c7b-b3d27938b26e"],
Cell[1719748, 32865, 181, 4, 24, "Print",ExpressionUUID->"d7b6e2bf-c187-4099-9350-4094f63484a5"],
Cell[1719932, 32871, 212, 4, 24, "Print",ExpressionUUID->"1e4d7626-6532-4262-b242-61171631b5ce"],
Cell[1720147, 32877, 192, 4, 24, "Print",ExpressionUUID->"7adb4f60-c06a-4a61-a197-f0750fac9703"],
Cell[1720342, 32883, 181, 4, 24, "Print",ExpressionUUID->"75d92604-5a09-4251-9065-5169a48f6b78"],
Cell[1720526, 32889, 197, 4, 24, "Print",ExpressionUUID->"7d089af5-a503-4c66-9fab-bd0867626436"],
Cell[1720726, 32895, 596, 9, 44, "Print",ExpressionUUID->"866875ba-143e-4063-a80b-d20134bc82f7"],
Cell[1721325, 32906, 204, 4, 24, "Print",ExpressionUUID->"ff351995-9e87-41ee-9e2c-ddfac494ab60"],
Cell[1721532, 32912, 181, 4, 24, "Print",ExpressionUUID->"c36e174a-c603-4ec1-8c7b-a9c859a9a900"],
Cell[1721716, 32918, 214, 4, 24, "Print",ExpressionUUID->"936ffe30-b23b-42ce-b16d-a1b4a5debccf"],
Cell[1721933, 32924, 209, 4, 24, "Print",ExpressionUUID->"b4928d62-beed-45f9-a9a7-cae16aeb9530"],
Cell[1722145, 32930, 226, 4, 24, "Print",ExpressionUUID->"9e5e2225-96d9-4550-865e-28cc1400bb67"],
Cell[1722374, 32936, 224, 4, 24, "Print",ExpressionUUID->"fa8fce23-606a-4156-9eda-de2f4b473c0c"],
Cell[1722601, 32942, 181, 4, 24, "Print",ExpressionUUID->"db54577e-fba5-4c57-867e-70c8b2f5c9c7"],
Cell[1722785, 32948, 204, 4, 24, "Print",ExpressionUUID->"55ec6157-86fa-4fb3-a7d0-6c97b1bfb0fb"],
Cell[1722992, 32954, 203, 4, 24, "Print",ExpressionUUID->"68f7085a-3556-40f0-ac2a-2bfa74ce9061"],
Cell[1723198, 32960, 199, 4, 24, "Print",ExpressionUUID->"ab094dbc-a130-44f8-8080-38d2b1af9422"],
Cell[1723400, 32966, 205, 4, 24, "Print",ExpressionUUID->"87b46027-3421-4b43-a5ff-c117e830af35"],
Cell[1723608, 32972, 218, 4, 24, "Print",ExpressionUUID->"2e5107cb-a2cd-4768-9dd2-77dcc0d8f1f6"],
Cell[1723829, 32978, 193, 4, 24, "Print",ExpressionUUID->"3f05726e-e5f0-49d6-87b9-2cd2470eebae"]
}, Open  ]]
}, Open  ]],
Cell[1724049, 32986, 150, 2, 35, "Text",ExpressionUUID->"89a041f2-efd1-468b-bb9b-dade8a437a43"],
Cell[1724202, 32990, 216, 4, 50, "ExternalLanguage",ExpressionUUID->"c267251a-70f2-4eac-a2be-9a9fc662a1cc"],
Cell[CellGroupData[{
Cell[1724443, 32998, 95, 0, 54, "Subsection",ExpressionUUID->"faa8ae6d-da49-4c7b-9ab0-216e163c3246"],
Cell[1724541, 33000, 189, 3, 32, "Item",ExpressionUUID->"53628486-2b79-44b3-a43e-6149f8ba6532"],
Cell[1724733, 33005, 421, 35, 32, "Item",ExpressionUUID->"7c516384-b230-478b-8c49-fb125bde45f9"],
Cell[1725157, 33042, 199, 5, 20, InheritFromParent,ExpressionUUID->"89fad1a1-cc31-4ab8-8125-eebaead57805"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1725405, 33053, 105, 0, 67, "Section",ExpressionUUID->"86f9e1fd-643d-4681-92c6-043f8e220fb2"],
Cell[1725513, 33055, 351, 31, 35, "Text",ExpressionUUID->"162a4363-311c-49c4-9976-3268268505bd"],
Cell[1725867, 33088, 111, 0, 32, "ItemNumbered",ExpressionUUID->"bb13ccd8-cb4c-40f3-9ac6-6997e5500066"],
Cell[CellGroupData[{
Cell[1726003, 33092, 140, 1, 32, "ItemNumbered",ExpressionUUID->"15228639-6e01-43d1-a59e-e232154d6a72"],
Cell[1726146, 33095, 114, 0, 25, "Subsubitem",ExpressionUUID->"007365bd-da83-4372-b8e7-63be5c1ebf81"]
}, Open  ]],
Cell[1726275, 33098, 114, 0, 32, "ItemNumbered",ExpressionUUID->"e50c6123-77c1-46f8-9c59-e3a000a13138"],
Cell[1726392, 33100, 109, 0, 32, "ItemNumbered",ExpressionUUID->"38f93108-a846-425f-8062-e5c6e58c2416"],
Cell[1726504, 33102, 402, 37, 35, "Text",ExpressionUUID->"60901e47-743f-4f1f-b027-b7782de5a37e"],
Cell[1726909, 33141, 198, 3, 35, "Text",ExpressionUUID->"22147938-8a79-4351-ba2d-fd2bcd039cd5"],
Cell[1727110, 33146, 134, 0, 32, "ItemNumbered",ExpressionUUID->"edd75f8d-d885-4de5-ba00-4d9368c370b8"],
Cell[1727247, 33148, 149, 2, 32, "ItemNumbered",ExpressionUUID->"adce7153-85b8-442d-8d4b-92995bc606f0"],
Cell[1727399, 33152, 156, 2, 32, "ItemNumbered",ExpressionUUID->"513d2de5-1952-434d-b71d-8b4a9dd4df23"],
Cell[1727558, 33156, 166, 3, 32, "ItemNumbered",ExpressionUUID->"9e68ee18-2e5d-476d-b6e6-954776ad9fdf"],
Cell[1727727, 33161, 492, 33, 35, "Text",ExpressionUUID->"c20efe2b-fd18-4ea9-8299-a92d9eb0c7bc"],
Cell[1728222, 33196, 112, 0, 35, "Text",ExpressionUUID->"a483e511-11aa-430c-bc06-61a9093dcd89"],
Cell[1728337, 33198, 365, 6, 50, "ExternalLanguage",ExpressionUUID->"ec94dbfc-e809-473e-8c57-1f53a1e95cc6"],
Cell[1728705, 33206, 111, 0, 35, "Text",ExpressionUUID->"f1253b9f-1cbe-4835-92aa-830f2c69c10d"],
Cell[1728819, 33208, 363, 6, 50, "ExternalLanguage",ExpressionUUID->"cedb8529-ed04-46b7-b7ec-9a2de1995c9d"],
Cell[1729185, 33216, 108, 0, 35, "Text",ExpressionUUID->"6b253bf9-88ce-45f3-8aac-94e67dd1cd2a"],
Cell[CellGroupData[{
Cell[1729318, 33220, 453, 9, 84, "ExternalLanguage",ExpressionUUID->"1084c5b6-9a9b-45c6-b8c3-606b597eea80"],
Cell[1729774, 33231, 320283, 5572, 63, "Output",ExpressionUUID->"bf376bc6-72e4-4e15-a62d-33168ceca2fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2050094, 38808, 256, 6, 67, "ExternalLanguage",ExpressionUUID->"9269b05f-d872-4d1f-aed6-71d681bb7f64"],
Cell[2050353, 38816, 188, 3, 34, "Output",ExpressionUUID->"4801659d-4e11-43cf-8f97-ce55f1a2fa53"]
}, Open  ]],
Cell[2050556, 38822, 148, 2, 35, "Text",ExpressionUUID->"b1242869-20f6-4286-84a3-1d2e1bb36d64"],
Cell[CellGroupData[{
Cell[2050729, 38828, 296, 10, 152, "ExternalLanguage",ExpressionUUID->"9c54dc68-411a-499c-b6ed-4548dd327b67"],
Cell[2051028, 38840, 188, 3, 34, "Output",ExpressionUUID->"047c2e35-691c-4499-9f2c-4b35020152e8"]
}, Open  ]],
Cell[2051231, 38846, 221, 16, 35, "Text",ExpressionUUID->"dd60cf1a-319b-4254-ace0-6e0beacb59bf"],
Cell[CellGroupData[{
Cell[2051477, 38866, 173, 2, 50, "ExternalLanguage",ExpressionUUID->"6dbca221-6a5e-4a3e-b91a-029595ade7ed"],
Cell[2051653, 38870, 166, 3, 34, "Output",ExpressionUUID->"bd710f09-456e-4451-891d-7b2ea693183e"]
}, Open  ]],
Cell[2051834, 38876, 288, 24, 35, "Text",ExpressionUUID->"51f18bf3-3d70-4a26-bc6c-f7817d799d5f"],
Cell[2052125, 38902, 164, 2, 50, "ExternalLanguage",ExpressionUUID->"77fc29a4-fd8c-4519-83ab-92fdc4c70177"],
Cell[2052292, 38906, 321, 28, 35, "Text",ExpressionUUID->"c7560797-84b1-4608-b67e-e358042ef429"],
Cell[2052616, 38936, 153, 2, 50, "ExternalLanguage",ExpressionUUID->"031c592b-fcc7-4b5c-98b6-f7fc32deec51"],
Cell[2052772, 38940, 127, 0, 35, "Text",ExpressionUUID->"d1888f92-c718-4082-bf09-b3397e569a3e"],
Cell[2052902, 38942, 156, 2, 50, "ExternalLanguage",ExpressionUUID->"8254b17f-772e-4cee-a246-3d4c51e72869"],
Cell[2053061, 38946, 310, 5, 35, "Text",ExpressionUUID->"4c09f9cb-ae4a-4e71-a798-42d95e7bb9ce"],
Cell[2053374, 38953, 199, 5, 20, InheritFromParent,ExpressionUUID->"7cc55c5a-d257-4a78-861c-37596f0ff343"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2053610, 38963, 89, 0, 67, "Section",ExpressionUUID->"97c3da03-c955-4ad5-82f1-cbe418779306"],
Cell[2053702, 38965, 127, 0, 35, "Text",ExpressionUUID->"90ffc454-e8d7-49d1-a702-0caf703300f5"],
Cell[2053832, 38967, 103, 0, 32, "Item",ExpressionUUID->"ba831b56-6aac-43c1-b34a-338a09ef51c4"],
Cell[2053938, 38969, 110, 0, 32, "Item",ExpressionUUID->"e8b4e370-d49f-4919-ba32-8cc19710bcbf"],
Cell[CellGroupData[{
Cell[2054073, 38973, 119, 0, 32, "Item",ExpressionUUID->"13015470-1520-41f7-b7a0-689a17e0f856"],
Cell[2054195, 38975, 328, 14, 27, "Subitem",ExpressionUUID->"d1b0bf96-8a87-4d43-ab59-fc743d4dc0ad"]
}, Open  ]],
Cell[2054538, 38992, 113, 0, 32, "Item",ExpressionUUID->"1b81e3dc-a201-4053-b645-0bdd80fce4e0"],
Cell[2054654, 38994, 167, 3, 35, "Text",ExpressionUUID->"4b1a1ca8-1982-4470-a2c0-1256bd4f7f15"],
Cell[2054824, 38999, 199, 5, 20, InheritFromParent,ExpressionUUID->"1928a612-c47c-4023-b318-2853095b432c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2055060, 39009, 84, 0, 67, "Section",ExpressionUUID->"f09d7496-a238-4f42-95e3-1719ecbdd408"],
Cell[CellGroupData[{
Cell[2055169, 39013, 85, 0, 54, "Subsection",ExpressionUUID->"045b45fa-d430-408f-8568-8deef82961de"],
Cell[2055257, 39015, 549, 23, 35, "Text",ExpressionUUID->"a8a07a50-360d-4b2e-83e2-485e67e0fbf8"],
Cell[2055809, 39040, 525, 23, 35, "Text",ExpressionUUID->"cb5f25f0-9dd8-49e6-87c8-34546fd95068"],
Cell[2056337, 39065, 617, 24, 35, "Text",ExpressionUUID->"49dd7446-3f63-42fc-9b94-baa1c44bb4e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2056991, 39094, 96, 0, 54, "Subsection",ExpressionUUID->"4e3ac04f-99fb-480e-83e6-46bf51bf010e"],
Cell[2057090, 39096, 319, 15, 35, "Text",ExpressionUUID->"4d191e2c-4897-49c5-ae35-4eafd75b1832"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2057446, 39116, 94, 0, 54, "Subsection",ExpressionUUID->"598e9f2c-35cc-435a-8e87-4ac028cafc24"],
Cell[2057543, 39118, 530, 23, 35, "Text",ExpressionUUID->"5b3d6346-14fe-41fd-9775-2b2a07945f87"],
Cell[2058076, 39143, 515, 23, 35, "Text",ExpressionUUID->"703eee00-7911-4c63-ac39-786564c4186b"],
Cell[2058594, 39168, 461, 22, 35, "Text",ExpressionUUID->"29db18da-013c-481e-a632-8df8e56ca9db"],
Cell[2059058, 39192, 457, 22, 35, "Text",ExpressionUUID->"5aff7be3-bd2b-44ad-9be0-e0787212b1d8"],
Cell[2059518, 39216, 460, 22, 35, "Text",ExpressionUUID->"2b872d0c-f573-496f-81db-b8cd82791515"],
Cell[2059981, 39240, 402, 20, 35, "Text",ExpressionUUID->"518aa330-a184-479f-a4df-497e755cbe91"],
Cell[2060386, 39262, 485, 22, 35, "Text",ExpressionUUID->"9985c238-17b8-4058-a1cd-15eb49fa6a0e"],
Cell[2060874, 39286, 413, 20, 35, "Text",ExpressionUUID->"3497af4f-579b-4ee5-a833-9cbbbc401ab3"],
Cell[2061290, 39308, 550, 25, 35, "Text",ExpressionUUID->"9ca9b57c-28c6-424a-9a67-19310fe953a6"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

